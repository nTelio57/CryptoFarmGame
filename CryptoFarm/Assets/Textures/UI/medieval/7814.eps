%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Cyrillic
%%Title: 1509.i110.003.S.m007.c10.medieval game.eps
%%Creator: Adobe Illustrator(R) 15.1
%%For: Юыќур
%%CreationDate: 9/24/2015
%%BoundingBox: 0 0 450 450
%%HiResBoundingBox: 0 0 450 450
%%CropBox: 0 0 450 450
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 15.1.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 15.1.0 x39 R agm 4.5189 ct 5.1875%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="яЛП" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.0-c060 61.134777, 2010/02/12-17:32:00        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">1509.i110.003.S.m007.c10.medieval game</rdf:li>
            </rdf:Alt>
         </dc:title>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xmp:MetadataDate>2015-09-24T20:56:42+04:00</xmp:MetadataDate>
         <xmp:ModifyDate>2015-09-24T20:56:42+04:00</xmp:ModifyDate>
         <xmp:CreateDate>2015-09-24T20:56:42+04:00</xmp:CreateDate>
         <xmp:CreatorTool>Adobe Illustrator CS5.1</xmp:CreatorTool>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>256</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEC0ALQAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAC0AAAAAEA&#xA;AQLQAAAAAQAB/+IMWElDQ19QUk9GSUxFAAEBAAAMSExpbm8CEAAAbW50clJHQiBYWVogB84AAgAJ&#xA;AAYAMQAAYWNzcE1TRlQAAAAASUVDIHNSR0IAAAAAAAAAAAAAAAAAAPbWAAEAAAAA0y1IUCAgAAAA&#xA;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAARY3BydAAAAVAAAAAz&#xA;ZGVzYwAAAYQAAABsd3RwdAAAAfAAAAAUYmtwdAAAAgQAAAAUclhZWgAAAhgAAAAUZ1hZWgAAAiwA&#xA;AAAUYlhZWgAAAkAAAAAUZG1uZAAAAlQAAABwZG1kZAAAAsQAAACIdnVlZAAAA0wAAACGdmlldwAA&#xA;A9QAAAAkbHVtaQAAA/gAAAAUbWVhcwAABAwAAAAkdGVjaAAABDAAAAAMclRSQwAABDwAAAgMZ1RS&#xA;QwAABDwAAAgMYlRSQwAABDwAAAgMdGV4dAAAAABDb3B5cmlnaHQgKGMpIDE5OTggSGV3bGV0dC1Q&#xA;YWNrYXJkIENvbXBhbnkAAGRlc2MAAAAAAAAAEnNSR0IgSUVDNjE5NjYtMi4xAAAAAAAAAAAAAAAS&#xA;c1JHQiBJRUM2MTk2Ni0yLjEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&#xA;AAAAAAAAAAAAAFhZWiAAAAAAAADzUQABAAAAARbMWFlaIAAAAAAAAAAAAAAAAAAAAABYWVogAAAA&#xA;AAAAb6IAADj1AAADkFhZWiAAAAAAAABimQAAt4UAABjaWFlaIAAAAAAAACSgAAAPhAAAts9kZXNj&#xA;AAAAAAAAABZJRUMgaHR0cDovL3d3dy5pZWMuY2gAAAAAAAAAAAAAABZJRUMgaHR0cDovL3d3dy5p&#xA;ZWMuY2gAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAZGVzYwAA&#xA;AAAAAAAuSUVDIDYxOTY2LTIuMSBEZWZhdWx0IFJHQiBjb2xvdXIgc3BhY2UgLSBzUkdCAAAAAAAA&#xA;AAAAAAAuSUVDIDYxOTY2LTIuMSBEZWZhdWx0IFJHQiBjb2xvdXIgc3BhY2UgLSBzUkdCAAAAAAAA&#xA;AAAAAAAAAAAAAAAAAAAAAGRlc2MAAAAAAAAALFJlZmVyZW5jZSBWaWV3aW5nIENvbmRpdGlvbiBp&#xA;biBJRUM2MTk2Ni0yLjEAAAAAAAAAAAAAACxSZWZlcmVuY2UgVmlld2luZyBDb25kaXRpb24gaW4g&#xA;SUVDNjE5NjYtMi4xAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB2aWV3AAAAAAATpP4AFF8uABDP&#xA;FAAD7cwABBMLAANcngAAAAFYWVogAAAAAABMCVYAUAAAAFcf521lYXMAAAAAAAAAAQAAAAAAAAAA&#xA;AAAAAAAAAAAAAAKPAAAAAnNpZyAAAAAAQ1JUIGN1cnYAAAAAAAAEAAAAAAUACgAPABQAGQAeACMA&#xA;KAAtADIANwA7AEAARQBKAE8AVABZAF4AYwBoAG0AcgB3AHwAgQCGAIsAkACVAJoAnwCkAKkArgCy&#xA;ALcAvADBAMYAywDQANUA2wDgAOUA6wDwAPYA+wEBAQcBDQETARkBHwElASsBMgE4AT4BRQFMAVIB&#xA;WQFgAWcBbgF1AXwBgwGLAZIBmgGhAakBsQG5AcEByQHRAdkB4QHpAfIB+gIDAgwCFAIdAiYCLwI4&#xA;AkECSwJUAl0CZwJxAnoChAKOApgCogKsArYCwQLLAtUC4ALrAvUDAAMLAxYDIQMtAzgDQwNPA1oD&#xA;ZgNyA34DigOWA6IDrgO6A8cD0wPgA+wD+QQGBBMEIAQtBDsESARVBGMEcQR+BIwEmgSoBLYExATT&#xA;BOEE8AT+BQ0FHAUrBToFSQVYBWcFdwWGBZYFpgW1BcUF1QXlBfYGBgYWBicGNwZIBlkGagZ7BowG&#xA;nQavBsAG0QbjBvUHBwcZBysHPQdPB2EHdAeGB5kHrAe/B9IH5Qf4CAsIHwgyCEYIWghuCIIIlgiq&#xA;CL4I0gjnCPsJEAklCToJTwlkCXkJjwmkCboJzwnlCfsKEQonCj0KVApqCoEKmAquCsUK3ArzCwsL&#xA;Igs5C1ELaQuAC5gLsAvIC+EL+QwSDCoMQwxcDHUMjgynDMAM2QzzDQ0NJg1ADVoNdA2ODakNww3e&#xA;DfgOEw4uDkkOZA5/DpsOtg7SDu4PCQ8lD0EPXg96D5YPsw/PD+wQCRAmEEMQYRB+EJsQuRDXEPUR&#xA;ExExEU8RbRGMEaoRyRHoEgcSJhJFEmQShBKjEsMS4xMDEyMTQxNjE4MTpBPFE+UUBhQnFEkUahSL&#xA;FK0UzhTwFRIVNBVWFXgVmxW9FeAWAxYmFkkWbBaPFrIW1hb6Fx0XQRdlF4kXrhfSF/cYGxhAGGUY&#xA;ihivGNUY+hkgGUUZaxmRGbcZ3RoEGioaURp3Gp4axRrsGxQbOxtjG4obshvaHAIcKhxSHHscoxzM&#xA;HPUdHh1HHXAdmR3DHeweFh5AHmoelB6+HukfEx8+H2kflB+/H+ogFSBBIGwgmCDEIPAhHCFIIXUh&#xA;oSHOIfsiJyJVIoIiryLdIwojOCNmI5QjwiPwJB8kTSR8JKsk2iUJJTglaCWXJccl9yYnJlcmhya3&#xA;JugnGCdJJ3onqyfcKA0oPyhxKKIo1CkGKTgpaymdKdAqAio1KmgqmyrPKwIrNitpK50r0SwFLDks&#xA;biyiLNctDC1BLXYtqy3hLhYuTC6CLrcu7i8kL1ovkS/HL/4wNTBsMKQw2zESMUoxgjG6MfIyKjJj&#xA;Mpsy1DMNM0YzfzO4M/E0KzRlNJ402DUTNU01hzXCNf02NzZyNq426TckN2A3nDfXOBQ4UDiMOMg5&#xA;BTlCOX85vDn5OjY6dDqyOu87LTtrO6o76DwnPGU8pDzjPSI9YT2hPeA+ID5gPqA+4D8hP2E/oj/i&#xA;QCNAZECmQOdBKUFqQaxB7kIwQnJCtUL3QzpDfUPARANER0SKRM5FEkVVRZpF3kYiRmdGq0bwRzVH&#xA;e0fASAVIS0iRSNdJHUljSalJ8Eo3Sn1KxEsMS1NLmkviTCpMcky6TQJNSk2TTdxOJU5uTrdPAE9J&#xA;T5NP3VAnUHFQu1EGUVBRm1HmUjFSfFLHUxNTX1OqU/ZUQlSPVNtVKFV1VcJWD1ZcVqlW91dEV5JX&#xA;4FgvWH1Yy1kaWWlZuFoHWlZaplr1W0VblVvlXDVchlzWXSddeF3JXhpebF69Xw9fYV+zYAVgV2Cq&#xA;YPxhT2GiYfViSWKcYvBjQ2OXY+tkQGSUZOllPWWSZedmPWaSZuhnPWeTZ+loP2iWaOxpQ2maafFq&#xA;SGqfavdrT2una/9sV2yvbQhtYG25bhJua27Ebx5veG/RcCtwhnDgcTpxlXHwcktypnMBc11zuHQU&#xA;dHB0zHUodYV14XY+dpt2+HdWd7N4EXhueMx5KnmJeed6RnqlewR7Y3vCfCF8gXzhfUF9oX4BfmJ+&#xA;wn8jf4R/5YBHgKiBCoFrgc2CMIKSgvSDV4O6hB2EgITjhUeFq4YOhnKG14c7h5+IBIhpiM6JM4mZ&#xA;if6KZIrKizCLlov8jGOMyo0xjZiN/45mjs6PNo+ekAaQbpDWkT+RqJIRknqS45NNk7aUIJSKlPSV&#xA;X5XJljSWn5cKl3WX4JhMmLiZJJmQmfyaaJrVm0Kbr5wcnImc951kndKeQJ6unx2fi5/6oGmg2KFH&#xA;obaiJqKWowajdqPmpFakx6U4pammGqaLpv2nbqfgqFKoxKk3qamqHKqPqwKrdavprFys0K1Erbiu&#xA;La6hrxavi7AAsHWw6rFgsdayS7LCszizrrQltJy1E7WKtgG2ebbwt2i34LhZuNG5SrnCuju6tbsu&#xA;u6e8IbybvRW9j74KvoS+/796v/XAcMDswWfB48JfwtvDWMPUxFHEzsVLxcjGRsbDx0HHv8g9yLzJ&#xA;Osm5yjjKt8s2y7bMNcy1zTXNtc42zrbPN8+40DnQutE80b7SP9LB00TTxtRJ1MvVTtXR1lXW2Ndc&#xA;1+DYZNjo2WzZ8dp22vvbgNwF3IrdEN2W3hzeot8p36/gNuC94UThzOJT4tvjY+Pr5HPk/OWE5g3m&#xA;lucf56noMui86Ubp0Opb6uXrcOv77IbtEe2c7ijutO9A78zwWPDl8XLx//KM8xnzp/Q09ML1UPXe&#xA;9m32+/eK+Bn4qPk4+cf6V/rn+3f8B/yY/Sn9uv5L/tz/bf///+4ADkFkb2JlAGTAAAAAAf/bAIQA&#xA;BgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoKDBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8f&#xA;Hx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f&#xA;Hx8fHx8fHx8fHx8fHx8f/8AAEQgBAAEAAwERAAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQF&#xA;AwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAAAQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMB&#xA;AgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPBUtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdU&#xA;ZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eX&#xA;p7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZqbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUE&#xA;BQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEyobHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PS&#xA;NeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG&#xA;1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/a&#xA;AAwDAQACEQMRAD8A87YVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVd&#xA;irsVdirsVdirsVdirsVdirsVdirsVdirsVdirMPJH5Wea/Oenapf6MkRh0pOUgmZ1aZyrMIYOKOG&#xA;kovQkDcb75i6jWQxECXVnHGZcmHkEGh65lMGVfl9+W/mLz3qNzY6MYY2tIfWnnuWdIlBYKq8kSQ8&#xA;m7CnY5janVQwgGXVnCBlyY3eWlzZXc9ndRmG6tpGhnibZkkjYqyn3BFMyIyBFjkwITPyj5T1fzVr&#xA;cWj6UqfWZVZzJIWEaIgqWcqHIFaDp1IzH1erhp4ccuXlzLbhxHJKghde0S/0PWLvSb9Qt3ZyGOTj&#xA;Uqe6spIBKspDLt0yenzxzYxOP0yY5MZhIxPMIDLmDsVdirsVdirsVdirsVdirsVdirsVdirsVdir&#xA;sVdirsVdirsVdirsVdirsVXrBO68kjZl8QCRgMg2xwTkLESR7nqXlH8vdP0zXdO1XUZYtVsYHWWf&#xA;T5IAYpVp9klnII3rutD3GazU6qUoEQ2l73r4eyO1+Jf+b+m/0PrLQ7XSYNMgOk2kVlZTos0cEEaw&#xA;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&#xA;FXYq7FXYq7FXYq7FX//Z</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#">
         <xmpMM:InstanceID>xmp.iid:E7214438DD62E51186679D661DCE740B</xmpMM:InstanceID>
         <xmpMM:DocumentID>xmp.did:E7214438DD62E51186679D661DCE740B</xmpMM:DocumentID>
         <xmpMM:OriginalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</xmpMM:OriginalDocumentID>
         <xmpMM:RenditionClass>default</xmpMM:RenditionClass>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:9c2bd3f7-ee46-4ed6-b339-58618f88bc68</stRef:instanceID>
            <stRef:documentID>xmp.did:5c6f54c6-4fff-c04b-a9b2-f19d83b32eb3</stRef:documentID>
            <stRef:originalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</stRef:originalDocumentID>
            <stRef:renditionClass>default</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:877234a0-2c46-3949-ad59-261e819cbc77</stEvt:instanceID>
                  <stEvt:when>2014-05-04T11:44:48+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:5c6f54c6-4fff-c04b-a9b2-f19d83b32eb3</stEvt:instanceID>
                  <stEvt:when>2015-09-24T20:35:12+04:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:E7214438DD62E51186679D661DCE740B</stEvt:instanceID>
                  <stEvt:when>2015-09-24T20:56:42+04:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS5.1</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/">
         <illustrator:StartupProfile>Print</illustrator:StartupProfile>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/">
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>450.000000</stDim:w>
            <stDim:h>450.000000</stDim:h>
            <stDim:unit>Pixels</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>аббаПаПаА аОаБбаАаЗбаОаВ аПаО баМаОаЛбаАаНаИб</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <pdf:Producer>Adobe PDF library 11.00</pdf:Producer>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -450 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 450 li
450 450 li
450 0 li
cp
clp
[1 0 0 1 0 0 ]ct
450 450 mo
0 450 li
0 0 li
450 0 li
450 450 li
cp
false sop
/0 
[/DeviceRGB] /CSA add_res
.0980392 .0980392 .105882 rgb
f
264.611 121.937 mo
258.439 121.937 253.417 116.916 253.417 110.742 cv
253.417 110.604 li
253.417 104.431 258.439 99.4092 264.611 99.4092 cv
417.774 99.4092 li
423.946 99.4092 428.969 104.431 428.969 110.604 cv
428.969 110.742 li
428.969 116.916 423.946 121.937 417.774 121.937 cv
264.611 121.937 li
cp
.0235294 .376471 .333333 rgb
f
417.773 101.833 mo
291.074 101.833 li
264.611 101.833 li
259.775 101.833 255.841 105.768 255.841 110.604 cv
255.841 110.742 li
255.841 115.578 259.775 119.513 264.611 119.513 cv
291.074 119.513 li
417.773 119.513 li
422.609 119.513 426.544 115.578 426.544 110.742 cv
426.544 110.604 li
426.544 105.768 422.609 101.833 417.773 101.833 cv
cp
f
264.612 103.776 mo
260.841 103.776 257.784 106.833 257.784 110.604 cv
257.784 110.742 li
257.784 114.513 260.841 117.57 264.612 117.57 cv
291.074 117.57 li
291.074 103.776 li
264.612 103.776 li
cp
1 .258824 .321569 rgb
f
417.773 103.776 mo
291.074 103.776 li
291.074 117.57 li
417.773 117.57 li
421.544 117.57 424.602 114.513 424.602 110.742 cv
424.602 110.604 li
424.602 106.833 421.544 103.776 417.773 103.776 cv
cp
.160784 .611765 .568627 rgb
f
302.365 110.831 mo
302.365 104.121 296.926 98.6812 290.215 98.6812 cv
283.505 98.6812 278.065 104.121 278.065 110.831 cv
278.065 117.542 283.505 122.981 290.215 122.981 cv
296.926 122.981 302.365 117.542 302.365 110.831 cv
cp
.929412 .592157 0 rgb
f
300.489 109.963 mo
300.489 103.253 295.05 97.813 288.34 97.813 cv
281.629 97.813 276.189 103.253 276.189 109.963 cv
276.189 116.674 281.629 122.114 288.34 122.114 cv
295.05 122.114 300.489 116.674 300.489 109.963 cv
cp
1 .760784 .2 rgb
f
288.34 105.685 mo
288.34 103.322 286.424 101.407 284.062 101.407 cv
281.698 101.407 279.783 103.322 279.783 105.685 cv
279.783 108.048 281.698 109.963 284.062 109.963 cv
286.424 109.963 288.34 108.048 288.34 105.685 cv
cp
1 .937255 .580392 rgb
f
214.475 296.627 mo
46.0059 296.627 li
36.3511 296.627 28.5249 288.801 28.5249 279.146 cv
28.5249 67.9604 li
28.5249 58.3062 36.3511 50.4795 46.0059 50.4795 cv
214.475 50.4795 li
224.129 50.4795 231.956 58.3062 231.956 67.9604 cv
231.956 279.146 li
231.956 288.801 224.129 296.627 214.475 296.627 cv
cp
1 .760784 .2 rgb
f
46.0059 287.545 mo
41.3745 287.545 37.6064 283.777 37.6064 279.146 cv
37.6064 67.96 li
37.6064 63.3286 41.3745 59.561 46.0059 59.561 cv
214.475 59.561 li
219.106 59.561 222.874 63.3286 222.874 67.96 cv
222.874 279.146 li
222.874 283.777 219.106 287.545 214.475 287.545 cv
46.0059 287.545 li
cp
1 .937255 .580392 rgb
f
224.24 69.5513 mo
224.24 64.0337 219.767 59.561 214.25 59.561 cv
208.732 59.561 204.26 64.0337 204.26 69.5513 cv
204.26 75.0684 208.732 79.541 214.25 79.541 cv
219.767 79.541 224.24 75.0684 224.24 69.5513 cv
cp
1 .760784 .2 rgb
f
224.24 67.7666 mo
224.24 62.2495 219.767 57.7769 214.25 57.7769 cv
208.732 57.7769 204.26 62.2495 204.26 67.7666 cv
204.26 73.2842 208.732 77.7568 214.25 77.7568 cv
219.767 77.7568 224.24 73.2842 224.24 67.7666 cv
cp
1 1 1 rgb
f
221.292 62.915 mo
216.418 67.7891 li
221.091 72.4614 li
218.989 74.5635 li
214.317 69.8906 li
209.398 74.8091 li
207.207 72.6182 li
212.126 67.6997 li
207.453 63.0269 li
209.555 60.9253 li
214.228 65.5977 li
219.101 60.7241 li
221.292 62.915 li
cp
.160784 .611765 .568627 rgb
f
183.127 229.323 mo
77.354 229.323 li
69.9297 229.323 63.9111 235.342 63.9111 242.767 cv
63.9111 243.038 li
63.9111 250.462 69.9297 256.481 77.354 256.481 cv
183.127 256.481 li
190.551 256.481 196.57 250.462 196.57 243.038 cv
196.57 242.767 li
196.57 235.342 190.551 229.323 183.127 229.323 cv
cp
1 .760784 .2 rgb
f
183.127 227.141 mo
77.354 227.141 li
69.9297 227.141 63.9111 233.159 63.9111 240.584 cv
63.9111 240.855 li
63.9111 248.28 69.9297 254.299 77.354 254.299 cv
183.127 254.299 li
190.551 254.299 196.57 248.28 196.57 240.855 cv
196.57 240.584 li
196.57 233.159 190.551 227.141 183.127 227.141 cv
cp
.160784 .611765 .568627 rgb
f
115.217 240.466 mo
115.217 241.647 115.441 242.537 115.89 243.135 cv
116.338 243.732 117.008 244.031 117.9 244.031 cv
119.689 244.031 120.584 242.843 120.584 240.466 cv
120.584 238.083 119.694 236.893 117.915 236.893 cv
117.022 236.893 116.35 237.192 115.897 237.793 cv
115.443 238.394 115.217 239.284 115.217 240.466 cv
cp
122.935 240.466 mo
122.935 241.71 122.714 242.752 122.272 243.594 cv
121.832 244.436 121.184 245.051 120.331 245.441 cv
122.876 248.284 li
120.005 248.284 li
118.067 245.912 li
117.9 245.912 li
116.28 245.912 115.036 245.441 114.168 244.502 cv
113.3 243.562 112.866 242.211 112.866 240.451 cv
112.866 238.691 113.301 237.347 114.172 236.419 cv
115.042 235.49 116.29 235.026 117.915 235.026 cv
119.54 235.026 120.783 235.494 121.644 236.43 cv
122.504 237.365 122.935 238.71 122.935 240.466 cv
cp
1 1 1 rgb
f
133.733 235.192 mo
133.733 242.035 li
133.733 242.816 133.559 243.501 133.209 244.089 cv
132.859 244.678 132.354 245.129 131.694 245.441 cv
131.033 245.755 130.252 245.912 129.351 245.912 cv
127.991 245.912 126.935 245.563 126.182 244.867 cv
125.43 244.17 125.054 243.217 125.054 242.006 cv
125.054 235.192 li
127.289 235.192 li
127.289 241.666 li
127.289 242.481 127.453 243.079 127.781 243.46 cv
128.109 243.841 128.651 244.031 129.408 244.031 cv
130.141 244.031 130.673 243.84 131.003 243.456 cv
131.333 243.073 131.499 242.472 131.499 241.651 cv
131.499 235.192 li
133.733 235.192 li
cp
f
136.323 245.768 mo
136.323 235.192 li
138.565 235.192 li
138.565 245.768 li
136.323 245.768 li
cp
f
145.306 245.768 mo
143.064 245.768 li
143.064 237.059 li
140.192 237.059 li
140.192 235.192 li
148.178 235.192 li
148.178 237.059 li
145.306 237.059 li
145.306 245.768 li
cp
f
183.127 190.771 mo
77.354 190.771 li
69.9297 190.771 63.9111 196.789 63.9111 204.213 cv
63.9111 204.485 li
63.9111 211.909 69.9297 217.928 77.354 217.928 cv
183.127 217.928 li
190.551 217.928 196.57 211.909 196.57 204.485 cv
196.57 204.213 li
196.57 196.789 190.551 190.771 183.127 190.771 cv
cp
1 .760784 .2 rgb
f
183.127 188.588 mo
77.354 188.588 li
69.9297 188.588 63.9111 194.606 63.9111 202.031 cv
63.9111 202.303 li
63.9111 209.727 69.9297 215.746 77.354 215.746 cv
183.127 215.746 li
190.551 215.746 196.57 209.727 196.57 202.303 cv
196.57 202.031 li
196.57 194.606 190.551 188.588 183.127 188.588 cv
cp
.160784 .611765 .568627 rgb
f
107.17 204.278 mo
107.17 205.232 106.827 205.985 106.14 206.535 cv
105.452 207.084 104.496 207.359 103.271 207.359 cv
102.143 207.359 101.145 207.147 100.277 206.723 cv
100.277 204.639 li
100.991 204.958 101.595 205.182 102.089 205.312 cv
102.583 205.442 103.035 205.507 103.445 205.507 cv
103.937 205.507 104.314 205.413 104.577 205.225 cv
104.84 205.037 104.971 204.758 104.971 204.386 cv
104.971 204.179 104.914 203.995 104.798 203.833 cv
104.682 203.671 104.512 203.516 104.288 203.366 cv
104.063 203.217 103.606 202.979 102.917 202.65 cv
102.271 202.347 101.786 202.055 101.463 201.775 cv
101.14 201.496 100.882 201.17 100.689 200.799 cv
100.497 200.427 100.4 199.993 100.4 199.497 cv
100.4 198.561 100.717 197.826 101.351 197.291 cv
101.985 196.755 102.862 196.488 103.98 196.488 cv
104.53 196.488 105.055 196.553 105.554 196.683 cv
106.053 196.813 106.575 196.997 107.12 197.233 cv
106.396 198.976 li
105.832 198.745 105.366 198.583 104.997 198.491 cv
104.628 198.4 104.265 198.354 103.908 198.354 cv
103.484 198.354 103.158 198.453 102.932 198.65 cv
102.705 198.848 102.592 199.106 102.592 199.424 cv
102.592 199.622 102.637 199.794 102.729 199.941 cv
102.821 200.089 102.966 200.231 103.167 200.368 cv
103.367 200.506 103.84 200.753 104.588 201.11 cv
105.576 201.583 106.254 202.056 106.621 202.531 cv
106.987 203.006 107.17 203.588 107.17 204.278 cv
cp
1 1 1 rgb
f
115.177 207.214 mo
109.087 207.214 li
109.087 196.64 li
115.177 196.64 li
115.177 198.477 li
111.329 198.477 li
111.329 200.799 li
114.909 200.799 li
114.909 202.636 li
111.329 202.636 li
111.329 205.363 li
115.177 205.363 li
115.177 207.214 li
cp
f
121.462 207.214 mo
119.22 207.214 li
119.22 198.506 li
116.349 198.506 li
116.349 196.64 li
124.334 196.64 li
124.334 198.506 li
121.462 198.506 li
121.462 207.214 li
cp
f
130.041 207.214 mo
127.799 207.214 li
127.799 198.506 li
124.927 198.506 li
124.927 196.64 li
132.913 196.64 li
132.913 198.506 li
130.041 198.506 li
130.041 207.214 li
cp
f
134.54 207.214 mo
134.54 196.64 li
136.782 196.64 li
136.782 207.214 li
134.54 207.214 li
cp
f
148.825 207.214 mo
145.976 207.214 li
141.375 199.215 li
141.31 199.215 li
141.402 200.627 141.448 201.635 141.448 202.238 cv
141.448 207.214 li
139.444 207.214 li
139.444 196.64 li
142.272 196.64 li
146.865 204.56 li
146.916 204.56 li
146.844 203.186 146.808 202.214 146.808 201.645 cv
146.808 196.64 li
148.825 196.64 li
148.825 207.214 li
cp
f
155.501 201.276 mo
159.697 201.276 li
159.697 206.759 li
159.017 206.98 158.376 207.136 157.776 207.225 cv
157.176 207.314 156.562 207.359 155.936 207.359 cv
154.339 207.359 153.121 206.89 152.279 205.952 cv
151.438 205.014 151.017 203.668 151.017 201.913 cv
151.017 200.206 151.505 198.875 152.481 197.92 cv
153.458 196.965 154.812 196.488 156.543 196.488 cv
157.628 196.488 158.674 196.705 159.682 197.139 cv
158.937 198.933 li
158.166 198.547 157.363 198.354 156.529 198.354 cv
155.56 198.354 154.783 198.679 154.2 199.331 cv
153.616 199.981 153.324 200.856 153.324 201.956 cv
153.324 203.104 153.56 203.98 154.03 204.585 cv
154.5 205.19 155.183 205.493 156.08 205.493 cv
156.548 205.493 157.023 205.445 157.505 205.348 cv
157.505 203.142 li
155.501 203.142 li
155.501 201.276 li
cp
f
183.127 152.217 mo
77.354 152.217 li
69.9297 152.217 63.9111 158.236 63.9111 165.661 cv
63.9111 165.932 li
63.9111 173.356 69.9297 179.375 77.354 179.375 cv
183.127 179.375 li
190.551 179.375 196.57 173.356 196.57 165.932 cv
196.57 165.661 li
196.57 158.236 190.551 152.217 183.127 152.217 cv
cp
1 .760784 .2 rgb
f
183.127 150.035 mo
77.354 150.035 li
69.9297 150.035 63.9111 156.054 63.9111 163.478 cv
63.9111 163.75 li
63.9111 171.174 69.9297 177.193 77.354 177.193 cv
183.127 177.193 li
190.551 177.193 196.57 171.174 196.57 163.75 cv
196.57 163.478 li
196.57 156.054 190.551 150.035 183.127 150.035 cv
cp
.160784 .611765 .568627 rgb
f
102.118 162.781 mo
102.841 162.781 li
103.55 162.781 104.073 162.663 104.411 162.426 cv
104.748 162.19 104.917 161.819 104.917 161.313 cv
104.917 160.811 104.744 160.454 104.399 160.242 cv
104.055 160.03 103.521 159.924 102.797 159.924 cv
102.118 159.924 li
102.118 162.781 li
cp
102.118 164.604 mo
102.118 168.661 li
99.8755 168.661 li
99.8755 158.086 li
102.957 158.086 li
104.394 158.086 105.457 158.348 106.146 158.871 cv
106.836 159.395 107.181 160.189 107.181 161.254 cv
107.181 161.876 107.009 162.43 106.667 162.915 cv
106.325 163.399 105.84 163.779 105.213 164.054 cv
106.805 166.431 107.841 167.967 108.324 168.661 cv
105.835 168.661 li
103.311 164.604 li
102.118 164.604 li
cp
1 1 1 rgb
f
115.745 168.661 mo
109.655 168.661 li
109.655 158.086 li
115.745 158.086 li
115.745 159.924 li
111.897 159.924 li
111.897 162.246 li
115.477 162.246 li
115.477 164.083 li
111.897 164.083 li
111.897 166.81 li
115.745 166.81 li
115.745 168.661 li
cp
f
124.193 165.725 mo
124.193 166.679 123.849 167.432 123.162 167.981 cv
122.475 168.531 121.519 168.806 120.294 168.806 cv
119.166 168.806 118.167 168.594 117.299 168.169 cv
117.299 166.086 li
118.013 166.404 118.617 166.628 119.111 166.759 cv
119.605 166.889 120.058 166.954 120.468 166.954 cv
120.959 166.954 121.337 166.86 121.6 166.672 cv
121.862 166.484 121.994 166.205 121.994 165.833 cv
121.994 165.626 121.936 165.441 121.82 165.28 cv
121.705 165.118 121.535 164.963 121.31 164.813 cv
121.086 164.664 120.629 164.425 119.939 164.097 cv
119.293 163.793 118.809 163.501 118.486 163.222 cv
118.163 162.942 117.905 162.617 117.712 162.246 cv
117.519 161.874 117.422 161.44 117.422 160.943 cv
117.422 160.008 117.74 159.272 118.374 158.737 cv
119.008 158.202 119.884 157.935 121.003 157.935 cv
121.553 157.935 122.077 158 122.576 158.13 cv
123.075 158.26 123.597 158.443 124.142 158.68 cv
123.418 160.423 li
122.854 160.191 122.388 160.03 122.019 159.938 cv
121.65 159.847 121.287 159.801 120.931 159.801 cv
120.506 159.801 120.181 159.899 119.954 160.097 cv
119.728 160.295 119.614 160.553 119.614 160.871 cv
119.614 161.069 119.66 161.241 119.751 161.388 cv
119.843 161.536 119.989 161.678 120.189 161.815 cv
120.389 161.953 120.863 162.2 121.61 162.557 cv
122.599 163.029 123.276 163.503 123.643 163.978 cv
124.009 164.453 124.193 165.035 124.193 165.725 cv
cp
f
130.189 168.661 mo
127.947 168.661 li
127.947 159.953 li
125.075 159.953 li
125.075 158.086 li
133.061 158.086 li
133.061 159.953 li
130.189 159.953 li
130.189 168.661 li
cp
f
139.859 164.264 mo
139.15 161.982 138.751 160.693 138.663 160.394 cv
138.573 160.095 138.509 159.858 138.471 159.685 cv
138.312 160.302 137.856 161.829 137.104 164.264 cv
139.859 164.264 li
cp
141.162 168.661 mo
140.395 166.144 li
136.54 166.144 li
135.773 168.661 li
133.357 168.661 li
137.089 158.043 li
139.831 158.043 li
143.577 168.661 li
141.162 168.661 li
cp
f
147.151 162.781 mo
147.874 162.781 li
148.583 162.781 149.106 162.663 149.444 162.426 cv
149.781 162.19 149.95 161.819 149.95 161.313 cv
149.95 160.811 149.777 160.454 149.433 160.242 cv
149.088 160.03 148.554 159.924 147.831 159.924 cv
147.151 159.924 li
147.151 162.781 li
cp
147.151 164.604 mo
147.151 168.661 li
144.909 168.661 li
144.909 158.086 li
147.99 158.086 li
149.427 158.086 150.49 158.348 151.18 158.871 cv
151.869 159.395 152.214 160.189 152.214 161.254 cv
152.214 161.876 152.042 162.43 151.7 162.915 cv
151.358 163.399 150.874 163.779 150.247 164.054 cv
151.838 166.431 152.875 167.967 153.357 168.661 cv
150.869 168.661 li
148.344 164.604 li
147.151 164.604 li
cp
f
158.767 168.661 mo
156.524 168.661 li
156.524 159.953 li
153.653 159.953 li
153.653 158.086 li
161.638 158.086 li
161.638 159.953 li
158.767 159.953 li
158.767 168.661 li
cp
f
183.127 113.665 mo
77.354 113.665 li
69.9297 113.665 63.9111 119.683 63.9111 127.108 cv
63.9111 127.379 li
63.9111 134.804 69.9297 140.822 77.354 140.822 cv
183.127 140.822 li
190.551 140.822 196.57 134.804 196.57 127.379 cv
196.57 127.108 li
196.57 119.683 190.551 113.665 183.127 113.665 cv
cp
1 .760784 .2 rgb
f
183.127 111.482 mo
77.354 111.482 li
69.9297 111.482 63.9111 117.501 63.9111 124.925 cv
63.9111 125.197 li
63.9111 132.621 69.9297 138.64 77.354 138.64 cv
183.127 138.64 li
190.551 138.64 196.57 132.621 196.57 125.197 cv
196.57 124.925 li
196.57 117.501 190.551 111.482 183.127 111.482 cv
cp
.160784 .611765 .568627 rgb
f
121.553 130.108 mo
118.703 130.108 li
114.103 122.109 li
114.038 122.109 li
114.129 123.521 114.175 124.529 114.175 125.132 cv
114.175 130.108 li
112.172 130.108 li
112.172 119.534 li
115 119.534 li
119.593 127.454 li
119.644 127.454 li
119.571 126.08 119.535 125.108 119.535 124.539 cv
119.535 119.534 li
121.553 119.534 li
121.553 130.108 li
cp
1 1 1 rgb
f
130.305 130.108 mo
124.215 130.108 li
124.215 119.534 li
130.305 119.534 li
130.305 121.371 li
126.457 121.371 li
126.457 123.693 li
130.037 123.693 li
130.037 125.53 li
126.457 125.53 li
126.457 128.257 li
130.305 128.257 li
130.305 130.108 li
cp
f
141.061 130.108 mo
138.5 130.108 li
136.041 126.108 li
133.582 130.108 li
131.18 130.108 li
134.688 124.655 li
131.404 119.534 li
133.878 119.534 li
136.157 123.338 li
138.392 119.534 li
140.807 119.534 li
137.487 124.778 li
141.061 130.108 li
cp
f
146.471 130.108 mo
144.229 130.108 li
144.229 121.4 li
141.357 121.4 li
141.357 119.534 li
149.342 119.534 li
149.342 121.4 li
146.471 121.4 li
146.471 130.108 li
cp
f
183.127 75.1118 mo
77.354 75.1118 li
69.9297 75.1118 63.9111 81.1304 63.9111 88.5547 cv
63.9111 88.8262 li
63.9111 96.2505 69.9297 102.27 77.354 102.27 cv
183.127 102.27 li
190.551 102.27 196.57 96.2505 196.57 88.8262 cv
196.57 88.5547 li
196.57 81.1304 190.551 75.1118 183.127 75.1118 cv
cp
1 .760784 .2 rgb
f
183.127 72.9292 mo
77.354 72.9292 li
69.9297 72.9292 63.9111 78.9482 63.9111 86.3726 cv
63.9111 86.644 li
63.9111 94.0684 69.9297 100.087 77.354 100.087 cv
183.127 100.087 li
190.551 100.087 196.57 94.0684 196.57 86.644 cv
196.57 86.3726 li
196.57 78.9482 190.551 72.9292 183.127 72.9292 cv
cp
.160784 .611765 .568627 rgb
f
103.966 85.6753 mo
104.689 85.6753 li
105.398 85.6753 105.921 85.5571 106.259 85.3208 cv
106.596 85.0845 106.765 84.7134 106.765 84.207 cv
106.765 83.7056 106.592 83.3486 106.248 83.1362 cv
105.903 82.9243 105.369 82.8184 104.646 82.8184 cv
103.966 82.8184 li
103.966 85.6753 li
cp
103.966 87.498 mo
103.966 91.5557 li
101.724 91.5557 li
101.724 80.981 li
104.805 80.981 li
106.242 80.981 107.305 81.2427 107.995 81.7656 cv
108.684 82.2891 109.029 83.0835 109.029 84.1489 cv
109.029 84.771 108.857 85.3242 108.515 85.8091 cv
108.173 86.2935 107.688 86.6733 107.062 86.9482 cv
108.653 89.3257 109.689 90.8613 110.172 91.5557 cv
107.684 91.5557 li
105.159 87.498 li
103.966 87.498 li
cp
1 1 1 rgb
f
117.593 91.5557 mo
111.503 91.5557 li
111.503 80.981 li
117.593 80.981 li
117.593 82.8184 li
113.745 82.8184 li
113.745 85.1401 li
117.325 85.1401 li
117.325 86.9771 li
113.745 86.9771 li
113.745 89.7041 li
117.593 89.7041 li
117.593 91.5557 li
cp
f
126.041 88.6191 mo
126.041 89.5737 125.697 90.3262 125.01 90.876 cv
124.323 91.4253 123.367 91.7002 122.142 91.7002 cv
121.014 91.7002 120.016 91.4883 119.147 91.064 cv
119.147 88.9805 li
119.861 89.2988 120.465 89.5229 120.959 89.6533 cv
121.454 89.7837 121.906 89.8486 122.316 89.8486 cv
122.808 89.8486 123.185 89.7544 123.448 89.5664 cv
123.71 89.3784 123.842 89.0991 123.842 88.7275 cv
123.842 88.5205 123.784 88.3359 123.668 88.1743 cv
123.553 88.0127 123.383 87.8574 123.158 87.7075 cv
122.934 87.5581 122.477 87.3198 121.788 86.9917 cv
121.142 86.688 120.657 86.396 120.334 86.1162 cv
120.011 85.8369 119.753 85.5112 119.56 85.1401 cv
119.367 84.7686 119.271 84.3345 119.271 83.8379 cv
119.271 82.9023 119.588 82.167 120.222 81.6318 cv
120.856 81.0967 121.732 80.8291 122.851 80.8291 cv
123.401 80.8291 123.925 80.894 124.424 81.0244 cv
124.923 81.1543 125.445 81.3379 125.99 81.5742 cv
125.267 83.3174 li
124.703 83.0859 124.236 82.9243 123.867 82.8325 cv
123.499 82.7412 123.135 82.6953 122.779 82.6953 cv
122.354 82.6953 122.029 82.7939 121.802 82.9917 cv
121.576 83.1895 121.462 83.4473 121.462 83.7656 cv
121.462 83.9634 121.508 84.1357 121.6 84.2827 cv
121.691 84.4302 121.837 84.5723 122.037 84.7095 cv
122.237 84.8472 122.711 85.0942 123.458 85.4512 cv
124.447 85.9238 125.125 86.3975 125.491 86.8721 cv
125.857 87.3472 126.041 87.9297 126.041 88.6191 cv
cp
f
136.565 80.981 mo
136.565 87.8232 li
136.565 88.6045 136.39 89.2896 136.041 89.8774 cv
135.691 90.4658 135.186 90.917 134.525 91.23 cv
133.865 91.5435 133.083 91.7002 132.182 91.7002 cv
130.822 91.7002 129.766 91.3521 129.014 90.6553 cv
128.262 89.9585 127.886 89.0049 127.886 87.7944 cv
127.886 80.981 li
130.121 80.981 li
130.121 87.4546 li
130.121 88.2695 130.284 88.8677 130.612 89.2485 cv
130.94 89.6294 131.483 89.8198 132.24 89.8198 cv
132.973 89.8198 133.504 89.6279 133.834 89.2446 cv
134.165 88.8613 134.33 88.2598 134.33 87.4399 cv
134.33 80.981 li
136.565 80.981 li
cp
f
143.632 91.5557 mo
141.086 83.2593 li
141.021 83.2593 li
141.112 84.9473 141.158 86.0732 141.158 86.6372 cv
141.158 91.5557 li
139.155 91.5557 li
139.155 80.981 li
142.207 80.981 li
144.709 89.0674 li
144.753 89.0674 li
147.408 80.981 li
150.46 80.981 li
150.46 91.5557 li
148.37 91.5557 li
148.37 86.5503 li
148.37 86.314 148.373 86.0415 148.38 85.7329 cv
148.388 85.4243 148.42 84.6045 148.478 83.2739 cv
148.413 83.2739 li
145.686 91.5557 li
143.632 91.5557 li
cp
f
159.211 91.5557 mo
153.122 91.5557 li
153.122 80.981 li
159.211 80.981 li
159.211 82.8184 li
155.364 82.8184 li
155.364 85.1401 li
158.944 85.1401 li
158.944 86.9771 li
155.364 86.9771 li
155.364 89.7041 li
159.211 89.7041 li
159.211 91.5557 li
cp
f
40.9863 278.481 mo
53.4995 303.012 li
54.1777 304.342 55.5454 305.18 57.0391 305.18 cv
65.0996 305.18 li
67.9185 305.18 69.8408 302.326 68.7822 299.714 cv
57.835 272.702 li
44.5259 272.702 li
41.5581 272.702 39.6377 275.837 40.9863 278.481 cv
cp
.839216 .0941176 .184314 rgb
f
219.495 278.481 mo
206.981 303.012 li
206.303 304.342 204.936 305.18 203.442 305.18 cv
195.381 305.18 li
192.563 305.18 190.64 302.326 191.699 299.714 cv
202.646 272.702 li
215.955 272.702 li
218.923 272.702 220.843 275.837 219.495 278.481 cv
cp
f
56.6538 269.787 mo
67.6011 296.799 li
130.965 296.799 li
130.965 264.321 li
60.3364 264.321 li
57.5176 264.321 55.5952 267.175 56.6538 269.787 cv
cp
1 .258824 .321569 rgb
f
203.827 269.787 mo
192.88 296.799 li
129.516 296.799 li
129.516 264.321 li
200.145 264.321 li
202.963 264.321 204.886 267.175 203.827 269.787 cv
cp
f
103.833 284.033 mo
103.833 285.621 103.262 286.873 102.119 287.787 cv
100.975 288.702 99.3848 289.159 97.3472 289.159 cv
95.4702 289.159 93.8096 288.807 92.3657 288.101 cv
92.3657 284.635 li
93.5527 285.164 94.5576 285.537 95.3799 285.754 cv
96.2021 285.971 96.9541 286.079 97.6362 286.079 cv
98.4546 286.079 99.082 285.923 99.5195 285.609 cv
99.9565 285.297 100.175 284.831 100.175 284.214 cv
100.175 283.869 100.079 283.562 99.8862 283.293 cv
99.6938 283.024 99.4111 282.766 99.0381 282.517 cv
98.665 282.269 97.9048 281.871 96.7578 281.326 cv
95.6826 280.82 94.8765 280.335 94.3389 279.87 cv
93.8013 279.404 93.3721 278.863 93.0513 278.245 cv
92.7305 277.628 92.5703 276.905 92.5703 276.079 cv
92.5703 274.522 93.0977 273.3 94.1523 272.409 cv
95.207 271.519 96.6655 271.073 98.5264 271.073 cv
99.4409 271.073 100.313 271.182 101.144 271.398 cv
101.974 271.615 102.842 271.92 103.749 272.313 cv
102.546 275.213 li
101.607 274.828 100.831 274.559 100.217 274.406 cv
99.6035 274.254 99 274.178 98.4063 274.178 cv
97.7002 274.178 97.1587 274.343 96.7817 274.671 cv
96.4048 275 96.2163 275.43 96.2163 275.959 cv
96.2163 276.288 96.2925 276.574 96.4448 276.819 cv
96.5972 277.064 96.8398 277.301 97.1729 277.529 cv
97.5054 277.758 98.2939 278.169 99.5371 278.763 cv
101.182 279.549 102.309 280.337 102.919 281.127 cv
103.528 281.917 103.833 282.886 103.833 284.033 cv
cp
.839216 .0941176 .184314 rgb
f
113.809 288.919 mo
110.079 288.919 li
110.079 274.431 li
105.301 274.431 li
105.301 271.326 li
118.586 271.326 li
118.586 274.431 li
113.809 274.431 li
113.809 288.919 li
cp
f
129.897 281.603 mo
128.718 277.808 128.054 275.662 127.906 275.165 cv
127.757 274.667 127.651 274.274 127.587 273.985 cv
127.322 275.013 126.564 277.552 125.313 281.603 cv
129.897 281.603 li
cp
132.063 288.919 mo
130.788 284.731 li
124.374 284.731 li
123.099 288.919 li
119.08 288.919 li
125.289 271.254 li
129.85 271.254 li
136.083 288.919 li
132.063 288.919 li
cp
f
142.027 279.136 mo
143.23 279.136 li
144.41 279.136 145.28 278.939 145.841 278.546 cv
146.403 278.153 146.684 277.535 146.684 276.692 cv
146.684 275.858 146.397 275.265 145.823 274.912 cv
145.25 274.559 144.361 274.383 143.158 274.383 cv
142.027 274.383 li
142.027 279.136 li
cp
142.027 282.168 mo
142.027 288.919 li
138.297 288.919 li
138.297 271.326 li
143.423 271.326 li
145.813 271.326 147.582 271.762 148.729 272.632 cv
149.876 273.502 150.45 274.824 150.45 276.597 cv
150.45 277.632 150.166 278.552 149.596 279.358 cv
149.026 280.164 148.22 280.796 147.177 281.254 cv
149.825 285.209 151.549 287.764 152.352 288.919 cv
148.212 288.919 li
144.013 282.168 li
142.027 282.168 li
cp
f
161.353 288.919 mo
157.622 288.919 li
157.622 274.431 li
152.845 274.431 li
152.845 271.326 li
166.13 271.326 li
166.13 274.431 li
161.353 274.431 li
161.353 288.919 li
cp
f
105.144 285.344 mo
105.144 286.933 104.572 288.184 103.429 289.099 cv
102.286 290.013 100.695 290.471 98.6577 290.471 cv
96.7808 290.471 95.1201 290.117 93.6763 289.411 cv
93.6763 285.946 li
94.8633 286.476 95.8682 286.849 96.6904 287.065 cv
97.5127 287.281 98.2646 287.39 98.9468 287.39 cv
99.7651 287.39 100.393 287.233 100.83 286.921 cv
101.267 286.607 101.486 286.143 101.486 285.524 cv
101.486 285.18 101.389 284.873 101.197 284.604 cv
101.004 284.336 100.722 284.077 100.349 283.828 cv
99.9756 283.579 99.2153 283.183 98.0684 282.637 cv
96.9932 282.131 96.187 281.646 95.6494 281.181 cv
95.1118 280.716 94.6826 280.174 94.3618 279.557 cv
94.041 278.938 93.8809 278.217 93.8809 277.391 cv
93.8809 275.834 94.4082 274.61 95.4629 273.72 cv
96.5176 272.829 97.9761 272.385 99.8369 272.385 cv
100.751 272.385 101.624 272.492 102.454 272.709 cv
103.285 272.926 104.153 273.23 105.06 273.624 cv
103.856 276.523 li
102.917 276.139 102.142 275.87 101.528 275.718 cv
100.914 275.565 100.311 275.489 99.7168 275.489 cv
99.0107 275.489 98.4692 275.653 98.0923 275.982 cv
97.7153 276.312 97.5269 276.74 97.5269 277.27 cv
97.5269 277.599 97.603 277.886 97.7554 278.13 cv
97.9077 278.375 98.1504 278.611 98.4834 278.84 cv
98.8159 279.069 99.6045 279.48 100.848 280.073 cv
102.492 280.86 103.62 281.648 104.229 282.438 cv
104.839 283.229 105.144 284.197 105.144 285.344 cv
cp
1 .937255 .580392 rgb
f
115.12 290.229 mo
111.389 290.229 li
111.389 275.741 li
106.612 275.741 li
106.612 272.637 li
119.897 272.637 li
119.897 275.741 li
115.12 275.741 li
115.12 290.229 li
cp
f
131.208 282.913 mo
130.029 279.119 129.365 276.974 129.217 276.476 cv
129.068 275.979 128.962 275.585 128.897 275.297 cv
128.633 276.323 127.875 278.862 126.624 282.913 cv
131.208 282.913 li
cp
133.374 290.229 mo
132.099 286.042 li
125.685 286.042 li
124.409 290.229 li
120.39 290.229 li
126.599 272.564 li
131.16 272.564 li
137.393 290.229 li
133.374 290.229 li
cp
f
143.337 280.446 mo
144.541 280.446 li
145.72 280.446 146.59 280.25 147.152 279.857 cv
147.713 279.464 147.995 278.847 147.995 278.004 cv
147.995 277.17 147.708 276.576 147.134 276.223 cv
146.561 275.87 145.672 275.693 144.469 275.693 cv
143.337 275.693 li
143.337 280.446 li
cp
143.337 283.479 mo
143.337 290.229 li
139.607 290.229 li
139.607 272.637 li
144.733 272.637 li
147.124 272.637 148.893 273.072 150.04 273.942 cv
151.187 274.813 151.761 276.135 151.761 277.907 cv
151.761 278.942 151.476 279.863 150.906 280.669 cv
150.337 281.476 149.531 282.107 148.488 282.564 cv
151.135 286.52 152.86 289.074 153.662 290.229 cv
149.522 290.229 li
145.323 283.479 li
143.337 283.479 li
cp
f
162.663 290.229 mo
158.933 290.229 li
158.933 275.741 li
154.155 275.741 li
154.155 272.637 li
167.44 272.637 li
167.44 275.741 li
162.663 275.741 li
162.663 290.229 li
cp
f
59.4775 45.5659 mo
68.542 63.3369 li
69.0332 64.2988 70.022 64.9048 71.1021 64.9048 cv
76.9468 64.9048 li
78.9854 64.9048 80.3755 62.8413 79.6099 60.9517 cv
71.6807 41.3867 li
62.0371 41.3867 li
59.8911 41.3867 58.502 43.6543 59.4775 45.5659 cv
cp
.839216 .0941176 .184314 rgb
f
188.745 45.5659 mo
179.68 63.3369 li
179.189 64.2988 178.201 64.9048 177.121 64.9048 cv
171.275 64.9048 li
169.237 64.9048 167.847 62.8413 168.612 60.9517 cv
176.542 41.3867 li
186.186 41.3867 li
188.332 41.3867 189.72 43.6543 188.745 45.5659 cv
cp
f
70.8232 39.271 mo
78.7524 58.8364 li
124.636 58.8364 li
124.636 35.3184 li
73.4863 35.3184 li
71.4482 35.3184 70.0576 37.3818 70.8232 39.271 cv
cp
1 .258824 .321569 rgb
f
177.399 39.271 mo
169.47 58.8364 li
123.586 58.8364 li
123.586 35.3184 li
174.736 35.3184 li
176.774 35.3184 178.165 37.3818 177.399 39.271 cv
cp
f
95.8789 24.3364 mo
98.6289 29.9092 li
98.8804 30.4189 99.3667 30.772 99.9292 30.854 cv
106.079 31.7476 li
107.496 31.9531 108.061 33.6938 107.036 34.6929 cv
102.586 39.0308 li
102.179 39.4272 101.993 39.999 102.089 40.5591 cv
103.14 46.6841 li
103.382 48.0947 101.901 49.1704 100.635 48.5044 cv
95.1338 45.6128 li
94.6309 45.3481 94.0298 45.3481 93.5269 45.6128 cv
88.0259 48.5044 li
86.7593 49.1704 85.2788 48.0947 85.5205 46.6841 cv
86.5713 40.5591 li
86.667 39.999 86.4814 39.4272 86.0747 39.0308 cv
81.6245 34.6929 li
80.5996 33.6938 81.165 31.9531 82.5811 31.7476 cv
88.7314 30.854 li
89.2939 30.772 89.7798 30.4189 90.0313 29.9092 cv
92.7817 24.3364 li
93.4155 23.0532 95.2451 23.0532 95.8789 24.3364 cv
cp
.929412 .592157 0 rgb
f
95.8789 22.8926 mo
98.6289 28.4653 li
98.8804 28.9751 99.3667 29.3281 99.9292 29.4102 cv
106.079 30.3037 li
107.496 30.5093 108.061 32.25 107.036 33.249 cv
102.586 37.5869 li
102.179 37.9834 101.993 38.5552 102.089 39.1152 cv
103.14 45.2407 li
103.382 46.6509 101.901 47.7266 100.635 47.0605 cv
95.1338 44.1689 li
94.6309 43.9043 94.0298 43.9043 93.5269 44.1689 cv
88.0259 47.0605 li
86.7593 47.7266 85.2788 46.6509 85.5205 45.2407 cv
86.5713 39.1152 li
86.667 38.5552 86.4814 37.9834 86.0747 37.5869 cv
81.6245 33.249 li
80.5996 32.25 81.165 30.5093 82.5811 30.3037 cv
88.7314 29.4102 li
89.2939 29.3281 89.7798 28.9751 90.0313 28.4653 cv
92.7817 22.8926 li
93.4155 21.6094 95.2451 21.6094 95.8789 22.8926 cv
cp
1 .937255 .580392 rgb
f
125.66 24.3364 mo
128.41 29.9092 li
128.662 30.4189 129.147 30.772 129.71 30.854 cv
135.86 31.7476 li
137.276 31.9531 137.842 33.6938 136.817 34.6929 cv
132.367 39.0308 li
131.96 39.4272 131.774 39.999 131.87 40.5591 cv
132.921 46.6841 li
133.163 48.0947 131.682 49.1704 130.416 48.5044 cv
124.915 45.6128 li
124.412 45.3481 123.811 45.3481 123.308 45.6128 cv
117.807 48.5044 li
116.54 49.1704 115.06 48.0947 115.301 46.6841 cv
116.352 40.5591 li
116.448 39.999 116.262 39.4272 115.855 39.0308 cv
111.405 34.6929 li
110.38 33.6938 110.946 31.9531 112.362 31.7476 cv
118.512 30.854 li
119.075 30.772 119.561 30.4189 119.813 29.9092 cv
122.563 24.3364 li
123.196 23.0532 125.026 23.0532 125.66 24.3364 cv
cp
.929412 .592157 0 rgb
f
124.111 25.6831 mo
121.599 32.6089 li
114.574 32.6089 li
124.111 25.6831 li
cp
1 .760784 .2 rgb
f
124.111 25.6831 mo
124.109 26.0088 124.082 26.3257 124.052 26.6411 cv
124.024 26.9575 123.979 27.2676 123.934 27.5781 cv
123.839 28.1968 123.714 28.8047 123.573 29.4063 cv
123.289 30.6094 122.928 31.7847 122.502 32.9365 cv
122.267 33.5723 li
121.599 33.5693 li
120.428 33.5645 119.257 33.4966 118.086 33.356 cv
117.501 33.2817 116.916 33.1914 116.33 33.0728 cv
116.037 33.0117 115.745 32.9497 115.452 32.8701 cv
115.159 32.7939 114.867 32.7134 114.574 32.6089 cv
114.867 32.5044 115.159 32.4238 115.452 32.3477 cv
115.745 32.2681 116.037 32.2061 116.33 32.145 cv
116.916 32.0259 117.501 31.936 118.086 31.8618 cv
119.257 31.7207 120.428 31.6533 121.599 31.6484 cv
120.696 32.2813 li
121.107 31.1245 121.584 29.9912 122.137 28.8853 cv
122.414 28.333 122.708 27.7866 123.032 27.251 cv
123.197 26.9839 123.361 26.7173 123.542 26.4561 cv
123.722 26.1948 123.904 25.9341 124.111 25.6831 cv
cp
1 .937255 .580392 rgb
f
155.44 24.3364 mo
158.191 29.9092 li
158.442 30.4189 158.929 30.772 159.491 30.854 cv
165.641 31.7476 li
167.058 31.9531 167.623 33.6938 166.598 34.6929 cv
162.148 39.0308 li
161.741 39.4272 161.555 39.999 161.651 40.5591 cv
162.702 46.6841 li
162.944 48.0947 161.463 49.1704 160.196 48.5044 cv
154.696 45.6128 li
154.192 45.3481 153.592 45.3481 153.088 45.6128 cv
147.588 48.5044 li
146.321 49.1704 144.84 48.0947 145.083 46.6841 cv
146.133 40.5591 li
146.229 39.999 146.043 39.4272 145.636 39.0308 cv
141.186 34.6929 li
140.161 33.6938 140.727 31.9531 142.143 31.7476 cv
148.293 30.854 li
148.855 30.772 149.342 30.4189 149.593 29.9092 cv
152.344 24.3364 li
152.977 23.0532 154.807 23.0532 155.44 24.3364 cv
cp
.929412 .592157 0 rgb
f
155.44 22.8926 mo
158.191 28.4653 li
158.442 28.9751 158.929 29.3281 159.491 29.4102 cv
165.641 30.3037 li
167.058 30.5093 167.623 32.25 166.598 33.249 cv
162.148 37.5869 li
161.741 37.9834 161.555 38.5552 161.651 39.1152 cv
162.702 45.2407 li
162.944 46.6509 161.463 47.7266 160.196 47.0605 cv
154.696 44.1689 li
154.192 43.9043 153.592 43.9043 153.088 44.1689 cv
147.588 47.0605 li
146.321 47.7266 144.84 46.6509 145.083 45.2407 cv
146.133 39.1152 li
146.229 38.5552 146.043 37.9834 145.636 37.5869 cv
141.186 33.249 li
140.161 32.25 140.727 30.5093 142.143 30.3037 cv
148.293 29.4102 li
148.855 29.3281 149.342 28.9751 149.593 28.4653 cv
152.344 22.8926 li
152.977 21.6094 154.807 21.6094 155.44 22.8926 cv
cp
1 .760784 .2 rgb
f
153.892 25.6831 mo
153.89 26.0088 153.863 26.3257 153.833 26.6411 cv
153.805 26.9575 153.76 27.2676 153.715 27.5781 cv
153.62 28.1968 153.496 28.8047 153.354 29.4063 cv
153.069 30.6094 152.708 31.7847 152.283 32.9365 cv
152.048 33.5723 li
151.38 33.5693 li
150.209 33.5645 149.038 33.4966 147.867 33.356 cv
147.282 33.2817 146.696 33.1914 146.111 33.0728 cv
145.818 33.0117 145.525 32.9497 145.233 32.8701 cv
144.94 32.7939 144.647 32.7134 144.354 32.6089 cv
144.647 32.5044 144.94 32.4238 145.233 32.3477 cv
145.525 32.2681 145.818 32.2061 146.111 32.145 cv
146.696 32.0259 147.282 31.936 147.867 31.8618 cv
149.038 31.7207 150.209 31.6533 151.38 31.6484 cv
150.477 32.2813 li
150.889 31.1245 151.365 29.9912 151.918 28.8853 cv
152.195 28.333 152.489 27.7866 152.813 27.251 cv
152.978 26.9839 153.142 26.7173 153.323 26.4561 cv
153.502 26.1948 153.685 25.9341 153.892 25.6831 cv
cp
1 .937255 .580392 rgb
f
129.71 29.4102 mo
129.147 29.3281 128.662 28.9751 128.41 28.4653 cv
125.66 22.8926 li
125.026 21.6089 123.196 21.6089 122.563 22.8926 cv
119.813 28.4653 li
119.561 28.9751 119.075 29.3281 118.512 29.4102 cv
112.362 30.3037 li
110.946 30.5093 110.38 32.25 111.405 33.249 cv
115.855 37.5869 li
116.262 37.9834 116.448 38.5552 116.352 39.1152 cv
115.301 45.2407 li
115.3 45.2476 115.301 45.2544 115.299 45.2612 cv
130.968 29.5928 li
129.71 29.4102 li
cp
f
135.86 30.3037 mo
130.968 29.5928 li
115.299 45.2612 li
115.076 46.6616 116.546 47.7236 117.807 47.0605 cv
123.308 44.1689 li
123.811 43.9043 124.412 43.9043 124.915 44.1689 cv
130.416 47.0605 li
131.682 47.7266 133.163 46.6509 132.921 45.2407 cv
131.87 39.1152 li
131.774 38.5552 131.96 37.9834 132.367 37.5869 cv
136.817 33.249 li
137.842 32.25 137.276 30.5093 135.86 30.3037 cv
cp
1 .760784 .2 rgb
f
369.825 84.8643 mo
357.211 84.8643 346.949 74.6025 346.949 61.9888 cv
346.949 61.2026 li
346.949 48.5889 357.211 38.3276 369.825 38.3276 cv
406.094 38.3276 li
418.708 38.3276 428.969 48.5889 428.969 61.2026 cv
428.969 61.9888 li
428.969 74.6025 418.708 84.8643 406.094 84.8643 cv
369.825 84.8643 li
cp
.0235294 .376471 .333333 rgb
f
406.094 41.6157 mo
369.825 41.6157 li
359.007 41.6157 350.238 50.3853 350.238 61.2026 cv
350.238 61.9893 li
350.238 72.8071 359.007 81.5762 369.825 81.5762 cv
406.094 81.5762 li
416.912 81.5762 425.682 72.8071 425.682 61.9893 cv
425.682 61.2026 li
425.682 50.3853 416.912 41.6157 406.094 41.6157 cv
cp
.160784 .611765 .568627 rgb
f
425.773 61.5962 mo
425.773 50.561 416.827 41.6157 405.793 41.6157 cv
394.758 41.6157 385.813 50.561 385.813 61.5962 cv
385.813 72.6309 394.758 81.5767 405.793 81.5767 cv
416.827 81.5767 425.773 72.6309 425.773 61.5962 cv
cp
1 .760784 .2 rgb
f
418.613 61.5962 mo
418.613 54.5151 412.873 48.7754 405.793 48.7754 cv
398.712 48.7754 392.972 54.5151 392.972 61.5962 cv
392.972 68.6768 398.712 74.4165 405.793 74.4165 cv
412.873 74.4165 418.613 68.6768 418.613 61.5962 cv
cp
1 .937255 .580392 rgb
f
397.524 61.5933 mo
397.524 62.4917 397.694 63.168 398.035 63.6226 cv
398.377 64.0776 398.886 64.3042 399.564 64.3042 cv
400.925 64.3042 401.604 63.4009 401.604 61.5933 cv
401.604 59.7822 400.928 58.8765 399.575 58.8765 cv
398.897 58.8765 398.386 59.105 398.041 59.561 cv
397.696 60.0176 397.524 60.6953 397.524 61.5933 cv
cp
403.392 61.5933 mo
403.392 62.9238 403.063 63.9473 402.402 64.6621 cv
401.742 65.377 400.797 65.7344 399.564 65.7344 cv
398.333 65.7344 397.387 65.377 396.727 64.6621 cv
396.066 63.9473 395.737 62.9204 395.737 61.582 cv
395.737 60.2441 396.067 59.2222 396.729 58.5161 cv
397.392 57.811 398.34 57.4575 399.575 57.4575 cv
400.812 57.4575 401.756 57.8135 402.41 58.5249 cv
403.064 59.2358 403.392 60.2593 403.392 61.5933 cv
cp
.160784 .611765 .568627 rgb
f
406.735 65.6245 mo
405.059 65.6245 li
405.059 57.5845 li
409.667 57.5845 li
409.667 58.981 li
406.735 58.981 li
406.735 61.0547 li
409.463 61.0547 li
409.463 62.4458 li
406.735 62.4458 li
406.735 65.6245 li
cp
f
412.917 65.6245 mo
411.24 65.6245 li
411.24 57.5845 li
415.849 57.5845 li
415.849 58.981 li
412.917 58.981 li
412.917 61.0547 li
415.645 61.0547 li
415.645 62.4458 li
412.917 62.4458 li
412.917 65.6245 li
cp
f
272.342 84.8643 mo
259.729 84.8643 249.467 74.6025 249.467 61.9888 cv
249.467 61.2026 li
249.467 48.5889 259.729 38.3276 272.342 38.3276 cv
308.611 38.3276 li
321.225 38.3276 331.486 48.5889 331.486 61.2026 cv
331.486 61.9888 li
331.486 74.6025 321.225 84.8643 308.611 84.8643 cv
272.342 84.8643 li
cp
.839216 .0941176 .184314 rgb
f
308.61 41.6157 mo
272.342 41.6157 li
261.524 41.6157 252.755 50.3853 252.755 61.2026 cv
252.755 61.9893 li
252.755 72.8071 261.524 81.5762 272.342 81.5762 cv
308.61 81.5762 li
319.429 81.5762 328.198 72.8071 328.198 61.9893 cv
328.198 61.2026 li
328.198 50.3853 319.429 41.6157 308.61 41.6157 cv
cp
1 .258824 .321569 rgb
f
292.716 61.5962 mo
292.716 50.561 283.77 41.6157 272.735 41.6157 cv
261.7 41.6157 252.755 50.561 252.755 61.5962 cv
252.755 72.6309 261.7 81.5767 272.735 81.5767 cv
283.77 81.5767 292.716 72.6309 292.716 61.5962 cv
cp
1 .760784 .2 rgb
f
285.556 61.5962 mo
285.556 54.5151 279.815 48.7754 272.735 48.7754 cv
265.654 48.7754 259.914 54.5151 259.914 61.5962 cv
259.914 68.6768 265.654 74.4165 272.735 74.4165 cv
279.815 74.4165 285.556 68.6768 285.556 61.5962 cv
cp
1 .937255 .580392 rgb
f
266.295 61.5933 mo
266.295 62.4917 266.466 63.168 266.807 63.6226 cv
267.147 64.0776 267.657 64.3042 268.336 64.3042 cv
269.695 64.3042 270.376 63.4009 270.376 61.5933 cv
270.376 59.7822 269.699 58.8765 268.347 58.8765 cv
267.669 58.8765 267.156 59.105 266.813 59.561 cv
266.468 60.0176 266.295 60.6953 266.295 61.5933 cv
cp
272.163 61.5933 mo
272.163 62.9238 271.833 63.9473 271.173 64.6621 cv
270.514 65.377 269.567 65.7344 268.336 65.7344 cv
267.104 65.7344 266.158 65.377 265.498 64.6621 cv
264.838 63.9473 264.508 62.9204 264.508 61.582 cv
264.508 60.2441 264.839 59.2222 265.501 58.5161 cv
266.162 57.811 267.111 57.4575 268.347 57.4575 cv
269.582 57.4575 270.527 57.8135 271.182 58.5249 cv
271.836 59.2358 272.163 60.2593 272.163 61.5933 cv
cp
.160784 .611765 .568627 rgb
f
280.962 65.6245 mo
278.795 65.6245 li
275.298 59.542 li
275.248 59.542 li
275.318 60.6162 275.353 61.3823 275.353 61.8408 cv
275.353 65.6245 li
273.83 65.6245 li
273.83 57.5845 li
275.979 57.5845 li
279.472 63.606 li
279.511 63.606 li
279.455 62.561 279.428 61.8223 279.428 61.3901 cv
279.428 57.5845 li
280.962 57.5845 li
280.962 65.6245 li
cp
f
257.712 356.013 mo
257.712 338.972 243.897 325.157 226.856 325.157 cv
209.815 325.157 196 338.972 196 356.013 cv
196 373.054 209.815 386.869 226.856 386.869 cv
243.897 386.869 257.712 373.054 257.712 356.013 cv
cp
1 .760784 .2 rgb
f
253.111 356.013 mo
253.111 341.513 241.356 329.758 226.856 329.758 cv
212.356 329.758 200.602 341.513 200.602 356.013 cv
200.602 370.513 212.356 382.268 226.856 382.268 cv
241.356 382.268 253.111 370.513 253.111 356.013 cv
cp
1 .937255 .580392 rgb
f
245.157 425.608 mo
208.556 425.608 li
200.186 425.608 193.4 418.823 193.4 410.452 cv
193.4 410.146 li
193.4 401.776 200.186 394.991 208.556 394.991 cv
245.157 394.991 li
253.527 394.991 260.313 401.776 260.313 410.146 cv
260.313 410.452 li
260.313 418.823 253.527 425.608 245.157 425.608 cv
cp
.160784 .611765 .568627 rgb
f
250.397 410.3 mo
250.397 403.71 245.056 398.369 238.467 398.369 cv
231.878 398.369 226.536 403.71 226.536 410.3 cv
226.536 416.889 231.878 422.23 238.467 422.23 cv
245.056 422.23 250.397 416.889 250.397 410.3 cv
cp
1 .760784 .2 rgb
f
246.122 410.3 mo
246.122 406.071 242.694 402.645 238.467 402.645 cv
234.238 402.645 230.812 406.071 230.812 410.3 cv
230.812 414.527 234.238 417.955 238.467 417.955 cv
242.694 417.955 246.122 414.527 246.122 410.3 cv
cp
1 .937255 .580392 rgb
f
239.888 412.247 mo
239.888 412.049 239.808 411.882 239.647 411.745 cv
239.487 411.608 239.247 411.467 238.926 411.32 cv
238.926 413.081 li
239.566 412.973 239.888 412.694 239.888 412.247 cv
cp
237.046 407.956 mo
237.046 408.163 237.117 408.334 237.262 408.469 cv
237.405 408.603 237.638 408.741 237.958 408.882 cv
237.958 407.221 li
237.35 407.311 237.046 407.556 237.046 407.956 cv
cp
242.015 412.141 mo
242.015 412.89 241.744 413.492 241.202 413.947 cv
240.66 414.402 239.901 414.674 238.926 414.764 cv
238.926 416.213 li
237.958 416.213 li
237.958 414.792 li
236.808 414.768 235.799 414.565 234.933 414.184 cv
234.933 412.317 li
235.342 412.521 235.836 412.699 236.413 412.854 cv
236.99 413.01 237.505 413.103 237.958 413.13 cv
237.958 410.939 li
237.484 410.756 li
236.551 410.388 235.89 409.988 235.501 409.558 cv
235.112 409.126 234.918 408.593 234.918 407.956 cv
234.918 407.272 235.186 406.711 235.721 406.271 cv
236.255 405.829 237.001 405.563 237.958 405.468 cv
237.958 404.387 li
238.926 404.387 li
238.926 405.439 li
240.005 405.486 240.98 405.703 241.853 406.09 cv
241.188 407.744 li
240.453 407.442 239.699 407.259 238.926 407.192 cv
238.926 409.277 li
239.845 409.632 240.499 409.938 240.888 410.196 cv
241.276 410.456 241.562 410.741 241.743 411.053 cv
241.925 411.363 242.015 411.726 242.015 412.141 cv
cp
.160784 .611765 .568627 rgb
f
212.57 415.14 mo
204.003 415.14 li
204.003 413.337 li
207.08 410.228 li
207.991 409.294 208.586 408.647 208.865 408.287 cv
209.145 407.926 209.346 407.593 209.469 407.285 cv
209.592 406.978 209.653 406.659 209.653 406.329 cv
209.653 405.838 209.518 405.472 209.247 405.231 cv
208.976 404.991 208.614 404.871 208.161 404.871 cv
207.686 404.871 207.225 404.979 206.778 405.197 cv
206.331 405.416 205.864 405.726 205.378 406.128 cv
203.97 404.46 li
204.573 403.946 205.073 403.583 205.47 403.37 cv
205.867 403.158 206.3 402.994 206.77 402.88 cv
207.239 402.766 207.764 402.708 208.346 402.708 cv
209.111 402.708 209.788 402.848 210.374 403.127 cv
210.961 403.406 211.417 403.798 211.741 404.301 cv
212.064 404.804 212.227 405.379 212.227 406.027 cv
212.227 406.592 212.127 407.121 211.929 407.616 cv
211.731 408.11 211.423 408.618 211.007 409.138 cv
210.591 409.657 209.857 410.397 208.807 411.359 cv
207.23 412.843 li
207.23 412.96 li
212.57 412.96 li
212.57 415.14 li
cp
1 .937255 .580392 rgb
f
218.262 407.311 mo
219.447 407.311 220.39 407.643 221.091 408.308 cv
221.793 408.973 222.144 409.884 222.144 411.04 cv
222.144 412.41 221.722 413.463 220.878 414.201 cv
220.034 414.938 218.827 415.308 217.256 415.308 cv
215.893 415.308 214.792 415.087 213.954 414.646 cv
213.954 412.407 li
214.395 412.642 214.909 412.833 215.496 412.981 cv
216.083 413.129 216.639 413.203 217.164 413.203 cv
218.746 413.203 219.537 412.555 219.537 411.259 cv
219.537 410.023 218.718 409.406 217.08 409.406 cv
216.784 409.406 216.457 409.436 216.1 409.494 cv
215.742 409.553 215.451 409.615 215.228 409.683 cv
214.197 409.129 li
214.658 402.884 li
221.305 402.884 li
221.305 405.08 li
216.929 405.08 li
216.703 407.486 li
216.997 407.428 li
217.337 407.35 217.759 407.311 218.262 407.311 cv
cp
f
239.195 364.344 mo
241.088 365.625 li
241.088 346.389 li
239.195 347.67 li
239.195 364.344 li
cp
1 .639216 .639216 rgb
f
218.541 368.323 mo
217.259 370.217 li
236.492 370.217 li
235.212 368.323 li
218.541 368.323 li
cp
f
235.213 343.688 mo
236.494 341.795 li
217.258 341.795 li
218.54 343.688 li
235.213 343.688 li
cp
f
214.56 347.672 mo
212.666 346.391 li
212.666 365.624 li
214.56 364.342 li
214.56 347.672 li
cp
f
220.284 365.747 mo
218.541 368.323 li
235.212 368.323 li
233.468 365.747 li
220.284 365.747 li
cp
1 .258824 .321569 rgb
f
217.136 349.415 mo
214.56 347.672 li
214.56 364.342 li
217.136 362.599 li
217.136 349.415 li
cp
.909804 .254902 .313726 rgb
f
236.618 362.601 mo
239.195 364.344 li
239.195 347.67 li
236.618 349.414 li
236.618 362.601 li
cp
f
220.283 346.265 mo
233.47 346.265 li
235.213 343.688 li
218.54 343.688 li
220.283 346.265 li
cp
f
233.47 346.265 mo
220.283 346.265 li
226.876 356.007 li
233.47 346.265 li
cp
1 .639216 .639216 rgb
f
220.284 365.747 mo
233.468 365.747 li
226.876 356.007 li
220.284 365.747 li
cp
.909804 .254902 .313726 rgb
f
236.618 362.601 mo
236.618 349.414 li
226.876 356.007 li
236.618 362.601 li
cp
1 .639216 .639216 rgb
f
217.136 349.415 mo
217.136 362.599 li
226.876 356.007 li
217.136 349.415 li
cp
f
233.837 346.265 mo
236.618 349.047 li
236.618 349.414 li
239.195 347.67 li
239.195 347.206 li
235.677 343.688 li
235.213 343.688 li
233.47 346.265 li
233.837 346.265 li
cp
.988235 .905882 .545098 rgb
f
236.618 349.414 mo
236.618 349.047 li
233.837 346.265 li
233.47 346.265 li
226.876 356.007 li
236.618 349.414 li
cp
f
217.136 349.047 mo
217.136 349.047 219.209 346.973 219.917 346.265 cv
220.283 346.265 li
218.54 343.688 li
218.077 343.688 li
217.181 344.584 214.56 347.206 214.56 347.206 cv
214.56 347.672 li
217.136 349.415 li
217.136 349.047 li
cp
f
217.136 349.047 mo
217.136 349.415 li
226.876 356.007 li
220.283 346.265 li
219.917 346.265 li
219.209 346.973 217.136 349.047 217.136 349.047 cv
cp
f
236.618 362.966 mo
235.91 363.675 233.837 365.747 233.837 365.747 cv
233.468 365.747 li
235.212 368.323 li
235.677 368.323 li
235.677 368.323 238.299 365.702 239.195 364.806 cv
239.195 364.344 li
236.618 362.601 li
236.618 362.966 li
cp
f
233.468 365.747 mo
233.837 365.747 li
233.837 365.747 235.91 363.675 236.618 362.966 cv
236.618 362.601 li
226.876 356.007 li
233.468 365.747 li
cp
f
219.917 365.747 mo
218.887 364.718 218.166 363.996 217.136 362.966 cv
217.136 362.599 li
214.56 364.342 li
214.56 364.807 li
215.862 366.109 216.773 367.021 218.077 368.323 cv
218.541 368.323 li
220.284 365.747 li
219.917 365.747 li
cp
f
217.136 362.599 mo
217.136 362.966 li
218.166 363.996 218.887 364.718 219.917 365.747 cv
220.284 365.747 li
226.876 356.007 li
217.136 362.599 li
cp
f
239.142 347.706 mo
235.178 343.741 li
233.426 346.33 li
236.553 349.458 li
239.142 347.706 li
cp
1 .639216 .639216 rgb
f
233.426 346.33 mo
226.876 356.007 li
236.553 349.458 li
233.426 346.33 li
cp
1 .411765 .411765 rgb
f
241.041 346.421 mo
236.463 341.842 li
235.178 343.741 li
239.142 347.706 li
241.041 346.421 li
cp
1 .258824 .321569 rgb
f
218.546 343.699 mo
214.568 347.678 li
217.157 349.43 li
220.298 346.288 li
218.546 343.699 li
cp
1 .639216 .639216 rgb
f
217.157 349.43 mo
226.876 356.007 li
220.298 346.288 li
217.157 349.43 li
cp
1 .411765 .411765 rgb
f
217.261 341.8 mo
212.669 346.393 li
214.568 347.678 li
218.546 343.699 li
217.261 341.8 li
cp
f
239.183 364.336 mo
235.205 368.314 li
236.492 370.217 li
241.086 365.624 li
239.183 364.336 li
cp
1 .258824 .321569 rgb
f
226.876 356.007 mo
233.471 365.752 li
236.621 362.603 li
226.876 356.007 li
cp
1 .639216 .639216 rgb
f
236.621 362.603 mo
233.471 365.752 li
235.205 368.314 li
239.183 364.336 li
236.621 362.603 li
cp
.909804 .254902 .313726 rgb
f
212.624 365.652 mo
217.231 370.259 li
218.519 368.356 li
214.527 364.364 li
212.624 365.652 li
cp
1 .411765 .411765 rgb
f
220.253 365.794 mo
226.876 356.007 li
217.09 362.63 li
220.253 365.794 li
cp
.909804 .254902 .313726 rgb
f
214.527 364.364 mo
218.519 368.356 li
220.253 365.794 li
217.09 362.63 li
214.527 364.364 li
cp
1 .639216 .639216 rgb
f
234.729 350.699 mo
233.735 349.705 233.178 349.148 232.185 348.154 cv
221.57 348.154 li
220.576 349.148 220.02 349.705 219.025 350.699 cv
219.025 359.779 li
234.729 353.916 li
234.729 350.699 li
cp
.909804 .254902 .313726 rgb
f
219.025 359.779 mo
219.025 361.313 li
220.02 362.307 220.576 362.864 221.57 363.857 cv
232.185 363.857 li
233.178 362.864 233.735 362.307 234.729 361.313 cv
234.729 353.916 li
219.025 359.779 li
cp
1 .411765 .411765 rgb
f
234.107 358.887 mo
232.443 356.799 li
234.531 358.463 li
236.618 356.799 li
234.954 358.887 li
236.618 360.974 li
234.531 359.31 li
232.443 360.974 li
234.107 358.887 li
cp
1 1 1 rgb
f
217.01 346.6 mo
215.346 344.512 li
217.434 346.176 li
219.521 344.512 li
217.856 346.6 li
219.521 348.688 li
217.434 347.023 li
215.346 348.688 li
217.01 346.6 li
cp
f
173.6 356.013 mo
173.6 338.972 159.785 325.157 142.744 325.157 cv
125.703 325.157 111.888 338.972 111.888 356.013 cv
111.888 373.054 125.703 386.869 142.744 386.869 cv
159.785 386.869 173.6 373.054 173.6 356.013 cv
cp
1 .760784 .2 rgb
f
168.999 356.013 mo
168.999 341.513 157.244 329.758 142.744 329.758 cv
128.244 329.758 116.489 341.513 116.489 356.013 cv
116.489 370.513 128.244 382.268 142.744 382.268 cv
157.244 382.268 168.999 370.513 168.999 356.013 cv
cp
1 .937255 .580392 rgb
f
161.044 425.608 mo
124.443 425.608 li
116.073 425.608 109.288 418.823 109.288 410.452 cv
109.288 410.146 li
109.288 401.776 116.073 394.991 124.443 394.991 cv
161.044 394.991 li
169.415 394.991 176.2 401.776 176.2 410.146 cv
176.2 410.452 li
176.2 418.823 169.415 425.608 161.044 425.608 cv
cp
.160784 .611765 .568627 rgb
f
166.285 410.3 mo
166.285 403.71 160.943 398.369 154.354 398.369 cv
147.765 398.369 142.424 403.71 142.424 410.3 cv
142.424 416.889 147.765 422.23 154.354 422.23 cv
160.943 422.23 166.285 416.889 166.285 410.3 cv
cp
1 .760784 .2 rgb
f
162.01 410.3 mo
162.01 406.071 158.583 402.645 154.354 402.645 cv
150.126 402.645 146.699 406.071 146.699 410.3 cv
146.699 414.527 150.126 417.955 154.354 417.955 cv
158.583 417.955 162.01 414.527 162.01 410.3 cv
cp
1 .937255 .580392 rgb
f
155.775 412.247 mo
155.775 412.049 155.695 411.882 155.535 411.745 cv
155.375 411.608 155.134 411.467 154.814 411.32 cv
154.814 413.081 li
155.455 412.973 155.775 412.694 155.775 412.247 cv
cp
152.934 407.956 mo
152.934 408.163 153.005 408.334 153.149 408.469 cv
153.293 408.603 153.525 408.741 153.845 408.882 cv
153.845 407.221 li
153.237 407.311 152.934 407.556 152.934 407.956 cv
cp
157.903 412.141 mo
157.903 412.89 157.632 413.492 157.09 413.947 cv
156.548 414.402 155.79 414.674 154.814 414.764 cv
154.814 416.213 li
153.845 416.213 li
153.845 414.792 li
152.695 414.768 151.687 414.565 150.82 414.184 cv
150.82 412.317 li
151.23 412.521 151.724 412.699 152.301 412.854 cv
152.878 413.01 153.393 413.103 153.845 413.13 cv
153.845 410.939 li
153.372 410.756 li
152.438 410.388 151.778 409.988 151.389 409.558 cv
151 409.126 150.806 408.593 150.806 407.956 cv
150.806 407.272 151.073 406.711 151.608 406.271 cv
152.143 405.829 152.889 405.563 153.845 405.468 cv
153.845 404.387 li
154.814 404.387 li
154.814 405.439 li
155.893 405.486 156.869 405.703 157.74 406.09 cv
157.076 407.744 li
156.341 407.442 155.587 407.259 154.814 407.192 cv
154.814 409.277 li
155.733 409.632 156.387 409.938 156.775 410.196 cv
157.165 410.456 157.449 410.741 157.631 411.053 cv
157.813 411.363 157.903 411.726 157.903 412.141 cv
cp
.160784 .611765 .568627 rgb
f
126.295 415.14 mo
123.705 415.14 li
123.705 408.048 li
123.73 406.883 li
123.772 405.608 li
123.341 406.039 123.042 406.321 122.875 406.455 cv
121.466 407.587 li
120.217 406.027 li
124.166 402.884 li
126.295 402.884 li
126.295 415.14 li
cp
1 .937255 .580392 rgb
f
132.196 409.012 mo
132.196 410.516 132.326 411.593 132.586 412.243 cv
132.846 412.895 133.283 413.22 133.898 413.22 cv
134.501 413.22 134.938 412.891 135.206 412.23 cv
135.474 411.571 135.608 410.498 135.608 409.012 cv
135.608 407.509 135.473 406.429 135.202 405.771 cv
134.93 405.115 134.496 404.787 133.898 404.787 cv
133.289 404.787 132.853 405.115 132.59 405.771 cv
132.328 406.429 132.196 407.509 132.196 409.012 cv
cp
138.19 409.012 mo
138.19 411.152 137.839 412.736 137.138 413.765 cv
136.437 414.793 135.356 415.308 133.898 415.308 cv
132.484 415.308 131.418 414.776 130.7 413.715 cv
129.982 412.653 129.623 411.085 129.623 409.012 cv
129.623 406.849 129.972 405.255 130.67 404.229 cv
131.369 403.204 132.445 402.691 133.898 402.691 cv
135.312 402.691 136.381 403.228 137.104 404.301 cv
137.828 405.374 138.19 406.944 138.19 409.012 cv
cp
f
142.447 340.339 mo
150.581 340.773 li
146.306 330.023 li
142.447 340.339 li
cp
.831373 .913725 .956863 rgb
f
137.389 336.103 mo
142.447 340.339 li
146.306 330.023 li
137.389 336.103 li
cp
.647059 .823529 .921569 rgb
f
146.306 330.023 mo
150.581 340.773 li
155.235 338.895 li
146.306 330.023 li
cp
.937255 .94902 .878431 rgb
f
155.235 338.895 mo
149.216 372.564 li
146.438 372.564 li
150.581 340.773 li
155.235 338.895 li
cp
.647059 .823529 .921569 rgb
f
142.447 340.339 mo
143.281 375.581 li
139.296 375.581 li
137.389 336.103 li
142.447 340.339 li
cp
.831373 .913725 .956863 rgb
f
150.581 340.773 mo
142.447 340.339 li
143.281 375.581 li
146.438 372.564 li
150.581 340.773 li
cp
.462745 .666667 .768627 rgb
f
161.373 360.266 mo
155.235 360.81 li
156.68 347.182 li
156.817 347.081 li
161.373 360.266 li
cp
.937255 .94902 .878431 rgb
f
156.68 347.182 mo
156.532 347.291 li
149.54 358.607 li
147.085 353.142 li
156.721 346.802 li
156.68 347.182 li
cp
.647059 .823529 .921569 rgb
f
155.235 360.81 mo
149.54 358.607 li
156.532 347.291 li
156.68 347.182 li
155.235 360.81 li
cp
.831373 .913725 .956863 rgb
f
150.581 376.403 mo
144.384 374.007 li
149.54 358.607 li
155.235 360.81 li
150.581 376.403 li
cp
.647059 .823529 .921569 rgb
f
161.373 360.266 mo
155.454 375.569 li
150.581 376.403 li
155.235 360.81 li
161.373 360.266 li
cp
.462745 .666667 .768627 rgb
f
140.995 370.777 mo
143.093 365.352 li
147.085 353.142 li
149.54 358.607 li
144.384 374.007 li
140.995 370.777 li
cp
.647059 .823529 .921569 rgb
f
142.158 366.529 mo
139.028 368.603 li
131.156 351.89 li
133.792 344.437 li
142.158 366.529 li
cp
.462745 .666667 .768627 rgb
f
139.028 368.603 mo
134.933 371.315 li
124.116 351.89 li
131.156 351.89 li
139.028 368.603 li
cp
.937255 .94902 .878431 rgb
f
133.792 344.437 mo
131.156 351.89 li
124.116 351.89 li
126.325 340.42 li
133.792 344.437 li
cp
.831373 .913725 .956863 rgb
f
148.38 366.283 mo
148.38 375.396 li
137.548 378.936 li
137.415 378.526 li
137.415 368.953 li
148.38 366.283 li
cp
.462745 .666667 .768627 rgb
f
142.198 354.409 mo
148.38 366.283 li
137.415 368.953 li
142.198 354.409 li
cp
.937255 .94902 .878431 rgb
f
142.198 354.409 mo
137.415 368.953 li
133.243 363.636 li
133.137 363.063 li
142.198 354.409 li
cp
.647059 .823529 .921569 rgb
f
137.415 368.953 mo
137.415 378.526 li
135.121 372.564 li
137.415 368.953 li
cp
f
137.415 368.953 mo
135.121 372.564 li
134.653 371.347 li
133.243 363.636 li
137.415 368.953 li
cp
f
141.863 340.773 mo
140.542 339.116 li
142.199 340.438 li
143.855 339.116 li
142.534 340.773 li
143.855 342.429 li
142.199 341.109 li
140.542 342.429 li
141.863 340.773 li
cp
1 1 1 rgb
f
147.063 348.157 mo
145.743 346.501 li
147.399 347.821 li
149.055 346.501 li
147.734 348.157 li
149.055 349.813 li
147.399 348.493 li
145.743 349.813 li
147.063 348.157 li
cp
f
131.661 349.177 mo
130.34 347.521 li
131.997 348.841 li
133.653 347.521 li
132.332 349.177 li
133.653 350.833 li
131.997 349.512 li
130.34 350.833 li
131.661 349.177 li
cp
f
149.125 357.96 mo
147.805 356.304 li
149.461 357.624 li
151.117 356.304 li
149.797 357.96 li
151.117 359.616 li
149.461 358.296 li
147.805 359.616 li
149.125 357.96 li
cp
f
138.692 363.636 mo
137.372 361.979 li
139.028 363.3 li
140.684 361.979 li
139.364 363.636 li
140.684 365.293 li
139.028 363.972 li
137.372 365.293 li
138.692 363.636 li
cp
f
425.937 356.013 mo
425.937 338.972 412.122 325.157 395.081 325.157 cv
378.039 325.157 364.225 338.972 364.225 356.013 cv
364.225 373.054 378.039 386.869 395.081 386.869 cv
412.122 386.869 425.937 373.054 425.937 356.013 cv
cp
1 .760784 .2 rgb
f
421.335 356.013 mo
421.335 341.513 409.581 329.758 395.081 329.758 cv
380.581 329.758 368.826 341.513 368.826 356.013 cv
368.826 370.513 380.581 382.268 395.081 382.268 cv
409.581 382.268 421.335 370.513 421.335 356.013 cv
cp
1 .937255 .580392 rgb
f
413.381 425.608 mo
376.78 425.608 li
368.41 425.608 361.625 418.823 361.625 410.452 cv
361.625 410.146 li
361.625 401.776 368.41 394.991 376.78 394.991 cv
413.381 394.991 li
421.752 394.991 428.537 401.776 428.537 410.146 cv
428.537 410.452 li
428.537 418.823 421.752 425.608 413.381 425.608 cv
cp
.160784 .611765 .568627 rgb
f
418.622 410.3 mo
418.622 403.71 413.28 398.369 406.691 398.369 cv
400.102 398.369 394.761 403.71 394.761 410.3 cv
394.761 416.889 400.102 422.23 406.691 422.23 cv
413.28 422.23 418.622 416.889 418.622 410.3 cv
cp
1 .760784 .2 rgb
f
414.347 410.3 mo
414.347 406.071 410.919 402.645 406.691 402.645 cv
402.463 402.645 399.036 406.071 399.036 410.3 cv
399.036 414.527 402.463 417.955 406.691 417.955 cv
410.919 417.955 414.347 414.527 414.347 410.3 cv
cp
1 .937255 .580392 rgb
f
408.112 412.247 mo
408.112 412.049 408.032 411.882 407.872 411.745 cv
407.711 411.608 407.471 411.467 407.15 411.32 cv
407.15 413.081 li
407.791 412.973 408.112 412.694 408.112 412.247 cv
cp
405.271 407.956 mo
405.271 408.163 405.342 408.334 405.485 408.469 cv
405.63 408.603 405.861 408.741 406.182 408.882 cv
406.182 407.221 li
405.574 407.311 405.271 407.556 405.271 407.956 cv
cp
410.239 412.141 mo
410.239 412.89 409.969 413.492 409.427 413.947 cv
408.885 414.402 408.126 414.674 407.15 414.764 cv
407.15 416.213 li
406.182 416.213 li
406.182 414.792 li
405.032 414.768 404.023 414.565 403.157 414.184 cv
403.157 412.317 li
403.566 412.521 404.061 412.699 404.638 412.854 cv
405.215 413.01 405.729 413.103 406.182 413.13 cv
406.182 410.939 li
405.708 410.756 li
404.775 410.388 404.114 409.988 403.726 409.558 cv
403.337 409.126 403.143 408.593 403.143 407.956 cv
403.143 407.272 403.41 406.711 403.944 406.271 cv
404.479 405.829 405.226 405.563 406.182 405.468 cv
406.182 404.387 li
407.15 404.387 li
407.15 405.439 li
408.229 405.486 409.205 405.703 410.077 406.09 cv
409.413 407.744 li
408.678 407.442 407.924 407.259 407.15 407.192 cv
407.15 409.277 li
408.069 409.632 408.724 409.938 409.112 410.196 cv
409.501 410.456 409.786 410.741 409.968 411.053 cv
410.149 411.363 410.239 411.726 410.239 412.141 cv
cp
.160784 .611765 .568627 rgb
f
378.632 415.14 mo
376.042 415.14 li
376.042 408.048 li
376.066 406.883 li
376.108 405.608 li
375.679 406.039 375.379 406.321 375.212 406.455 cv
373.804 407.587 li
372.555 406.027 li
376.503 402.884 li
378.632 402.884 li
378.632 415.14 li
cp
1 .937255 .580392 rgb
f
384.534 409.012 mo
384.534 410.516 384.664 411.593 384.924 412.243 cv
385.184 412.895 385.62 413.22 386.235 413.22 cv
386.839 413.22 387.274 412.891 387.543 412.23 cv
387.812 411.571 387.945 410.498 387.945 409.012 cv
387.945 407.509 387.81 406.429 387.539 405.771 cv
387.268 405.115 386.833 404.787 386.235 404.787 cv
385.626 404.787 385.19 405.115 384.928 405.771 cv
384.665 406.429 384.534 407.509 384.534 409.012 cv
cp
390.527 409.012 mo
390.527 411.152 390.177 412.736 389.476 413.765 cv
388.774 414.793 387.694 415.308 386.235 415.308 cv
384.821 415.308 383.756 414.776 383.037 413.715 cv
382.319 412.653 381.96 411.085 381.96 409.012 cv
381.96 406.849 382.31 405.255 383.008 404.229 cv
383.707 403.204 384.782 402.691 386.235 402.691 cv
387.649 402.691 388.718 403.228 389.441 404.301 cv
390.165 405.374 390.527 406.944 390.527 409.012 cv
cp
f
409.303 361.562 mo
409.303 369.072 403.214 375.161 395.703 375.161 cv
395.565 375.161 li
394.459 375.161 li
386.947 375.161 380.859 369.072 380.859 361.562 cv
380.859 340.334 li
409.303 340.334 li
409.303 361.562 li
cp
.462745 .666667 .768627 rgb
f
385.163 344.639 mo
385.163 361.563 li
385.163 366.688 389.333 370.856 394.459 370.856 cv
395.703 370.856 li
400.828 370.856 404.998 366.688 404.998 361.563 cv
404.998 344.639 li
385.163 344.639 li
cp
395.703 371.639 mo
394.459 371.639 li
388.901 371.639 384.381 367.119 384.381 361.563 cv
384.381 343.855 li
405.78 343.855 li
405.78 361.563 li
405.78 367.119 401.26 371.639 395.703 371.639 cv
cp
.647059 .823529 .921569 rgb
f
386.401 342.291 mo
386.401 342.579 386.172 342.813 385.891 342.813 cv
385.608 342.813 385.38 342.579 385.38 342.291 cv
385.38 342.003 385.608 341.77 385.891 341.77 cv
386.172 341.77 386.401 342.003 386.401 342.291 cv
cp
f
389.465 342.291 mo
389.465 342.579 389.236 342.813 388.954 342.813 cv
388.672 342.813 388.443 342.579 388.443 342.291 cv
388.443 342.003 388.672 341.77 388.954 341.77 cv
389.236 341.77 389.465 342.003 389.465 342.291 cv
cp
f
392.528 342.291 mo
392.528 342.579 392.299 342.813 392.018 342.813 cv
391.735 342.813 391.507 342.579 391.507 342.291 cv
391.507 342.003 391.735 341.77 392.018 341.77 cv
392.299 341.77 392.528 342.003 392.528 342.291 cv
cp
f
395.592 342.291 mo
395.592 342.579 395.363 342.813 395.081 342.813 cv
394.799 342.813 394.57 342.579 394.57 342.291 cv
394.57 342.003 394.799 341.77 395.081 341.77 cv
395.363 341.77 395.592 342.003 395.592 342.291 cv
cp
f
398.654 342.291 mo
398.654 342.579 398.426 342.813 398.145 342.813 cv
397.862 342.813 397.634 342.579 397.634 342.291 cv
397.634 342.003 397.862 341.77 398.145 341.77 cv
398.426 341.77 398.654 342.003 398.654 342.291 cv
cp
f
401.719 342.291 mo
401.719 342.579 401.49 342.813 401.208 342.813 cv
400.926 342.813 400.697 342.579 400.697 342.291 cv
400.697 342.003 400.926 341.77 401.208 341.77 cv
401.49 341.77 401.719 342.003 401.719 342.291 cv
cp
f
404.781 342.291 mo
404.781 342.579 404.553 342.813 404.271 342.813 cv
403.989 342.813 403.761 342.579 403.761 342.291 cv
403.761 342.003 403.989 341.77 404.271 341.77 cv
404.553 341.77 404.781 342.003 404.781 342.291 cv
cp
f
407.346 345.994 mo
407.058 345.994 406.824 345.757 406.824 345.464 cv
406.824 345.171 407.058 344.934 407.346 344.934 cv
407.634 344.934 407.867 345.171 407.867 345.464 cv
407.867 345.757 407.634 345.994 407.346 345.994 cv
cp
f
407.346 349.177 mo
407.058 349.177 406.824 348.938 406.824 348.646 cv
406.824 348.354 407.058 348.116 407.346 348.116 cv
407.634 348.116 407.867 348.354 407.867 348.646 cv
407.867 348.938 407.634 349.177 407.346 349.177 cv
cp
f
407.346 352.357 mo
407.058 352.357 406.824 352.12 406.824 351.827 cv
406.824 351.534 407.058 351.297 407.346 351.297 cv
407.634 351.297 407.867 351.534 407.867 351.827 cv
407.867 352.12 407.634 352.357 407.346 352.357 cv
cp
f
407.346 355.54 mo
407.058 355.54 406.824 355.303 406.824 355.01 cv
406.824 354.717 407.058 354.479 407.346 354.479 cv
407.634 354.479 407.867 354.717 407.867 355.01 cv
407.867 355.303 407.634 355.54 407.346 355.54 cv
cp
f
407.346 358.722 mo
407.058 358.722 406.824 358.484 406.824 358.19 cv
406.824 357.898 407.058 357.66 407.346 357.66 cv
407.634 357.66 407.867 357.898 407.867 358.19 cv
407.867 358.484 407.634 358.722 407.346 358.722 cv
cp
f
407.328 361.902 mo
407.036 361.888 406.828 361.668 406.824 361.373 cv
406.824 361.08 407.058 360.843 407.346 360.843 cv
407.634 360.843 407.867 361.08 407.867 361.373 cv
407.872 361.664 407.612 361.917 407.328 361.902 cv
cp
f
406.817 365.032 mo
406.545 364.945 406.377 364.655 406.446 364.387 cv
406.515 364.118 406.801 363.948 407.083 364.006 cv
407.365 364.063 407.532 364.354 407.455 364.652 cv
407.377 364.951 407.094 365.122 406.817 365.032 cv
cp
f
405.457 367.898 mo
405.217 367.739 405.139 367.418 405.283 367.181 cv
405.433 366.947 405.746 366.856 405.997 366.986 cv
406.258 367.122 406.348 367.449 406.183 367.71 cv
406.022 367.974 405.697 368.058 405.457 367.898 cv
cp
f
403.379 370.293 mo
403.19 370.075 403.204 369.747 403.409 369.561 cv
403.623 369.383 403.927 369.356 404.143 369.559 cv
404.348 369.749 404.369 370.112 404.134 370.312 cv
403.905 370.52 403.567 370.511 403.379 370.293 cv
cp
f
400.737 372.044 mo
400.614 371.783 400.717 371.474 400.967 371.354 cv
401.207 371.216 401.519 371.294 401.67 371.541 cv
401.819 371.785 401.729 372.119 401.463 372.272 cv
401.186 372.407 400.86 372.305 400.737 372.044 cv
cp
f
397.721 373.018 mo
397.672 372.725 397.861 372.489 398.127 372.408 cv
398.396 372.339 398.677 372.508 398.755 372.785 cv
398.833 373.063 398.654 373.35 398.355 373.427 cv
398.059 373.514 397.767 373.293 397.721 373.018 cv
cp
f
394.551 373.204 mo
394.551 372.916 394.788 372.683 395.081 372.683 cv
395.374 372.683 395.611 372.916 395.611 373.204 cv
395.611 373.492 395.374 373.727 395.081 373.727 cv
394.788 373.727 394.551 373.492 394.551 373.204 cv
cp
f
391.407 372.785 mo
391.485 372.508 391.766 372.339 392.034 372.408 cv
392.3 372.489 392.49 372.725 392.44 373.018 cv
392.395 373.293 392.104 373.514 391.807 373.427 cv
391.508 373.35 391.329 373.063 391.407 372.785 cv
cp
f
388.492 371.541 mo
388.644 371.294 388.955 371.216 389.194 371.354 cv
389.444 371.474 389.548 371.783 389.425 372.044 cv
389.302 372.305 388.977 372.407 388.699 372.272 cv
388.432 372.119 388.343 371.785 388.492 371.541 cv
cp
f
386.019 369.559 mo
386.235 369.356 386.539 369.383 386.752 369.561 cv
386.958 369.747 386.971 370.075 386.782 370.293 cv
386.594 370.511 386.256 370.52 386.028 370.312 cv
385.792 370.112 385.813 369.749 386.019 369.559 cv
cp
f
384.165 366.986 mo
384.415 366.856 384.729 366.947 384.879 367.181 cv
385.022 367.418 384.944 367.739 384.704 367.898 cv
384.465 368.058 384.14 367.974 383.979 367.71 cv
383.814 367.449 383.903 367.122 384.165 366.986 cv
cp
f
383.079 364.006 mo
383.361 363.948 383.646 364.118 383.716 364.387 cv
383.785 364.655 383.616 364.945 383.345 365.032 cv
383.068 365.122 382.784 364.951 382.706 364.652 cv
382.63 364.354 382.797 364.063 383.079 364.006 cv
cp
f
382.815 360.843 mo
383.104 360.843 383.338 361.08 383.338 361.373 cv
383.333 361.668 383.125 361.888 382.833 361.902 cv
382.549 361.917 382.29 361.664 382.294 361.373 cv
382.294 361.08 382.527 360.843 382.815 360.843 cv
cp
f
382.815 357.66 mo
383.104 357.66 383.338 357.898 383.338 358.19 cv
383.338 358.484 383.104 358.722 382.815 358.722 cv
382.527 358.722 382.294 358.484 382.294 358.19 cv
382.294 357.898 382.527 357.66 382.815 357.66 cv
cp
f
382.815 354.479 mo
383.104 354.479 383.338 354.717 383.338 355.01 cv
383.338 355.303 383.104 355.54 382.815 355.54 cv
382.527 355.54 382.294 355.303 382.294 355.01 cv
382.294 354.717 382.527 354.479 382.815 354.479 cv
cp
f
382.815 351.297 mo
383.104 351.297 383.338 351.534 383.338 351.827 cv
383.338 352.12 383.104 352.357 382.815 352.357 cv
382.527 352.357 382.294 352.12 382.294 351.827 cv
382.294 351.534 382.527 351.297 382.815 351.297 cv
cp
f
382.815 348.116 mo
383.104 348.116 383.338 348.354 383.338 348.646 cv
383.338 348.938 383.104 349.177 382.815 349.177 cv
382.527 349.177 382.294 348.938 382.294 348.646 cv
382.294 348.354 382.527 348.116 382.815 348.116 cv
cp
f
382.815 344.934 mo
383.104 344.934 383.338 345.171 383.338 345.464 cv
383.338 345.757 383.104 345.994 382.815 345.994 cv
382.527 345.994 382.294 345.757 382.294 345.464 cv
382.294 345.171 382.527 344.934 382.815 344.934 cv
cp
f
406.824 342.813 mo
407.867 341.77 li
406.824 341.77 li
406.824 342.813 li
cp
f
gsave
406.824 342.813 mo
407.867 341.77 li
406.824 341.77 li
406.824 342.813 li
cp
clp
407.867 342.291 mo
407.865 342.345 li
407.856 342.396 li
407.844 342.446 li
407.826 342.494 li
407.805 342.539 li
407.778 342.582 li
407.748 342.623 li
407.715 342.66 li
407.678 342.693 li
407.638 342.724 li
407.595 342.75 li
407.549 342.771 li
407.501 342.789 li
407.451 342.803 li
407.399 342.81 li
407.346 342.813 li
407.293 342.81 li
407.24 342.803 li
407.19 342.789 li
407.143 342.771 li
407.097 342.75 li
407.054 342.724 li
407.014 342.693 li
406.977 342.66 li
406.943 342.623 li
406.913 342.582 li
406.887 342.539 li
406.865 342.494 li
406.848 342.446 li
406.835 342.396 li
406.827 342.345 li
406.824 342.291 li
406.827 342.238 li
406.835 342.187 li
406.848 342.136 li
406.865 342.088 li
406.887 342.042 li
406.913 341.999 li
406.943 341.959 li
406.977 341.922 li
407.014 341.889 li
407.054 341.858 li
407.097 341.832 li
407.143 341.811 li
407.19 341.793 li
407.24 341.78 li
407.293 341.771 li
407.346 341.77 li
407.399 341.771 li
407.451 341.78 li
407.501 341.793 li
407.549 341.811 li
407.595 341.832 li
407.638 341.858 li
407.678 341.889 li
407.715 341.922 li
407.748 341.959 li
407.778 341.999 li
407.805 342.042 li
407.826 342.088 li
407.844 342.136 li
407.856 342.187 li
407.865 342.238 li
407.867 342.291 li
cp
f
grestore
406.824 342.813 mo
407.867 341.77 li
407.867 342.813 li
406.824 342.813 li
cp
f
gsave
406.824 342.813 mo
407.867 341.77 li
407.867 342.813 li
406.824 342.813 li
cp
clp
407.346 342.813 mo
407.293 342.81 li
407.24 342.803 li
407.19 342.789 li
407.143 342.771 li
407.097 342.75 li
407.054 342.724 li
407.014 342.693 li
406.977 342.66 li
406.943 342.623 li
406.913 342.582 li
406.887 342.539 li
406.865 342.494 li
406.848 342.446 li
406.835 342.396 li
406.827 342.345 li
406.824 342.291 li
406.827 342.238 li
406.835 342.187 li
406.848 342.136 li
406.865 342.088 li
406.887 342.042 li
406.913 341.999 li
406.943 341.959 li
406.977 341.922 li
407.014 341.889 li
407.054 341.858 li
407.097 341.832 li
407.143 341.811 li
407.19 341.793 li
407.24 341.78 li
407.293 341.771 li
407.346 341.77 li
407.399 341.771 li
407.451 341.78 li
407.501 341.793 li
407.549 341.811 li
407.595 341.832 li
407.638 341.858 li
407.678 341.889 li
407.715 341.922 li
407.748 341.959 li
407.778 341.999 li
407.805 342.042 li
407.826 342.088 li
407.844 342.136 li
407.856 342.187 li
407.865 342.238 li
407.867 342.291 li
407.865 342.345 li
407.856 342.396 li
407.844 342.446 li
407.826 342.494 li
407.805 342.539 li
407.778 342.582 li
407.748 342.623 li
407.715 342.66 li
407.678 342.693 li
407.638 342.724 li
407.595 342.75 li
407.549 342.771 li
407.501 342.789 li
407.451 342.803 li
407.399 342.81 li
407.346 342.813 li
cp
f
grestore
383.338 342.813 mo
382.294 341.77 li
382.294 342.813 li
383.338 342.813 li
cp
f
gsave
383.338 342.813 mo
382.294 341.77 li
382.294 342.813 li
383.338 342.813 li
cp
clp
382.815 341.77 mo
382.869 341.771 li
382.921 341.78 li
382.971 341.793 li
383.019 341.811 li
383.064 341.832 li
383.107 341.858 li
383.147 341.889 li
383.185 341.922 li
383.219 341.959 li
383.249 341.999 li
383.274 342.042 li
383.297 342.088 li
383.314 342.136 li
383.327 342.187 li
383.335 342.238 li
383.338 342.291 li
383.335 342.345 li
383.327 342.396 li
383.314 342.446 li
383.297 342.494 li
383.274 342.539 li
383.249 342.582 li
383.219 342.623 li
383.185 342.66 li
383.147 342.693 li
383.107 342.724 li
383.064 342.75 li
383.019 342.771 li
382.971 342.789 li
382.921 342.803 li
382.869 342.81 li
382.815 342.813 li
382.763 342.81 li
382.711 342.803 li
382.661 342.789 li
382.612 342.771 li
382.567 342.75 li
382.523 342.724 li
382.484 342.693 li
382.447 342.66 li
382.413 342.623 li
382.383 342.582 li
382.356 342.539 li
382.335 342.494 li
382.317 342.446 li
382.305 342.396 li
382.297 342.345 li
382.294 342.291 li
382.297 342.238 li
382.305 342.187 li
382.317 342.136 li
382.335 342.088 li
382.356 342.042 li
382.383 341.999 li
382.413 341.959 li
382.447 341.922 li
382.484 341.889 li
382.523 341.858 li
382.567 341.832 li
382.612 341.811 li
382.661 341.793 li
382.711 341.78 li
382.763 341.771 li
382.815 341.77 li
cp
f
grestore
383.338 342.813 mo
382.294 341.77 li
383.338 341.77 li
383.338 342.813 li
cp
f
gsave
383.338 342.813 mo
382.294 341.77 li
383.338 341.77 li
383.338 342.813 li
cp
clp
383.338 342.291 mo
383.335 342.345 li
383.327 342.396 li
383.314 342.446 li
383.297 342.494 li
383.274 342.539 li
383.249 342.582 li
383.219 342.623 li
383.185 342.66 li
383.147 342.693 li
383.107 342.724 li
383.064 342.75 li
383.019 342.771 li
382.971 342.789 li
382.921 342.803 li
382.869 342.81 li
382.815 342.813 li
382.763 342.81 li
382.711 342.803 li
382.661 342.789 li
382.612 342.771 li
382.567 342.75 li
382.523 342.724 li
382.484 342.693 li
382.447 342.66 li
382.413 342.623 li
382.383 342.582 li
382.356 342.539 li
382.335 342.494 li
382.317 342.446 li
382.305 342.396 li
382.297 342.345 li
382.294 342.291 li
382.297 342.238 li
382.305 342.187 li
382.317 342.136 li
382.335 342.088 li
382.356 342.042 li
382.383 341.999 li
382.413 341.959 li
382.447 341.922 li
382.484 341.889 li
382.523 341.858 li
382.567 341.832 li
382.612 341.811 li
382.661 341.793 li
382.711 341.78 li
382.763 341.771 li
382.815 341.77 li
382.869 341.771 li
382.921 341.78 li
382.971 341.793 li
383.019 341.811 li
383.064 341.832 li
383.107 341.858 li
383.147 341.889 li
383.185 341.922 li
383.219 341.959 li
383.249 341.999 li
383.274 342.042 li
383.297 342.088 li
383.314 342.136 li
383.327 342.187 li
383.335 342.238 li
383.338 342.291 li
cp
f
grestore
403.103 356.965 mo
403.103 352.534 399.511 348.943 395.081 348.943 cv
390.65 348.943 387.059 352.534 387.059 356.965 cv
387.059 361.396 390.65 364.987 395.081 364.987 cv
399.511 364.987 403.103 361.396 403.103 356.965 cv
cp
1 .858824 .341176 rgb
f
399.229 356.965 mo
399.229 354.674 397.372 352.816 395.081 352.816 cv
392.789 352.816 390.932 354.674 390.932 356.965 cv
390.932 359.256 392.789 361.114 395.081 361.114 cv
397.372 361.114 399.229 359.256 399.229 356.965 cv
cp
1 .258824 .321569 rgb
f
389.149 351.073 mo
388.171 349.22 li
389.538 350.809 li
391.391 349.828 li
389.803 351.196 li
390.782 353.049 li
389.415 351.461 li
387.562 352.44 li
389.149 351.073 li
cp
1 1 1 rgb
f
341.824 356.013 mo
341.824 338.972 328.01 325.157 310.969 325.157 cv
293.928 325.157 280.112 338.972 280.112 356.013 cv
280.112 373.054 293.928 386.869 310.969 386.869 cv
328.01 386.869 341.824 373.054 341.824 356.013 cv
cp
1 .760784 .2 rgb
f
337.223 356.013 mo
337.223 341.513 325.469 329.758 310.969 329.758 cv
296.469 329.758 284.714 341.513 284.714 356.013 cv
284.714 370.513 296.469 382.268 310.969 382.268 cv
325.469 382.268 337.223 370.513 337.223 356.013 cv
cp
1 .937255 .580392 rgb
f
329.27 425.608 mo
292.668 425.608 li
284.298 425.608 277.513 418.823 277.513 410.452 cv
277.513 410.146 li
277.513 401.776 284.298 394.991 292.668 394.991 cv
329.27 394.991 li
337.64 394.991 344.425 401.776 344.425 410.146 cv
344.425 410.452 li
344.425 418.823 337.64 425.608 329.27 425.608 cv
cp
.160784 .611765 .568627 rgb
f
334.51 410.3 mo
334.51 403.71 329.168 398.369 322.579 398.369 cv
315.99 398.369 310.648 403.71 310.648 410.3 cv
310.648 416.889 315.99 422.23 322.579 422.23 cv
329.168 422.23 334.51 416.889 334.51 410.3 cv
cp
1 .760784 .2 rgb
f
330.234 410.3 mo
330.234 406.071 326.807 402.645 322.579 402.645 cv
318.351 402.645 314.924 406.071 314.924 410.3 cv
314.924 414.527 318.351 417.955 322.579 417.955 cv
326.807 417.955 330.234 414.527 330.234 410.3 cv
cp
1 .937255 .580392 rgb
f
324 412.247 mo
324 412.049 323.92 411.882 323.76 411.745 cv
323.599 411.608 323.359 411.467 323.038 411.32 cv
323.038 413.081 li
323.679 412.973 324 412.694 324 412.247 cv
cp
321.158 407.956 mo
321.158 408.163 321.229 408.334 321.373 408.469 cv
321.518 408.603 321.75 408.741 322.069 408.882 cv
322.069 407.221 li
321.462 407.311 321.158 407.556 321.158 407.956 cv
cp
326.127 412.141 mo
326.127 412.89 325.856 413.492 325.314 413.947 cv
324.772 414.402 324.014 414.674 323.038 414.764 cv
323.038 416.213 li
322.069 416.213 li
322.069 414.792 li
320.92 414.768 319.911 414.565 319.045 414.184 cv
319.045 412.317 li
319.454 412.521 319.948 412.699 320.525 412.854 cv
321.103 413.01 321.617 413.103 322.069 413.13 cv
322.069 410.939 li
321.596 410.756 li
320.663 410.388 320.002 409.988 319.613 409.558 cv
319.225 409.126 319.03 408.593 319.03 407.956 cv
319.03 407.272 319.298 406.711 319.833 406.271 cv
320.367 405.829 321.113 405.563 322.069 405.468 cv
322.069 404.387 li
323.038 404.387 li
323.038 405.439 li
324.117 405.486 325.093 405.703 325.965 406.09 cv
325.301 407.744 li
324.565 407.442 323.812 407.259 323.038 407.192 cv
323.038 409.277 li
323.957 409.632 324.611 409.938 325 410.196 cv
325.389 410.456 325.674 410.741 325.855 411.053 cv
326.037 411.363 326.127 411.726 326.127 412.141 cv
cp
.160784 .611765 .568627 rgb
f
296.683 415.14 mo
288.115 415.14 li
288.115 413.337 li
291.191 410.228 li
292.103 409.294 292.698 408.647 292.978 408.287 cv
293.257 407.926 293.458 407.593 293.581 407.285 cv
293.704 406.978 293.766 406.659 293.766 406.329 cv
293.766 405.838 293.63 405.472 293.358 405.231 cv
293.088 404.991 292.726 404.871 292.273 404.871 cv
291.798 404.871 291.337 404.979 290.89 405.197 cv
290.443 405.416 289.977 405.726 289.49 406.128 cv
288.082 404.46 li
288.686 403.946 289.186 403.583 289.582 403.37 cv
289.979 403.158 290.412 402.994 290.882 402.88 cv
291.352 402.766 291.876 402.708 292.458 402.708 cv
293.224 402.708 293.899 402.848 294.486 403.127 cv
295.073 403.406 295.528 403.798 295.853 404.301 cv
296.177 404.804 296.339 405.379 296.339 406.027 cv
296.339 406.592 296.239 407.121 296.041 407.616 cv
295.843 408.11 295.535 408.618 295.119 409.138 cv
294.703 409.657 293.97 410.397 292.919 411.359 cv
291.343 412.843 li
291.343 412.96 li
296.683 412.96 li
296.683 415.14 li
cp
1 .937255 .580392 rgb
f
300.421 409.012 mo
300.421 410.516 300.551 411.593 300.811 412.243 cv
301.071 412.895 301.508 413.22 302.123 413.22 cv
302.727 413.22 303.162 412.891 303.431 412.23 cv
303.699 411.571 303.833 410.498 303.833 409.012 cv
303.833 407.509 303.697 406.429 303.427 405.771 cv
303.155 405.115 302.721 404.787 302.123 404.787 cv
301.514 404.787 301.078 405.115 300.815 405.771 cv
300.553 406.429 300.421 407.509 300.421 409.012 cv
cp
306.415 409.012 mo
306.415 411.152 306.064 412.736 305.363 413.765 cv
304.661 414.793 303.581 415.308 302.123 415.308 cv
300.709 415.308 299.643 414.776 298.925 413.715 cv
298.207 412.653 297.848 411.085 297.848 409.012 cv
297.848 406.849 298.197 405.255 298.896 404.229 cv
299.594 403.204 300.67 402.691 302.123 402.691 cv
303.537 402.691 304.605 403.228 305.329 404.301 cv
306.053 405.374 306.415 406.944 306.415 409.012 cv
cp
f
313.16 340.592 mo
313.16 341.12 312.731 341.549 312.203 341.549 cv
311.674 341.549 311.246 341.12 311.246 340.592 cv
311.246 340.063 311.674 339.634 312.203 339.634 cv
312.731 339.634 313.16 340.063 313.16 340.592 cv
cp
1 .258824 .321569 rgb
f
322.771 362.966 mo
322.771 369.484 317.487 374.769 310.969 374.769 cv
304.45 374.769 299.165 369.484 299.165 362.966 cv
299.165 356.446 304.45 351.162 310.969 351.162 cv
317.487 351.162 322.771 356.446 322.771 362.966 cv
cp
.647059 .823529 .921569 rgb
f
314.533 341.017 mo
307.402 341.017 li
307.402 353.502 li
314.533 353.502 li
314.533 341.017 li
cp
f
312.242 341.017 mo
309.695 341.017 li
309.695 356.027 li
312.242 356.027 li
312.242 341.017 li
cp
.831373 .913725 .956863 rgb
f
315.7 344.523 mo
306.237 344.523 li
306.237 340.592 li
315.7 340.592 li
315.7 344.523 li
cp
.647059 .823529 .921569 rgb
f
311.632 362.168 mo
307.978 364.098 304.55 364.016 301.832 363.302 cv
302.01 368.196 306.03 372.11 310.969 372.11 cv
316.02 372.11 320.114 368.016 320.114 362.966 cv
320.114 362.398 320.059 361.845 319.96 361.307 cv
317.634 360.567 314.789 360.5 311.632 362.168 cv
cp
1 .258824 .321569 rgb
f
310.969 353.82 mo
305.917 353.82 301.823 357.915 301.823 362.966 cv
301.823 363.078 301.828 363.19 301.832 363.302 cv
304.55 364.016 307.978 364.098 311.632 362.168 cv
314.789 360.5 317.634 360.567 319.96 361.307 cv
319.18 357.049 315.453 353.82 310.969 353.82 cv
cp
.831373 .913725 .956863 rgb
f
308.499 360.81 mo
308.499 361.169 308.208 361.461 307.849 361.461 cv
307.489 361.461 307.197 361.169 307.197 360.81 cv
307.197 360.45 307.489 360.159 307.849 360.159 cv
308.208 360.159 308.499 360.45 308.499 360.81 cv
cp
1 .258824 .321569 rgb
f
311.766 358.021 mo
311.766 358.461 311.408 358.818 310.968 358.818 cv
310.527 358.818 310.17 358.461 310.17 358.021 cv
310.17 357.58 310.527 357.224 310.968 357.224 cv
311.408 357.224 311.766 357.58 311.766 358.021 cv
cp
f
313.059 361.773 mo
313.059 362.088 312.803 362.344 312.488 362.344 cv
312.173 362.344 311.918 362.088 311.918 361.773 cv
311.918 361.458 312.173 361.202 312.488 361.202 cv
312.803 361.202 313.059 361.458 313.059 361.773 cv
cp
f
311.815 339.063 mo
311.815 339.379 311.561 339.634 311.246 339.634 cv
310.93 339.634 310.675 339.379 310.675 339.063 cv
310.675 338.748 310.93 338.493 311.246 338.493 cv
311.561 338.493 311.815 338.748 311.815 339.063 cv
cp
f
310.691 362.771 mo
310.691 363.32 310.246 363.767 309.695 363.767 cv
309.145 363.767 308.698 363.32 308.698 362.771 cv
308.698 362.22 309.145 361.773 309.695 361.773 cv
310.246 361.773 310.691 362.22 310.691 362.771 cv
cp
f
313.81 366.685 mo
313.81 367.235 313.363 367.682 312.813 367.682 cv
312.262 367.682 311.815 367.235 311.815 366.685 cv
311.815 366.134 312.262 365.688 312.813 365.688 cv
313.363 365.688 313.81 366.134 313.81 366.685 cv
cp
.831373 .913725 .956863 rgb
f
307.764 365.946 mo
307.764 366.497 307.318 366.943 306.768 366.943 cv
306.217 366.943 305.771 366.497 305.771 365.946 cv
305.771 365.396 306.217 364.949 306.768 364.949 cv
307.318 364.949 307.764 365.396 307.764 365.946 cv
cp
f
315.766 363.103 mo
315.766 363.5 315.443 363.822 315.046 363.822 cv
314.647 363.822 314.325 363.5 314.325 363.103 cv
314.325 362.704 314.647 362.381 315.046 362.381 cv
315.443 362.381 315.766 362.704 315.766 363.103 cv
cp
f
309.843 338.493 mo
309.843 339.044 309.396 339.49 308.845 339.49 cv
308.294 339.49 307.849 339.044 307.849 338.493 cv
307.849 337.942 308.294 337.496 308.845 337.496 cv
309.396 337.496 309.843 337.942 309.843 338.493 cv
cp
1 .258824 .321569 rgb
f
312.242 335.187 mo
312.242 335.737 311.796 336.184 311.246 336.184 cv
310.694 336.184 310.248 335.737 310.248 335.187 cv
310.248 334.636 310.694 334.189 311.246 334.189 cv
311.796 334.189 312.242 334.636 312.242 335.187 cv
cp
f
303.427 357.517 mo
301.486 355.084 li
303.92 357.023 li
306.353 355.084 li
304.412 357.517 li
306.353 359.95 li
303.92 358.011 li
301.486 359.95 li
303.427 357.517 li
cp
1 1 1 rgb
f
89.4878 355.74 mo
89.4878 338.699 75.6729 324.885 58.6318 324.885 cv
41.5908 324.885 27.7759 338.699 27.7759 355.74 cv
27.7759 372.781 41.5908 386.597 58.6318 386.597 cv
75.6729 386.597 89.4878 372.781 89.4878 355.74 cv
cp
1 .760784 .2 rgb
f
84.8862 355.74 mo
84.8862 341.24 73.1318 329.486 58.6318 329.486 cv
44.1318 329.486 32.3774 341.24 32.3774 355.74 cv
32.3774 370.24 44.1318 381.995 58.6318 381.995 cv
73.1318 381.995 84.8862 370.24 84.8862 355.74 cv
cp
1 .937255 .580392 rgb
f
76.9326 425.336 mo
40.3311 425.336 li
31.9609 425.336 25.1758 418.551 25.1758 410.18 cv
25.1758 409.874 li
25.1758 401.504 31.9609 394.719 40.3311 394.719 cv
76.9326 394.719 li
85.3027 394.719 92.0879 401.504 92.0879 409.874 cv
92.0879 410.18 li
92.0879 418.551 85.3027 425.336 76.9326 425.336 cv
cp
.160784 .611765 .568627 rgb
f
82.1729 410.027 mo
82.1729 403.438 76.8311 398.097 70.2422 398.097 cv
63.6533 398.097 58.3115 403.438 58.3115 410.027 cv
58.3115 416.616 63.6533 421.958 70.2422 421.958 cv
76.8311 421.958 82.1729 416.616 82.1729 410.027 cv
cp
1 .760784 .2 rgb
f
77.8975 410.027 mo
77.8975 405.799 74.4702 402.372 70.2422 402.372 cv
66.0142 402.372 62.5869 405.799 62.5869 410.027 cv
62.5869 414.255 66.0142 417.683 70.2422 417.683 cv
74.4702 417.683 77.8975 414.255 77.8975 410.027 cv
cp
1 .937255 .580392 rgb
f
71.6631 411.975 mo
71.6631 411.776 71.583 411.609 71.4229 411.473 cv
71.2622 411.336 71.0225 411.194 70.7017 411.049 cv
70.7017 412.809 li
71.3423 412.7 71.6631 412.422 71.6631 411.975 cv
cp
68.8213 407.684 mo
68.8213 407.891 68.8931 408.062 69.0366 408.196 cv
69.1807 408.33 69.4131 408.469 69.7329 408.609 cv
69.7329 406.948 li
69.125 407.038 68.8213 407.283 68.8213 407.684 cv
cp
73.7905 411.868 mo
73.7905 412.617 73.5195 413.22 72.978 413.675 cv
72.436 414.13 71.6772 414.401 70.7017 414.491 cv
70.7017 415.94 li
69.7329 415.94 li
69.7329 414.52 li
68.583 414.495 67.5747 414.293 66.708 413.911 cv
66.708 412.045 li
67.1177 412.248 67.6113 412.427 68.189 412.582 cv
68.7656 412.738 69.2808 412.83 69.7329 412.857 cv
69.7329 410.667 li
69.2593 410.483 li
68.3262 410.115 67.6655 409.716 67.2769 409.285 cv
66.8882 408.854 66.6938 408.32 66.6938 407.684 cv
66.6938 407 66.9609 406.438 67.4961 405.998 cv
68.0308 405.557 68.7769 405.29 69.7329 405.195 cv
69.7329 404.114 li
70.7017 404.114 li
70.7017 405.167 li
71.7808 405.214 72.7563 405.431 73.6279 405.817 cv
72.9639 407.472 li
72.2285 407.17 71.4746 406.986 70.7017 406.92 cv
70.7017 409.006 li
71.6206 409.359 72.2749 409.665 72.6631 409.925 cv
73.0522 410.184 73.3369 410.469 73.5186 410.78 cv
73.7002 411.091 73.7905 411.453 73.7905 411.868 cv
cp
.160784 .611765 .568627 rgb
f
42.1826 414.868 mo
39.5923 414.868 li
39.5923 407.776 li
39.6177 406.611 li
39.6597 405.337 li
39.229 405.768 38.9302 406.05 38.7627 406.184 cv
37.354 407.315 li
36.105 405.756 li
40.0532 402.612 li
42.1826 402.612 li
42.1826 414.868 li
cp
1 .937255 .580392 rgb
f
50.0371 407.039 mo
51.2217 407.039 52.165 407.371 52.8662 408.036 cv
53.5679 408.701 53.9185 409.612 53.9185 410.769 cv
53.9185 412.139 53.4966 413.191 52.6528 413.93 cv
51.8086 414.667 50.6016 415.036 49.0313 415.036 cv
47.6675 415.036 46.5669 414.815 45.7285 414.374 cv
45.7285 412.136 li
46.1699 412.37 46.6841 412.562 47.271 412.71 cv
47.8574 412.857 48.4136 412.932 48.939 412.932 cv
50.5205 412.932 51.3115 412.283 51.3115 410.987 cv
51.3115 409.752 50.4927 409.135 48.855 409.135 cv
48.5591 409.135 48.2319 409.164 47.8745 409.223 cv
47.5166 409.281 47.2261 409.344 47.0024 409.411 cv
45.9717 408.857 li
46.4326 402.612 li
53.0801 402.612 li
53.0801 404.809 li
48.7041 404.809 li
48.478 407.215 li
48.7715 407.156 li
49.1123 407.078 49.5342 407.039 50.0371 407.039 cv
cp
f
76.0381 357.52 mo
73.9199 360.19 70.9463 361.782 67.8159 362.213 cv
68.2529 361.535 68.5884 360.816 68.8271 360.077 cv
69.9819 356.519 68.8853 352.463 65.7803 350.001 cv
62.6768 347.539 58.4771 347.397 55.2739 349.331 cv
54.6084 349.731 53.9873 350.223 53.4268 350.802 cv
53.1338 347.655 54.0054 344.397 56.1235 341.727 cv
58.3428 338.928 61.5044 337.314 64.7993 336.981 cv
64.5347 337.628 64.3491 338.294 64.2402 338.971 cv
63.7207 342.165 64.8989 345.536 67.6138 347.689 cv
70.3281 349.842 73.8794 350.222 76.8711 348.989 cv
77.5039 348.729 78.1133 348.396 78.6826 347.991 cv
79.1089 351.275 78.2573 354.721 76.0381 357.52 cv
cp
.647059 .823529 .921569 rgb
f
74.5508 356.34 mo
73.0391 358.246 71.0146 359.506 68.8271 360.077 cv
69.9819 356.519 68.8853 352.463 65.7803 350.001 cv
62.6768 347.539 58.4771 347.397 55.2739 349.331 cv
55.334 347.073 56.0981 344.814 57.6108 342.906 cv
59.3301 340.738 61.7124 339.407 64.2402 338.971 cv
63.7207 342.165 64.8989 345.536 67.6138 347.689 cv
70.3281 349.842 73.8794 350.222 76.8711 348.989 cv
77.0225 351.551 76.269 354.174 74.5508 356.34 cv
cp
.462745 .666667 .768627 rgb
f
49.562 372.192 mo
47.8677 370.85 li
70.3779 342.465 li
72.0718 343.809 li
49.562 372.192 li
cp
.6 .384314 .313726 rgb
f
72.397 344.066 mo
72.9102 343.419 72.8018 342.479 72.1543 341.965 cv
71.5073 341.451 70.5659 341.56 70.0527 342.207 cv
69.5391 342.854 69.6479 343.796 70.2949 344.309 cv
70.9424 344.822 71.8833 344.714 72.397 344.066 cv
cp
.462745 .666667 .768627 rgb
f
51.9316 370.733 mo
51.8848 370.793 51.8403 370.849 51.7896 370.906 cv
51.7056 371.013 51.6235 371.115 51.5356 371.214 cv
51.2827 371.514 51.0317 371.798 50.7754 372.063 cv
50.6816 372.162 50.5869 372.256 50.4927 372.349 cv
50.2075 372.638 49.9248 372.897 49.6455 373.135 cv
49.5396 373.229 49.436 373.315 49.332 373.396 cv
48.9937 373.667 48.667 373.893 48.3584 374.076 cv
48.231 374.153 48.1055 374.222 47.9873 374.281 cv
47.9849 374.284 47.979 374.285 47.979 374.285 cv
47.2935 374.622 46.7363 374.695 46.4043 374.433 cv
46.0732 374.17 46.0166 373.61 46.1929 372.868 cv
46.1919 372.862 46.1943 372.859 46.1938 372.854 cv
46.2246 372.726 46.2632 372.593 46.3096 372.451 cv
46.418 372.108 46.5625 371.739 46.7505 371.349 cv
46.8052 371.229 46.8652 371.107 46.9326 370.983 cv
47.1001 370.657 47.2886 370.323 47.5049 369.979 cv
47.5742 369.866 47.644 369.753 47.7188 369.64 cv
47.9189 369.329 48.1387 369.02 48.3726 368.706 cv
48.4482 368.598 48.5298 368.494 48.6143 368.388 cv
48.6582 368.326 48.7031 368.27 48.75 368.21 cv
48.9438 367.966 49.1411 367.73 49.3364 367.503 cv
49.4268 367.401 49.5151 367.304 49.6064 367.207 cv
49.8711 366.913 50.1348 366.638 50.3979 366.383 cv
50.4985 366.289 50.5957 366.198 50.6929 366.107 cv
50.9995 365.83 51.3003 365.579 51.5903 365.361 cv
51.7056 365.274 51.8184 365.195 51.9263 365.118 cv
52.1025 364.998 52.2725 364.894 52.4326 364.801 cv
54.4126 366.371 li
54.3623 366.551 54.2959 366.737 54.2192 366.937 cv
54.1714 367.062 54.1177 367.188 54.062 367.321 cv
53.9126 367.651 53.7368 368.001 53.5371 368.362 cv
53.4707 368.479 53.4043 368.594 53.3359 368.712 cv
53.1475 369.027 52.9399 369.346 52.7134 369.671 cv
52.6406 369.782 52.5649 369.89 52.4868 370.001 cv
52.3101 370.243 52.1255 370.489 51.9316 370.733 cv
cp
.937255 .94902 .878431 rgb
f
47.6528 375.422 mo
47.1069 376.11 46.106 376.229 45.4146 375.681 cv
44.7261 375.135 44.6133 374.133 45.1592 373.444 cv
45.4224 373.113 45.7915 372.912 46.1802 372.858 cv
46.1826 372.854 46.1885 372.854 46.1938 372.854 cv
46.4321 372.823 46.6704 372.844 46.9009 372.92 cv
47.0752 372.977 47.2412 373.063 47.3945 373.184 cv
47.5479 373.306 47.6694 373.448 47.7642 373.604 cv
47.8936 373.814 47.9688 374.047 47.9873 374.281 cv
47.9878 374.286 47.9912 374.289 47.9883 374.292 cv
48.0249 374.684 47.916 375.091 47.6528 375.422 cv
cp
.462745 .666667 .768627 rgb
f
46.0083 376.195 mo
46.2773 375.856 46.2202 375.363 45.8809 375.095 cv
45.542 374.826 45.0488 374.883 44.7798 375.222 cv
44.5107 375.561 44.5674 376.054 44.9067 376.323 cv
45.2461 376.592 45.7393 376.535 46.0083 376.195 cv
cp
f
69.6997 348.429 mo
66.4209 345.828 li
63.8208 349.106 li
67.0996 351.707 li
69.6997 348.429 li
cp
.647059 .823529 .921569 rgb
f
60.3882 341.044 mo
60.3843 339.409 li
60.7524 341.002 li
62.3872 340.998 li
60.7944 341.366 li
60.7983 343.001 li
60.4302 341.408 li
58.7954 341.412 li
60.3882 341.044 li
cp
1 1 1 rgb
f
54.062 367.321 mo
51.5903 365.361 li
51.7056 365.274 51.8184 365.195 51.9263 365.118 cv
54.2192 366.937 li
54.1714 367.062 54.1177 367.188 54.062 367.321 cv
cp
.462745 .666667 .768627 rgb
f
53.3359 368.712 mo
50.3979 366.383 li
50.4985 366.289 50.5957 366.198 50.6929 366.107 cv
53.5371 368.362 li
53.4707 368.479 53.4043 368.594 53.3359 368.712 cv
cp
f
52.4868 370.001 mo
49.3364 367.503 li
49.4268 367.401 49.5151 367.304 49.6064 367.207 cv
52.7134 369.671 li
52.6406 369.782 52.5649 369.89 52.4868 370.001 cv
cp
f
51.7896 370.906 mo
51.7056 371.013 51.6235 371.115 51.5356 371.214 cv
48.3726 368.706 li
48.4482 368.598 48.5298 368.494 48.6143 368.388 cv
51.7896 370.906 li
cp
f
50.7754 372.063 mo
50.6816 372.162 50.5869 372.256 50.4927 372.349 cv
47.5049 369.979 li
47.5742 369.866 47.644 369.753 47.7188 369.64 cv
50.7754 372.063 li
cp
f
49.6455 373.135 mo
49.5396 373.229 49.436 373.315 49.332 373.396 cv
46.7505 371.349 li
46.8052 371.229 46.8652 371.107 46.9326 370.983 cv
49.6455 373.135 li
cp
f
47.9873 374.281 mo
47.9878 374.286 47.9912 374.289 47.9883 374.292 cv
46.1802 372.858 li
46.1826 372.854 46.1885 372.854 46.1938 372.854 cv
46.2246 372.726 46.2632 372.593 46.3096 372.451 cv
48.3584 374.076 li
48.231 374.153 48.1055 374.222 47.9873 374.281 cv
cp
f
41.3682 345.911 mo
43.187 344.34 li
70.1382 375.545 li
68.3198 377.116 li
41.3682 345.911 li
cp
.937255 .94902 .878431 rgb
f
62.8301 365.145 mo
45.1729 342.769 li
38.4746 340.722 li
39.5249 347.646 li
59.0933 368.372 li
62.8301 365.145 li
cp
.462745 .666667 .768627 rgb
f
61.873 366.419 mo
39.2466 341.615 li
60.4932 367.61 li
61.873 366.419 li
cp
.831373 .913725 .956863 rgb
f
61.4146 368.99 mo
61.4795 369.104 61.5488 369.222 61.6255 369.344 cv
61.7637 369.566 61.9136 369.802 62.0801 370.041 cv
62.1528 370.15 62.23 370.265 62.311 370.378 cv
62.4648 370.597 62.6318 370.82 62.8062 371.043 cv
62.8833 371.148 62.9678 371.258 63.0537 371.363 cv
63.2192 371.574 63.394 371.789 63.5767 372.009 cv
63.6577 372.105 63.7432 372.207 63.8281 372.305 cv
63.832 372.309 63.8364 372.313 63.8364 372.316 cv
64.0234 372.527 64.2056 372.734 64.3882 372.934 cv
64.4814 373.034 64.5747 373.137 64.6641 373.233 cv
64.8628 373.44 65.0576 373.64 65.248 373.826 cv
65.3452 373.923 65.439 374.017 65.5356 374.105 cv
65.7432 374.305 65.9492 374.495 66.1484 374.674 cv
66.2578 374.763 66.3633 374.855 66.4653 374.938 cv
67.7227 375.992 68.7363 376.507 69.105 376.187 cv
69.4751 375.87 69.1133 374.799 68.2617 373.412 cv
68.1968 373.298 68.124 373.181 68.0469 373.063 cv
67.9009 372.84 67.7466 372.608 67.5806 372.374 cv
67.5039 372.268 67.4263 372.158 67.3413 372.049 cv
67.187 371.83 67.0166 371.611 66.8379 371.388 cv
66.7607 371.282 66.6758 371.177 66.5864 371.067 cv
66.416 370.856 66.2373 370.646 66.0552 370.431 cv
66.0469 370.422 66.0386 370.41 66.0313 370.402 cv
65.9492 370.309 65.8726 370.22 65.7915 370.131 cv
65.605 369.919 65.4185 369.713 65.2314 369.518 cv
65.1387 369.416 65.0449 369.319 64.9521 369.222 cv
64.7495 369.015 64.5547 368.82 64.3594 368.638 cv
64.2622 368.54 64.165 368.447 64.0674 368.357 cv
63.8525 368.159 63.6416 367.977 63.439 367.806 cv
63.3291 367.713 63.2236 367.628 63.1226 367.543 cv
61.9951 366.646 61.0942 366.225 60.7534 366.521 cv
60.4126 366.813 60.6929 367.753 61.4146 368.99 cv
cp
.937255 .94902 .878431 rgb
f
65.9858 377.78 mo
66.0674 378.198 66.5059 378.445 66.9072 378.296 cv
66.9434 378.279 li
68.8745 377.549 70.4849 376.158 71.4907 374.353 cv
71.5112 374.316 li
71.7178 373.943 71.5396 373.477 71.1338 373.335 cv
68.5098 373.075 li
67.9009 373.939 67.0776 374.637 66.1162 375.096 cv
65.9858 377.78 li
cp
.647059 .823529 .921569 rgb
f
44.4995 344.96 mo
45.5347 343.661 li
44.2363 344.697 li
42.9375 343.661 li
43.9722 344.96 li
42.9375 346.259 li
44.2363 345.224 li
45.5347 346.259 li
44.4995 344.96 li
cp
1 1 1 rgb
f
66.1484 374.674 mo
66.2578 374.763 66.3633 374.855 66.4653 374.938 cv
68.2617 373.412 li
68.1968 373.298 68.124 373.181 68.0469 373.063 cv
66.1484 374.674 li
cp
.462745 .666667 .768627 rgb
f
65.248 373.826 mo
65.3452 373.923 65.439 374.017 65.5356 374.105 cv
67.5806 372.374 li
67.5039 372.268 67.4263 372.158 67.3413 372.049 cv
65.248 373.826 li
cp
f
64.3882 372.934 mo
64.4814 373.034 64.5747 373.137 64.6641 373.233 cv
66.8379 371.388 li
66.7607 371.282 66.6758 371.177 66.5864 371.067 cv
64.3882 372.934 li
cp
f
63.5767 372.009 mo
63.6577 372.105 63.7432 372.207 63.8281 372.305 cv
63.832 372.309 63.8364 372.313 63.8364 372.316 cv
66.0552 370.431 li
66.0469 370.422 66.0386 370.41 66.0313 370.402 cv
65.9492 370.309 65.8726 370.22 65.7915 370.131 cv
63.5767 372.009 li
cp
f
62.8062 371.043 mo
62.8833 371.148 62.9678 371.258 63.0537 371.363 cv
65.2314 369.518 li
65.1387 369.416 65.0449 369.319 64.9521 369.222 cv
62.8062 371.043 li
cp
f
62.0801 370.041 mo
62.1528 370.15 62.23 370.265 62.311 370.378 cv
64.3594 368.638 li
64.2622 368.54 64.165 368.447 64.0674 368.357 cv
62.0801 370.041 li
cp
f
61.4146 368.99 mo
61.4795 369.104 61.5488 369.222 61.6255 369.344 cv
63.439 367.806 li
63.3291 367.713 63.2236 367.628 63.1226 367.543 cv
61.4146 368.99 li
cp
f
56.3848 369.876 mo
57.5347 371.209 li
57.9194 371.653 58.5918 371.703 59.0371 371.318 cv
65.7529 365.519 li
66.1982 365.134 66.2471 364.461 65.8628 364.016 cv
64.7124 362.684 li
64.2764 362.179 63.4688 362.299 63.1914 362.905 cv
62.6045 364.186 61.7402 365.364 60.6045 366.345 cv
59.4692 367.326 58.1777 368.01 56.8257 368.403 cv
56.1851 368.59 55.9487 369.371 56.3848 369.876 cv
cp
.647059 .823529 .921569 rgb
f
64.1294 363.698 mo
64.6812 363.698 65.1294 364.146 65.1294 364.698 cv
65.1294 365.249 64.6812 365.697 64.1294 365.697 cv
63.5786 365.697 63.1299 365.249 63.1299 364.698 cv
63.1299 364.146 63.5786 363.698 64.1294 363.698 cv
64.1294 363.698 li
cp
64.1294 364.07 mo
63.7832 364.07 63.5029 364.352 63.5029 364.698 cv
63.5029 365.044 63.7832 365.325 64.1294 365.325 cv
64.4766 365.325 64.7568 365.044 64.7568 364.698 cv
64.7568 364.352 64.4766 364.07 64.1294 364.07 cv
64.1294 364.07 li
cp
.462745 .666667 .768627 rgb
f
58.354 368.683 mo
58.9048 368.683 59.3535 369.131 59.3535 369.683 cv
59.3535 370.233 58.9048 370.682 58.354 370.682 cv
57.8027 370.682 57.354 370.233 57.354 369.683 cv
57.354 369.131 57.8027 368.683 58.354 368.683 cv
58.354 368.683 li
cp
58.354 369.055 mo
58.0068 369.055 57.7266 369.336 57.7266 369.683 cv
57.7266 370.028 58.0068 370.31 58.354 370.31 cv
58.7002 370.31 58.9805 370.028 58.9805 369.683 cv
58.9805 369.336 58.7002 369.055 58.354 369.055 cv
58.354 369.055 li
cp
f
61.4004 366.658 mo
61.7783 366.658 62.0854 366.966 62.0854 367.344 cv
62.0854 367.722 61.7783 368.028 61.4004 368.028 cv
61.0229 368.028 60.7158 367.722 60.7158 367.344 cv
60.7158 366.966 61.0229 366.658 61.4004 366.658 cv
61.4004 366.658 li
cp
61.4004 367.031 mo
61.2275 367.031 61.0879 367.171 61.0879 367.344 cv
61.0879 367.517 61.2275 367.656 61.4004 367.656 cv
61.5732 367.656 61.7134 367.517 61.7134 367.344 cv
61.7134 367.171 61.5732 367.031 61.4004 367.031 cv
61.4004 367.031 li
cp
f
64.1294 365.512 mo
64.5786 365.512 64.9429 365.146 64.9429 364.698 cv
64.9429 364.249 64.5786 363.885 64.1294 363.885 cv
63.6807 363.885 63.3164 364.249 63.3164 364.698 cv
63.3164 365.146 63.6807 365.512 64.1294 365.512 cv
cp
1 .258824 .321569 rgb
f
58.354 370.495 mo
58.8018 370.495 59.167 370.131 59.167 369.682 cv
59.167 369.233 58.8018 368.869 58.354 368.869 cv
57.9053 368.869 57.54 369.233 57.54 369.682 cv
57.54 370.131 57.9053 370.495 58.354 370.495 cv
cp
f
61.4004 367.843 mo
61.6758 367.843 61.8994 367.618 61.8994 367.343 cv
61.8994 367.068 61.6758 366.845 61.4004 366.845 cv
61.125 366.845 60.9014 367.068 60.9014 367.343 cv
60.9014 367.618 61.125 367.843 61.4004 367.843 cv
cp
1 .858824 .341176 rgb
f
68.4604 374.282 mo
69.0117 374.282 69.4604 374.73 69.4604 375.281 cv
69.4604 375.832 69.0117 376.281 68.4604 376.281 cv
67.9097 376.281 67.4609 375.832 67.4609 375.281 cv
67.4609 374.73 67.9097 374.282 68.4604 374.282 cv
68.4604 374.282 li
cp
68.4604 374.654 mo
68.1143 374.654 67.8335 374.935 67.8335 375.281 cv
67.8335 375.628 68.1143 375.908 68.4604 375.908 cv
68.8076 375.908 69.0879 375.628 69.0879 375.281 cv
69.0879 374.935 68.8076 374.654 68.4604 374.654 cv
68.4604 374.654 li
cp
.462745 .666667 .768627 rgb
f
68.4604 376.095 mo
68.9092 376.095 69.2739 375.729 69.2739 375.281 cv
69.2739 374.833 68.9092 374.468 68.4604 374.468 cv
68.0117 374.468 67.647 374.833 67.647 375.281 cv
67.647 375.729 68.0117 376.095 68.4604 376.095 cv
cp
1 .258824 .321569 rgb
f
411.885 202.99 mo
415.907 211.141 li
416.275 211.886 416.986 212.402 417.809 212.522 cv
426.804 213.829 li
428.875 214.13 429.702 216.676 428.204 218.137 cv
421.695 224.481 li
421.1 225.062 420.828 225.897 420.969 226.717 cv
422.505 235.675 li
422.859 237.738 420.693 239.312 418.841 238.337 cv
410.796 234.107 li
410.06 233.721 409.181 233.721 408.445 234.107 cv
400.399 238.337 li
398.547 239.312 396.382 237.738 396.735 235.675 cv
398.272 226.717 li
398.412 225.897 398.141 225.062 397.546 224.481 cv
391.037 218.137 li
389.538 216.676 390.365 214.13 392.437 213.829 cv
401.432 212.522 li
402.254 212.402 402.965 211.886 403.333 211.141 cv
407.355 202.99 li
408.282 201.113 410.959 201.113 411.885 202.99 cv
cp
.929412 .592157 0 rgb
f
411.885 200.878 mo
415.907 209.029 li
416.275 209.774 416.986 210.291 417.809 210.41 cv
426.804 211.717 li
428.875 212.019 429.702 214.564 428.204 216.025 cv
421.695 222.37 li
421.1 222.95 420.828 223.786 420.969 224.605 cv
422.505 233.563 li
422.859 235.627 420.693 237.199 418.841 236.226 cv
410.796 231.996 li
410.06 231.609 409.181 231.609 408.445 231.996 cv
400.399 236.226 li
398.547 237.199 396.382 235.627 396.735 233.563 cv
398.272 224.605 li
398.412 223.786 398.141 222.95 397.546 222.37 cv
391.037 216.025 li
389.538 214.564 390.365 212.019 392.437 211.717 cv
401.432 210.41 li
402.254 210.291 402.965 209.774 403.333 209.029 cv
407.355 200.878 li
408.282 199.001 410.959 199.001 411.885 200.878 cv
cp
1 .760784 .2 rgb
f
409.62 204.959 mo
409.617 205.436 409.578 205.899 409.533 206.36 cv
409.492 206.823 409.427 207.277 409.361 207.731 cv
409.222 208.636 409.04 209.525 408.833 210.405 cv
408.417 212.165 407.889 213.883 407.267 215.568 cv
406.923 216.498 li
405.945 216.494 li
404.233 216.486 402.521 216.388 400.809 216.182 cv
399.952 216.073 399.096 215.941 398.24 215.768 cv
397.812 215.678 397.384 215.587 396.956 215.471 cv
396.527 215.36 396.1 215.242 395.671 215.089 cv
396.1 214.936 396.527 214.818 396.956 214.707 cv
397.384 214.59 397.812 214.5 398.24 214.41 cv
399.096 214.236 399.952 214.105 400.809 213.996 cv
402.521 213.79 404.233 213.691 405.945 213.684 cv
404.625 214.609 li
405.228 212.918 405.924 211.26 406.732 209.643 cv
407.139 208.835 407.569 208.036 408.042 207.252 cv
408.282 206.862 408.523 206.472 408.788 206.09 cv
409.051 205.708 409.317 205.327 409.62 204.959 cv
cp
1 .937255 .580392 rgb
f
384.958 220.653 mo
384.958 209.349 375.795 200.186 364.491 200.186 cv
353.188 200.186 344.024 209.349 344.024 220.653 cv
344.024 231.956 353.188 241.12 364.491 241.12 cv
375.795 241.12 384.958 231.956 384.958 220.653 cv
cp
1 .760784 .2 rgb
f
377.624 220.653 mo
377.624 213.4 371.744 207.52 364.491 207.52 cv
357.238 207.52 351.358 213.4 351.358 220.653 cv
351.358 227.906 357.238 233.786 364.491 233.786 cv
371.744 233.786 377.624 227.906 377.624 220.653 cv
cp
1 .937255 .580392 rgb
f
366.929 223.993 mo
366.929 223.654 366.791 223.367 366.517 223.132 cv
366.241 222.898 365.829 222.656 365.279 222.405 cv
365.279 225.425 li
366.379 225.239 366.929 224.762 366.929 223.993 cv
cp
362.054 216.633 mo
362.054 216.988 362.177 217.282 362.424 217.512 cv
362.67 217.742 363.068 217.979 363.618 218.221 cv
363.618 215.371 li
362.575 215.525 362.054 215.945 362.054 216.633 cv
cp
370.579 223.812 mo
370.579 225.097 370.114 226.13 369.185 226.91 cv
368.255 227.69 366.953 228.157 365.279 228.311 cv
365.279 230.797 li
363.618 230.797 li
363.618 228.359 li
361.646 228.318 359.915 227.971 358.428 227.316 cv
358.428 224.115 li
359.131 224.462 359.979 224.77 360.969 225.036 cv
361.959 225.303 362.842 225.461 363.618 225.509 cv
363.618 221.75 li
362.806 221.435 li
361.205 220.804 360.071 220.119 359.404 219.379 cv
358.737 218.64 358.403 217.724 358.403 216.633 cv
358.403 215.46 358.862 214.497 359.78 213.74 cv
360.697 212.984 361.978 212.526 363.618 212.364 cv
363.618 210.509 li
365.279 210.509 li
365.279 212.315 li
367.131 212.396 368.804 212.769 370.3 213.432 cv
369.16 216.269 li
367.898 215.751 366.605 215.436 365.279 215.323 cv
365.279 218.9 li
366.855 219.507 367.979 220.032 368.645 220.477 cv
369.313 220.921 369.801 221.411 370.112 221.944 cv
370.424 222.478 370.579 223.1 370.579 223.812 cv
cp
.160784 .611765 .568627 rgb
f
294.7 220.653 mo
294.7 209.349 285.536 200.186 274.232 200.186 cv
262.93 200.186 253.766 209.349 253.766 220.653 cv
253.766 231.956 262.93 241.12 274.232 241.12 cv
285.536 241.12 294.7 231.956 294.7 220.653 cv
cp
1 .760784 .2 rgb
f
287.366 220.653 mo
287.366 213.4 281.486 207.52 274.232 207.52 cv
266.979 207.52 261.1 213.4 261.1 220.653 cv
261.1 227.906 266.979 233.786 274.232 233.786 cv
281.486 233.786 287.366 227.906 287.366 220.653 cv
cp
1 .937255 .580392 rgb
f
267.451 219.858 mo
269.337 216.137 li
271.401 216.137 li
268.403 221.658 li
268.403 225.175 li
266.499 225.175 li
266.499 221.719 li
263.501 216.137 li
265.578 216.137 li
267.451 219.858 li
cp
.160784 .611765 .568627 rgb
f
277.744 225.175 mo
272.539 225.175 li
272.539 216.137 li
277.744 216.137 li
277.744 217.708 li
274.456 217.708 li
274.456 219.691 li
277.516 219.691 li
277.516 221.262 li
274.456 221.262 li
274.456 223.593 li
277.744 223.593 li
277.744 225.175 li
cp
f
284.965 222.665 mo
284.965 223.481 284.671 224.125 284.084 224.594 cv
283.497 225.064 282.68 225.299 281.633 225.299 cv
280.669 225.299 279.815 225.118 279.073 224.755 cv
279.073 222.974 li
279.684 223.246 280.199 223.438 280.622 223.549 cv
281.044 223.661 281.431 223.716 281.781 223.716 cv
282.202 223.716 282.524 223.636 282.749 223.475 cv
282.974 223.314 283.086 223.075 283.086 222.758 cv
283.086 222.581 283.036 222.423 282.938 222.285 cv
282.838 222.147 282.693 222.014 282.501 221.886 cv
282.31 221.759 281.919 221.554 281.33 221.274 cv
280.777 221.015 280.363 220.766 280.087 220.526 cv
279.812 220.287 279.591 220.009 279.426 219.691 cv
279.261 219.375 279.179 219.003 279.179 218.579 cv
279.179 217.779 279.449 217.151 279.991 216.693 cv
280.533 216.236 281.282 216.007 282.238 216.007 cv
282.709 216.007 283.156 216.063 283.583 216.174 cv
284.01 216.285 284.456 216.442 284.922 216.644 cv
284.304 218.134 li
283.821 217.936 283.423 217.798 283.107 217.72 cv
282.792 217.641 282.481 217.603 282.177 217.603 cv
281.814 217.603 281.536 217.687 281.342 217.855 cv
281.148 218.024 281.052 218.245 281.052 218.517 cv
281.052 218.687 281.091 218.833 281.169 218.959 cv
281.247 219.085 281.372 219.206 281.543 219.324 cv
281.714 219.441 282.119 219.652 282.758 219.958 cv
283.604 220.361 284.182 220.767 284.495 221.172 cv
284.809 221.578 284.965 222.076 284.965 222.665 cv
cp
f
339.829 220.653 mo
339.829 209.349 330.666 200.186 319.362 200.186 cv
308.059 200.186 298.895 209.349 298.895 220.653 cv
298.895 231.956 308.059 241.12 319.362 241.12 cv
330.666 241.12 339.829 231.956 339.829 220.653 cv
cp
1 .760784 .2 rgb
f
332.495 220.653 mo
332.495 213.4 326.615 207.52 319.362 207.52 cv
312.109 207.52 306.229 213.4 306.229 220.653 cv
306.229 227.906 312.109 233.786 319.362 233.786 cv
326.615 233.786 332.495 227.906 332.495 220.653 cv
cp
1 .937255 .580392 rgb
f
318.131 225.185 mo
315.693 225.185 li
311.757 218.342 li
311.702 218.342 li
311.779 219.55 311.819 220.413 311.819 220.928 cv
311.819 225.185 li
310.105 225.185 li
310.105 216.139 li
312.524 216.139 li
316.454 222.915 li
316.497 222.915 li
316.436 221.739 316.404 220.908 316.404 220.421 cv
316.404 216.139 li
318.131 216.139 li
318.131 225.185 li
cp
.160784 .611765 .568627 rgb
f
322.017 220.649 mo
322.017 221.661 322.208 222.421 322.592 222.933 cv
322.976 223.444 323.549 223.7 324.313 223.7 cv
325.843 223.7 326.607 222.684 326.607 220.649 cv
326.607 218.612 325.847 217.593 324.324 217.593 cv
323.562 217.593 322.986 217.85 322.599 218.363 cv
322.21 218.877 322.017 219.639 322.017 220.649 cv
cp
328.619 220.649 mo
328.619 222.147 328.248 223.298 327.505 224.103 cv
326.763 224.907 325.698 225.309 324.313 225.309 cv
322.926 225.309 321.862 224.907 321.119 224.103 cv
320.377 223.298 320.006 222.143 320.006 220.637 cv
320.006 219.132 320.378 217.981 321.122 217.188 cv
321.867 216.394 322.935 215.997 324.324 215.997 cv
325.715 215.997 326.778 216.396 327.515 217.197 cv
328.25 217.998 328.619 219.148 328.619 220.649 cv
cp
f
374.646 297.62 mo
353.304 297.62 li
348.749 297.62 345.058 293.929 345.058 289.374 cv
345.058 268.032 li
345.058 263.479 348.749 259.787 353.304 259.787 cv
374.646 259.787 li
379.199 259.787 382.891 263.479 382.891 268.032 cv
382.891 289.374 li
382.891 293.929 379.199 297.62 374.646 297.62 cv
cp
1 .760784 .2 rgb
f
371.032 291.214 mo
356.917 291.214 li
353.905 291.214 351.464 288.772 351.464 285.761 cv
351.464 271.646 li
351.464 268.634 353.905 266.192 356.917 266.192 cv
371.032 266.192 li
374.044 266.192 376.485 268.634 376.485 271.646 cv
376.485 285.761 li
376.485 288.772 374.044 291.214 371.032 291.214 cv
cp
1 .937255 .580392 rgb
f
358.653 273.149 mo
354.951 273.149 li
354.951 269.446 li
358.653 269.446 li
358.653 273.149 li
cp
.839216 .0941176 .184314 rgb
f
372.998 273.149 mo
360.281 273.149 li
360.281 269.446 li
372.998 269.446 li
372.998 273.149 li
cp
f
358.653 278.086 mo
354.951 278.086 li
354.951 274.384 li
358.653 274.384 li
358.653 278.086 li
cp
f
372.998 278.086 mo
360.281 278.086 li
360.281 274.384 li
372.998 274.384 li
372.998 278.086 li
cp
f
358.653 283.023 mo
354.951 283.023 li
354.951 279.32 li
358.653 279.32 li
358.653 283.023 li
cp
f
372.998 283.023 mo
360.281 283.023 li
360.281 279.32 li
372.998 279.32 li
372.998 283.023 li
cp
f
358.653 287.96 mo
354.951 287.96 li
354.951 284.258 li
358.653 284.258 li
358.653 287.96 li
cp
f
372.998 287.96 mo
360.281 287.96 li
360.281 284.258 li
372.998 284.258 li
372.998 287.96 li
cp
f
283.354 297.62 mo
262.012 297.62 li
257.457 297.62 253.766 293.929 253.766 289.374 cv
253.766 268.032 li
253.766 263.479 257.457 259.787 262.012 259.787 cv
283.354 259.787 li
287.907 259.787 291.599 263.479 291.599 268.032 cv
291.599 289.374 li
291.599 293.929 287.907 297.62 283.354 297.62 cv
cp
1 .760784 .2 rgb
f
279.74 291.214 mo
265.625 291.214 li
262.613 291.214 260.172 288.772 260.172 285.761 cv
260.172 271.646 li
260.172 268.634 262.613 266.192 265.625 266.192 cv
279.74 266.192 li
282.752 266.192 285.193 268.634 285.193 271.646 cv
285.193 285.761 li
285.193 288.772 282.752 291.214 279.74 291.214 cv
cp
1 .937255 .580392 rgb
f
272.684 281.356 mo
271.219 281.356 270.03 280.168 270.03 278.703 cv
270.03 277.239 271.219 276.051 272.684 276.051 cv
274.147 276.051 275.336 277.239 275.336 278.703 cv
275.336 280.168 274.147 281.356 272.684 281.356 cv
cp
280.526 278.703 mo
280.526 278.28 280.493 277.867 280.43 277.462 cv
283.19 274.991 li
282.779 273.985 li
279.076 274.158 li
278.579 273.463 277.975 272.852 277.283 272.351 cv
277.488 268.649 li
277.163 268.492 276.829 268.353 276.487 268.229 cv
273.99 270.968 li
273.565 270.897 273.129 270.86 272.684 270.86 cv
272.261 270.86 271.847 270.894 271.441 270.957 cv
268.972 268.196 li
267.965 268.607 li
268.139 272.311 li
267.443 272.808 266.831 273.412 266.331 274.104 cv
262.63 273.898 li
262.472 274.224 262.332 274.558 262.209 274.899 cv
264.949 277.396 li
264.877 277.821 264.84 278.258 264.84 278.703 cv
264.84 279.126 264.874 279.54 264.938 279.943 cv
262.175 282.415 li
262.297 282.759 262.435 283.095 262.587 283.422 cv
266.29 283.248 li
266.787 283.943 267.392 284.556 268.084 285.056 cv
267.878 288.757 li
268.204 288.915 268.538 289.055 268.879 289.178 cv
271.376 286.438 li
271.801 286.51 272.237 286.547 272.684 286.547 cv
273.106 286.547 273.52 286.513 273.925 286.449 cv
276.396 289.21 li
277.401 288.8 li
277.229 285.097 li
277.924 284.6 278.535 283.995 279.036 283.303 cv
282.737 283.509 li
283.158 282.508 li
280.419 280.011 li
280.489 279.586 280.526 279.149 280.526 278.703 cv
cp
.839216 .0941176 .184314 rgb
f
328.999 297.62 mo
307.657 297.62 li
303.104 297.62 299.412 293.929 299.412 289.374 cv
299.412 268.032 li
299.412 263.479 303.104 259.787 307.657 259.787 cv
328.999 259.787 li
333.554 259.787 337.245 263.479 337.245 268.032 cv
337.245 289.374 li
337.245 293.929 333.554 297.62 328.999 297.62 cv
cp
1 .760784 .2 rgb
f
325.386 291.214 mo
311.271 291.214 li
308.26 291.214 305.817 288.772 305.817 285.761 cv
305.817 271.646 li
305.817 268.634 308.26 266.192 311.271 266.192 cv
325.386 266.192 li
328.397 266.192 330.839 268.634 330.839 271.646 cv
330.839 285.761 li
330.839 288.772 328.397 291.214 325.386 291.214 cv
cp
1 .937255 .580392 rgb
f
317.801 287.931 mo
313.041 287.432 309.357 283.268 309.629 278.321 cv
309.88 273.739 313.592 269.992 318.172 269.705 cv
320.259 269.574 322.281 270.14 323.977 271.318 cv
322.988 272.741 li
321.729 271.866 320.249 271.409 318.709 271.42 cv
314.81 271.447 311.531 274.596 311.355 278.491 cv
311.176 282.467 314.146 285.802 317.977 286.206 cv
318.42 286.253 318.762 286.614 318.762 287.06 cv
318.762 287.077 li
318.762 287.592 318.313 287.984 317.801 287.931 cv
cp
.839216 .0941176 .184314 rgb
f
319.229 274.152 mo
327.042 278.834 li
326.047 269.471 li
319.229 274.152 li
cp
f
420.291 296.386 mo
398.949 296.386 li
394.396 296.386 390.704 292.694 390.704 288.141 cv
390.704 266.798 li
390.704 262.244 394.396 258.553 398.949 258.553 cv
420.291 258.553 li
424.846 258.553 428.537 262.244 428.537 266.798 cv
428.537 288.141 li
428.537 292.694 424.846 296.386 420.291 296.386 cv
cp
1 .760784 .2 rgb
f
416.678 289.979 mo
402.563 289.979 li
399.551 289.979 397.109 287.538 397.109 284.526 cv
397.109 270.412 li
397.109 267.4 399.551 264.959 402.563 264.959 cv
416.678 264.959 li
419.689 264.959 422.131 267.4 422.131 270.412 cv
422.131 284.526 li
422.131 287.538 419.689 289.979 416.678 289.979 cv
cp
1 .937255 .580392 rgb
f
411.903 280.751 mo
411.816 280.779 411.725 280.793 411.627 280.793 cv
411.281 280.793 410.918 280.613 410.567 280.439 cv
410.241 280.277 409.904 280.11 409.62 280.11 cv
409.336 280.11 408.999 280.277 408.674 280.439 cv
408.225 280.662 407.731 280.879 407.338 280.751 cv
406.891 280.606 406.647 280.137 406.412 279.684 cv
406.384 279.629 406.354 279.573 406.325 279.519 cv
406.325 287.927 li
409.62 286.424 li
412.916 287.927 li
412.916 279.519 li
412.887 279.573 412.857 279.629 412.828 279.684 cv
412.593 280.138 412.35 280.606 411.903 280.751 cv
cp
.839216 .0941176 .184314 rgb
f
413.627 273.726 mo
413.627 271.517 411.83 269.719 409.62 269.719 cv
407.411 269.719 405.613 271.517 405.613 273.726 cv
405.613 275.935 407.411 277.732 409.62 277.732 cv
411.83 277.732 413.627 275.935 413.627 273.726 cv
cp
f
411.861 277.755 mo
411.197 278.126 410.434 278.339 409.62 278.339 cv
408.807 278.339 408.044 278.126 407.379 277.755 cv
405.966 276.966 405.007 275.456 405.007 273.726 cv
405.007 271.182 407.076 269.112 409.62 269.112 cv
412.164 269.112 414.234 271.182 414.234 273.726 cv
414.234 275.456 413.274 276.966 411.861 277.755 cv
cp
416.02 274.702 mo
416.33 274.387 416.652 274.06 416.652 273.726 cv
416.652 273.391 416.33 273.064 416.02 272.749 cv
415.746 272.473 415.464 272.187 415.358 271.86 cv
415.247 271.52 415.308 271.111 415.366 270.717 cv
415.433 270.269 415.494 269.846 415.31 269.592 cv
415.122 269.334 414.697 269.263 414.247 269.187 cv
413.856 269.121 413.451 269.054 413.165 268.845 cv
412.883 268.64 412.695 268.278 412.515 267.93 cv
412.313 267.54 412.104 267.137 411.794 267.035 cv
411.518 266.945 411.129 267.127 410.724 267.328 cv
410.362 267.509 409.987 267.694 409.62 267.694 cv
409.253 267.694 408.879 267.509 408.517 267.328 cv
408.111 267.127 407.723 266.945 407.446 267.035 cv
407.137 267.137 406.928 267.54 406.726 267.93 cv
406.545 268.278 406.357 268.64 406.075 268.845 cv
405.789 269.054 405.385 269.121 404.993 269.187 cv
404.543 269.263 404.118 269.334 403.931 269.592 cv
403.746 269.846 403.809 270.269 403.875 270.717 cv
403.933 271.111 403.993 271.52 403.882 271.86 cv
403.776 272.187 403.494 272.473 403.222 272.749 cv
402.91 273.064 402.588 273.391 402.588 273.726 cv
402.588 274.06 402.91 274.387 403.222 274.702 cv
403.494 274.979 403.776 275.265 403.882 275.59 cv
403.993 275.932 403.933 276.34 403.874 276.734 cv
403.809 277.183 403.746 277.605 403.931 277.859 cv
404.118 278.117 404.543 278.188 404.993 278.265 cv
405.385 278.33 405.789 278.397 406.075 278.605 cv
406.169 278.674 406.249 278.763 406.325 278.859 cv
406.479 279.053 406.604 279.287 406.726 279.521 cv
406.928 279.911 407.137 280.315 407.446 280.415 cv
407.723 280.506 408.111 280.323 408.517 280.123 cv
408.879 279.943 409.253 279.757 409.62 279.757 cv
409.987 279.757 410.362 279.943 410.724 280.123 cv
411.129 280.323 411.518 280.506 411.794 280.415 cv
412.104 280.315 412.313 279.911 412.515 279.521 cv
412.636 279.288 412.763 279.053 412.916 278.859 cv
412.991 278.763 413.072 278.674 413.165 278.605 cv
413.451 278.397 413.856 278.33 414.247 278.265 cv
414.697 278.189 415.122 278.117 415.31 277.859 cv
415.494 277.605 415.433 277.183 415.366 276.734 cv
415.308 276.34 415.247 275.932 415.358 275.59 cv
415.464 275.265 415.746 274.979 416.02 274.702 cv
cp
f
352.28 178.884 mo
351.797 178.401 li
349.894 176.497 349.894 173.411 351.797 171.507 cv
355.941 167.363 li
357.846 165.459 357.846 162.373 355.941 160.469 cv
351.799 156.326 li
349.896 154.423 349.896 151.336 351.799 149.433 cv
352.28 148.952 li
354.184 147.048 357.271 147.048 359.174 148.952 cv
370.693 160.471 li
372.597 162.375 372.597 165.461 370.693 167.365 cv
359.174 178.884 li
357.271 180.788 354.184 180.788 352.28 178.884 cv
cp
.929412 .592157 0 rgb
f
352.28 176.999 mo
351.797 176.516 li
349.894 174.612 349.894 171.526 351.797 169.622 cv
355.941 165.478 li
357.846 163.574 357.846 160.488 355.941 158.584 cv
351.799 154.441 li
349.896 152.538 349.896 149.451 351.799 147.548 cv
352.28 147.066 li
354.184 145.163 357.271 145.163 359.174 147.066 cv
370.693 158.586 li
372.597 160.49 372.597 163.576 370.693 165.479 cv
359.174 176.999 li
357.271 178.902 354.184 178.902 352.28 176.999 cv
cp
1 .760784 .2 rgb
f
332.126 178.884 mo
332.609 178.401 li
334.513 176.497 334.513 173.411 332.609 171.507 cv
328.465 167.363 li
326.561 165.459 326.561 162.373 328.465 160.469 cv
332.607 156.326 li
334.511 154.423 334.511 151.336 332.607 149.433 cv
332.126 148.952 li
330.223 147.048 327.136 147.048 325.232 148.952 cv
313.713 160.471 li
311.81 162.375 311.81 165.461 313.713 167.365 cv
325.232 178.884 li
327.136 180.788 330.223 180.788 332.126 178.884 cv
cp
.929412 .592157 0 rgb
f
332.126 176.999 mo
332.609 176.516 li
334.513 174.612 334.513 171.526 332.609 169.622 cv
328.465 165.478 li
326.561 163.574 326.561 160.488 328.465 158.584 cv
332.607 154.441 li
334.511 152.538 334.511 149.451 332.607 147.548 cv
332.126 147.066 li
330.223 145.163 327.136 145.163 325.232 147.066 cv
313.713 158.586 li
311.81 160.49 311.81 163.576 313.713 165.479 cv
325.232 176.999 li
327.136 178.902 330.223 178.902 332.126 176.999 cv
cp
1 .760784 .2 rgb
f
285.024 181.892 mo
263.683 181.892 li
259.129 181.892 255.438 178.2 255.438 173.646 cv
255.438 152.304 li
255.438 147.75 259.129 144.059 263.683 144.059 cv
285.024 144.059 li
289.578 144.059 293.271 147.75 293.271 152.304 cv
293.271 173.646 li
293.271 178.2 289.578 181.892 285.024 181.892 cv
cp
f
281.411 175.486 mo
267.296 175.486 li
264.284 175.486 261.843 173.044 261.843 170.033 cv
261.843 155.918 li
261.843 152.906 264.284 150.465 267.296 150.465 cv
281.411 150.465 li
284.423 150.465 286.864 152.906 286.864 155.918 cv
286.864 170.033 li
286.864 173.044 284.423 175.486 281.411 175.486 cv
cp
1 .937255 .580392 rgb
f
285.028 155.622 mo
277.642 163.009 li
284.724 170.091 li
281.538 173.277 li
274.455 166.195 li
267 173.65 li
263.679 170.329 li
271.134 162.874 li
264.052 155.791 li
267.237 152.605 li
274.32 159.688 li
281.707 152.3 li
285.028 155.622 li
cp
.160784 .611765 .568627 rgb
f
420.724 180.949 mo
399.382 180.949 li
394.827 180.949 391.136 177.258 391.136 172.704 cv
391.136 151.362 li
391.136 146.808 394.827 143.116 399.382 143.116 cv
420.724 143.116 li
425.277 143.116 428.969 146.808 428.969 151.362 cv
428.969 172.704 li
428.969 177.258 425.277 180.949 420.724 180.949 cv
cp
1 .760784 .2 rgb
f
417.11 174.543 mo
402.995 174.543 li
399.983 174.543 397.542 172.102 397.542 169.09 cv
397.542 154.976 li
397.542 151.963 399.983 149.522 402.995 149.522 cv
417.11 149.522 li
420.122 149.522 422.563 151.963 422.563 154.976 cv
422.563 169.09 li
422.563 172.102 420.122 174.543 417.11 174.543 cv
cp
1 .937255 .580392 rgb
f
411.665 170.285 mo
408.43 170.285 li
408.43 158.427 li
411.665 158.427 li
411.665 170.285 li
cp
408.292 155.361 mo
408.292 154.308 408.879 153.781 410.053 153.781 cv
411.227 153.781 411.813 154.308 411.813 155.361 cv
411.813 155.863 411.666 156.254 411.373 156.533 cv
411.079 156.813 410.64 156.952 410.053 156.952 cv
408.879 156.952 408.292 156.422 408.292 155.361 cv
cp
.160784 .611765 .568627 rgb
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 15.1.0
%%For: (\716\753\774\743\740) ()
%%Title: (1509.i110.003.S.m007.c10.medieval game.eps)
%%CreationDate: 9/24/2015 8:56 PM
%%Canvassize: 16383
%AI9_DataStream
%Gb",Kl!#(Lo'lPP50s$HaC8VQip;Sl6kD("-5nc=@Lu!TN^-^lE^0L$p:$@UR3!2UjQ'Qs_`]r8f(;jE='&C?$OapcY>M>ZcATq3
%f5b&4`Nllkrm?2lcbdQjqI.a][R@)tm9KmTmQnHf%6C&^B%UpDeoFuE<>rDLQ#l^uaaFT7Yk^el(fmZ':oCO5T9SYM:i<_F.c$VY
%f*H&];!#/,W!*XgcN:i8W.quhDufQ`g?o]'n'DmFKRPog\m7Q3HIWV&_k!NZ%&/^\/UfklcKh$=]@*f?)da[qdDE'(SK7s:$@dTG
%TH3fG&O,>L_-*TNFr?cS>RGrH50@:I9=b!:698)hJW=jK:D<cuDn6_cjF8[@r]`"np_3XCjNO.5r>ZfAYRc?o3%+n(CkrGp5R.Qt
%,UAM-a2(b+XE4OWU1)]"41E*,W5$Ej+<;rAiW5>TFD740KWC%"Z-\-\lbOZY\`Z8T(:8d3$gm@ZrP'IBTdTtifF*?*gIAjaXE"U/
%1\4s2CI-%Y'@k97"i[GrK`2`5N[sMgTF74A%"$(m[@F/:Dm+LhH^2?tG"4ISTBs%=`c:Sj+hD-O%S4K*RG^<$D+NVf*e8W,BX142
%O0rQ20$<2S'Q:`l5Hd#s,a3mVm^2;f==%5tkODnI6/GQ>q!sJ2'Zf]cK8.<L2bpef`@Ye-rm_U(^"oW(26W,A3"-R[T[jS!poo#r
%^;dq72e\r;'!r5.jE2+ce/R'0DuY+-hn5/*YQl7og<Er>[rL!sm6?M_>4XSl*OdP!.%/gSr=N!pm2*O)L@N6)ZnJ9[IiP$ZfG_YD
%#N5+-2XidB(\Ni8okokpe6@u'oET2G#<Dbje`g01pC.)H;BH)p=I-IJ0;aKffROJ0EAd_5dC&Wer+-2)iEsWYTAbiHjg_G[`pZ4G
%CgmA7a'>H<bIt*d>?PnGS(4IEF7eF0U2h&"".NRpYZqcklU#1+j^55)[M[3G0(ceXruJ>CJC$*G%>s!D@8eI%'9OuSJFY-f=-`1W
%9FX:_f(o1OdTs"HN5:!\=[(gGGEi?<UVEs,Rpj!O7<n%u(R=`JK#M$C2a[u[/]*pFJfe::,T"YJdMXpBA)deW(Cqd+e_h'2Ua9D,
%%]BZ<N;W&ImDaU-);X_'/oo"WB))+gD4%DH6j6I?'Mrh$Zk>7Cemc(u,RL^FN6o=lJuJ/l`EmajMd/V_TYUn3K6-A_p03e9XIlsP
%Xc%Muf+MI>p/]mP;jeFRJ\/9\]!TN0&iTsN9EqOi,Gh#)?#$lY\`e7(.E36Z.@(1YP4hMP7*Okt1en6r!DUs,QSX4AWn1Ce!FBW'
%*#EdFoH]$SS7VqFCr\+r(PFu^AqUFJ>ZMc'dBHE^G>iprQ'IJ<S$);%UN\d2;K^@l?]BN[Xheot?L>E1#Fg/peZ7me=5&.`pp?Vs
%r:;CS^rI0t>J#@<lNT%+013QB]3XYS;n],b[<Boi&k6b]\'^1"ia:NVd"R(4MqZ%Ch!,J.#nCO@aR>Cu-d)?IUe%8$`?ha(`b&+?
%paZFQJ)).P\sA&+5O,ZE70Z(H\]H2\,,h,@F>H`<$f2XZ9a\4kUs!H*c=j^dCn6-m7-WI#ZES[R#[8+1'7D]_oi_R"Yg@DKN$ljs
%G'iW**eYii?o0OHejs[HNSb(/`b7CO]rV*H\+4m-7:Xlb[q>=)RQ[+@dn1u9[tC;9OCje=TWe91&_C\;FmIlK0Oq9tfV*>Q+Nu%>
%7-WGM%YrYL_V.;R(M9'WAAO5EAf/hiFZ>GjpqcJKUS6Un4m-`P.%$DA7:`_>Zn'sE4+gAhU6D]jou8]?R$c($e85e<eEjTD_%&u.
%=X_E\d&i@qXl`WafqCqh_f5F,YTV8-1]j_Si%2?$&*5-iKR"t)BuJ4_\]G9AXEc4<euh92'#&8740oRDAWZ0k#'1[1%eEe?*m;f<
%\To_bO6,N/goSP:/&hucF4lA:oQ\ZMV0FU+0iJb36)7EfILj;jMb:,Ia*d,$;fL+Jek3dIFkSdFaj!eChsSES@I:7h2K+;<e$(cI
%VOCttH)K*VFR#,\EB&*)m5JYp4LH_=DXA5&gak9mR;m#O39=`k*YUc\RqHB)TR4psR,YBb:UEjX-kF^<_;0K=3f`jQ`ULA`0l-b'
%B#tL>Ejqld)7DqTHL8%22)qU:Z4W<L4uWdtM[V_(Z/6KYDZ6Lr\=JF"K>IZ:]s,rAC,S-/8g=^DK2lfK4tSjIgOHZ#NSm8/``8lm
%i)m6A/H^nX4]A%iRE1cb>fDS_NK!mL+QL5GmUI4nl](==[T(395DR7@(ohr"DjX.pBBGK_DO;!&pm$EST#&1ra-iN!N_-PWQ$0if
%E><T%X?0.A--.dt>n6I(<D'LB"FJO_=\RK0/R#A01mhEZ0IL(kL1T!M1g![aJ#?[Tr!1isD^kG1V)od]PN1P0rhRf@2p(\ebFX_q
%62Nc0:/7XpPC9+KVEFiT/EXQlITc5X@JWo8RC8>RGiDEKkF6jR;01K]I/Z!Y2R](!Yh0G;s(5AnSFq;([5qWS3+J?`4eL[UI_/LY
%pTga"/9ne3frT#3b!NuT`n[B<0Pt7[X(JtdJ[]9(E$-J]%%3TiM)SqN@(`cbNgY"L21rrjVVHEubf!i9=W$#1pgD"X&i"5*I#<-a
%cJZP6%!u?Zn6gVJ?Yb*EIe!ugB<p2(5Oi8\^<*!lZ:$3A2XsK:"U2fPJZ(q"lg]X45*q@BKM;A/MqP=8):WElX]5QLVWMj=@><=W
%Xc#fH&VNY?(f[hQ^]pjp(4ClF$_KAUDm7A9cShVGVhK&;i=e_b.]o\?Eipn=>_])mWJGZU8&]KN5O+(I7h\Q\AoXk__+D(oP<VS9
%i]Hr_QAB8HW;5Pel\rbmgUA`s0W4I#O%]Xfi^\EOeC<Q?q@#di;knfi7b_(cD)u>&0[-s-.D.g[g;@NPFe'o'PqH>,esrHCA=Nke
%R>chJG?^kB_ETN"AKV4I;7G!!38V1+D3:&kIQD7'YHeQP.X#T[,sqscbS!/tDi]Wr5iLL38h.5P*T%=N5YkYW[]%@,hPd6lc<h4s
%UZkF;^F^WKbsiJZ<NEg6hDJMu&sOi!Di:^$h?YSK%aS*)@25E4c9PE8oN!2p8u$j#8IirD'F$@41#%REhha*#JP:2%G+rLj@bT6H
%o:7:nPb63@C"*i77@?BM2k>:m10O"$T6b*X01m!(VJYUdo"?Fh>g"SLMiqe-9`A@_fs"M`YSSSn&bE[ao=ZRD]dPfQeSO\CdJjAs
%;)4R6M4^PT@4t4g,,WV[T'o)cn>n!H01r)B1\%5h(A=J5+_'.prNBJ&RDqBIR2#5sU['gL3Sg%bA_O:FQc/N%:,+n`pd_U!9akY!
%rkcP?8Vq>p3VgYYY%aE@B(E*s//c6;\`m`r+()b@/MhI[Fq_LMbjF+Xg9h?0S_LQ_?(4!h[bV//gg0g'@XsE)0rm5,f&g$#?Yn9T
%cItrq[CNJ![qbq8X/<$*Sc%KdqIqd()-HBPf9N7K!H:5]DEa$7q(Tt,K)%*h&#4g'r+dA43N2rqKEkrIYEN*Kl=arn42\d*B)Z59
%Xd;Z5.CFZmi2Sg0:4m8m]LC.emE,;"QN&6[ZZpgi:1#reS8Q7%=q:P5_p@i@3df#nd(\poUDBBM)oJ;Q9o,tf<4\o"6VAkT>GTO+
%V(\TUY5+&1Bp;?-NA$h<hYApqYh?b\A^XhYs$:=CMeUdGH)pEkgI("b*h6acj57M/s-A&*)-]>:nX@Y>+-Fl_!%-N^<L['lAd=jn
%rSFaZ5/i7a92[^6<hRmDG;$+NDO(kj<Rr9[3p^lhl;+5Z$f+uGSq2VI7dT[]D-.PlL@&VGcsTVW/e)$l9[I2'p?\1"24jTRnRe!-
%<6^O]G]2OoRj=nO+l\6^SXRego94Xpp##"@s.+l@#3Y<e.86/5s/$Gb?iQ\#s'B>.E!=n@ehc$Eq3pc"c1dj(C;/g\Lmth1ht\cE
%,?R0;o:<)\%\[LKju^L9RY36Ce?A[[\F?QJCS-/2EKp,KoL/5k<k!o-r3cCS=YIta-keiE1K-%dpPNTSg^9dbRLKP_)Hhk7W,Z%k
%r=suoo8h9EL@t.r/ehEein_![..",k_;\r6bA-ebV)-CiP;XH*<ebGi^?n$Mp-1<slf[XXBWQj@&ZjS'[JG/irV(Uo%(bclTXN]n
%<uOHXUunY_H0XaGOFbM-:!`EDoDI9(J!Sp*n1q)"<;p+:l?.kF0:5Qm=n9#.bfN+F&Ai?'Z[ka%>>EY3l4ct[Tb4rf]dY6;n+MDl
%Skc\ckDU`KB@LW!<LBuDs4H3)>MAM,60e[82orH:<k5nW2*6BDJ%!/?\IjC4Q.pA]LZKq6EB7g*GaTpck)#EM.5R?9&SW"U]SJ*I
%j^7/,Q[.S%Sp6YN?KR*2H/`Bb&hi3$H&66=j.@]\U*9,(+`\jF\Z*jsc0.S0ZZDB)7Ob-Y6L6T^e,6M.M6mOk/if<kb9jN"E\QaE
%9k9r+IbDXBD?$,Xg$p/3b2\f)O7#<15'/Yj4upn9a8&G'j%Ss+4upo,@[`7tnV6#R`(uKJ-^:Tu)s9.6c.3=t2j!A'p8.TP9=Lap
%s-h]/N\2fhjr_A7l()Oq9Gq`?R\.a;Fh_=5S:)SKjpVbheqVl)`4!!:DbmdHd#d4o<@TiY_dh[rH1UC('6J4N["DOOdktuPI\1<O
%2oYjX89ZtEJOu'LX?Mq5O3hJk6<hk)L!^g-`TOa"QQmF]=e(LVoJq"db<Wufoie4eJYLr%&S#Drjs%mT+Y>0gCQ?oZ/<B=ZYE5>F
%n&h']0r?)1RHH:OdK0&R+HMY=L3XhM@O']C)tWY``]T;:Bp+nI1$3b?.EQ)tHQoh7-.@ms=c^nSg6HE^'#&87ZY[hIH6`4t2*\?i
%`&)dAq`soER83X[Kl;kt/YD!2R+"YT.(=i$]qA6Ii`#T:^Fe.Xc(f0i>90#j9;Dp!gi5L$,e$2+gENfsMt`On%M?&:(g7\!ri'jL
%d`h\a>r4A_pC,=)jZJrCXg<3B.Z9<aZ.l$!_`Km7AesR.H$`N7mgY_kH\8VKFRs:#dO:Sl)tXXfIr9:Dcp*fj3UX:NHQe?+ktDH0
%Da2>Vo%`6p[7i=$Pb`&4G0"Hj.*^Z\/kl4eY:LqmqIVBtQ8X)$,%eRB91_0<`)8qgLn"l8-N>`&;!<p[bGK,:+i=MM.9oTok0"'0
%\X\2fC\Dr=b[\2//9gudAff4AUUbY,2sC@i4IVa0F8q_C/q]'Eld=JrD@ap0Z,.3pEuCpFLNE'+DB@*J_mt%P2\5(`4.KO&B-<kj
%7`;*XFS78>FI@rQLNJ^qd_0QWCZk(WQ>(cuj1,S,_A$@t0KY=MA3=iqksmAgpI\+iJ2=q^F+1=20>Dd?#0bWqJrGOE>A#*=Er:O[
%g1aZg?EWH.e8/-bp$Q1&RF7b!mU'Cg/@?mM>Ip3lU$.=T;]4he[UE-)`LG"I1iq?pnLhPDp`sKQ"#/ur6&4kpgmSgrp2=m^VYe'>
%%'0)m?Mgg%%?@HRCn<ndpcM[R>@_8o!d)jb6"Wa/)?710i6Dm41XTFO7]0H.qR0TP_!\CG>L`UkOm1YJLfo!OY]AP&X:j/m@=k>r
%$C961,t_g?P9t-)d*3!j605lSX'VY<W2Sco$(7#p(2i/P1>L:mK^`3cFU4i1/\=fT3Z5NBCs.@Ps!/e!H1uu?RX9*sDsiqsG;jfR
%G*`%K8b``7Ttr4f7UHAS/$[q0Zdijp2^0rYnh4tTk"a<W3(7n\B^QOn7c[+mW2XrtAhJd%CE&LVj;-"2]Qpf0>gZO)p$Te!OQe7d
%WNldI>k#pFAQ2:+cu%0l@5bmE@`g<Ad?8(7@G%\@#o_%0VIA,sOTZ-EmEq#DfjsYda'%/u)qMV+Q28i=Gs476-cc8#6(@Mg1!9\a
%l'#Tm)Wm7DKEWc&0L9<C;!)iZoZrNGQpI<.2E7[2cTbo$VFM^--l,a\&MnZecV-Om2SYH@I(ALR`+QO8Jff8`cP67m;gpIK<<\i7
%E)"5lf^PCXr_*,;JrHRmI`u7PAAMss=VG^#G+a$AROr_^CaJ;Hd];]Rg16\0ftQNW<p&)g5!q7$G@[f!_Bg'M)'Xrp^Eqp4b;.l\
%3W&i.';SQSai)EjXW'dfVI5DE#6*f(Rfltg5QMnOjDD]]]no##nq?[8]$iUe\u?T9)%K24gF/M:LO.M[p4ouI?*:YT1&itB'(/dq
%ZUf9iZBIa1_\*Upr%;d]0i@e5X\$(TW#e^1)4;csbI]bd2sY4e1KUp;<\o0tNEPdP2ht4cK1DMogQb7k/B^Zn'<(LYQhn5^6%b$?
%HJHa7S-hKLKljquoK;f/-6:h2<X?TgKJTdFcF6pT1KuF1+Ui8`#gu%J=4^3U)n"la,_F\T3dKOt*'c#r>KD\P(PD=*6iHT1IpTV(
%Y2f,_6G%St=&jH0;-l/LIl-@Je<\'?UY3`Q)Xa;E%Ht,N_+=AbLruf^M<Zs5nS:mX>8NQN,KE6qJg\&EB2t1!:9SijX]-rl?7efg
%`Cd%79m"p'?3]"_1?b'D^F]dGpXol28[Ea\<1E8Y:nt4!:p<FBNV)25hu9D4?GK?$!;6Y:2"rKoq5]g^r<=>SnK[s9_tHq^EhI0*
%8m@G/5j,((\^c=)]:2Do0anu.&\PWF#&5;QJrt`i"nfB^iL!tJ``BECld`Vb84Ze\74Nkor`bo1#(DQuUR$^cJ4$Tp%!.>F42LXZ
%6"@Z1RsC"'"e%1QlfL#iSaAXoC(HHcO7EIeFB`P)D=--0c>Ds.D!aFU/$Jc/DApU7]WZ%(j2)=qDEG9/5Bs&DkkKem>Is7=&%ZDA
%\s<.h6!iG6H1\YPSf@"7cN(.6+So*GejoD6<Z#%Vf#q`:3r[1RL3f).I+L)L7ig2>p]o9S>oS63:#EC-e5=[PCkV!V-o+'sg[]D-
%$9(jd>q.Fslarak0<X_lEFI(=E?,^AYj`J("$\m:_:%7S)udXfXtr97d"%f'n\4%OoRg`m#)upEYp<nqN)#7R+@8t8S^BaP5pZrN
%h13U,36dKXio`\-hs%R`K>uM5`.8I!7K+Vur:Zb8.f:a8fL1/E/9]d#7`Q'I6B_Yb`3#%;>s`'p+-6E43c0W(eGiGlhEL/-*X&%1
%B!lgt1qKMU(R/UlA5r\-eaV0YrWW?pE[Tu?n5K].Nfk^gX(HfX0>hfK$RaQgU_Z]@+#H#+^K9-[ooTP0.#]6;0(;9]FHXC64fc@i
%+.]imEac;#)2u3\PVA4gQR@C#ds;+'o,W6q$HdtG*!P0M6qmkPe`+>A.K2M0Y"edFS7H+u*EP'RNJoEO^3)lS\PZK+4hFk4ZBM!O
%88#?^kr,^l_#4/+._=31TSnPG.#c(1Rejc92b0Wequ<kiRB<1<3W!:foQporGpf[pB?,ruS:)5R_Wq>r:"U+gY#d0$1eAo&U_*ZX
%9aF<n./K]F)h!o6i?1`f%:p>AQ7Lbt$!D?oB[^OeD^]1pbq:sjHbij/^Kj&G]ol14$s&f6s+(S'DdFi$%X9`K#aj3j!fsCT>H*0d
%oa?lOs#)Y,C*Gg(8`u>d>lF8pTN:MejUQo<1[Kr<<n'rS=4_LjrWO:<?7T(e5qR^Yd*<Z=K20e<.8c\tD.2&B<SH9XAu/eV`UBEa
%!QXiVW/th@X4$dVdQ+?-G@2mNL-\YR+nAC%fs,DC*njOfc^i'eD8S-AiFNJ+Cm<9oZ6cDhQOSc)S%W_-]\Vq^ZJs5kiqstEeq)eF
%D?'qF'S]6j`J,)]I2-iVEefoT2e^hC9;t<J<2,8L-*$>+\h1^@7&?$)M$Yl#@U7crg8_OMMC;k']pA!&@N4"_Grpg]Ij>9L_Kpfh
%Uj2:aKA:J9B/d;*X*6(los!<O/*=?TG#3V].ZO%+jZLU)1g?)!'bU8P<i#uBh5OcS_MZ47JU,:X,hH7cg46E2.\4b3j?'JU\%c/o
%XERW('&p<"4YJ0`!<TF2j)J>VbnYQ\AgHG.!YV?#Y^'CY%tdn9m)1_+a42?YZ0K+sIQhYXe;pU8gtYc1eH.1AEprPoUtkt<6+b[M
%7s;lFU:(P`2Vu!%X4o_/0./`J\,Ye!=iqA3M8G1^Q.PTl(A5kfDRgR<;U"U&#p:)!V@5[@G8==7(sud*&`gNr6Ra:X(%'B-E@7Sk
%7k%_XFR(puCSfK-6<#RG4V@9E]aF%@DD1cJ#XqTL*YA\eg*GjHhgm^?2F+P_\f'^8XK,dC"bR-Q!.Vk!4pS647T=*DJ^p"UljVAB
%5$-en#bP20+G@F?[1_J`d%LO*N_<=iBFW\-V*nJZq_8<=fQF3K(<M3o;c:_$j5^K#)rJujXMo8=Wk.-@8(bV/jQQ&QaKEP.g?Oa]
%Bcb8EReK"YqF_E]/"mZ,XORCV_.8,]4Wi3^kH`r*"mrgIF?Oqe:qCft5XO0BEKg[=1D3hn;FPgnZJE#upS)rEgGj!2P+ks2',ihM
%7g0l&b3Z&Fl:*S\dp0RP\h8/&B68#"lt:u='-Teu[r>/\M*Z9O(f]eQV6Xp-=5WP@/LC_)3mDa9ST^i1a,-hEW/5g"g6nOJm@dr<
%[(-ssLBFrIPNVYU&\86Yd#J_C/W2E@[BhWI94,TA,SR\4"tlj5k"=6F3ls01T7L^O`k<uD<L(>LaeLS-^r4ldX'4l9<dqi;V\MN+
%Ia'j,'$XIb3N>Ip(fd<]bGG;g'p[,iX_AXP^lD`rHEFlR;O']rnr0_#`jtt^GZMN#?cBI&Z#dERbjB:d3P+Z=.n3he646b.[@:h%
%:t@JOgBK_Qe<SZXfbot,/5-'F.8`]nU_`<=_gIHu,%DCVjRdW#\1"82i0psR)KI-?AB1EE)qc\K,;,sl%Z".I?b_3'.j'AtQ`Xf-
%)$O/NiiXle<jG,r5GBjp>HYl;MM;(DM@581Pe6-4QTBECJkl9WTuI[Y\eRrGV]sl9D4=L&<S)!o<][/OmT&@06\8m[:qPTnVA6:h
%D/aD30_KTDU:Cb>//ld\i0REHo1Q+N>/&ZZj'N[X!L,\Kj*8sfs#5sc;N$Z-O:hR'F:;9+Pudl.CVeo3_68!1FdWaYke(4dOJj:_
%,Xn<VPQap,leP\6H,ED-H7TGV)/"4P9fs+moIoOgOc:jB<]2gp.SG?jBr0XrG2-TL;tT3\4H6c^M:/Z*aA?!H'cDlVXG&I;r)KSA
%g$-C:6YXNZN@q;AStUB1o/&h,,dc/0+OHj-lFN+*f')73@B4h-Cg9']_$*.i*-23,<2>]_o@`:Z`@6m4?_]blRE0YI.sdf/LnT17
%2Ct6r\>CC(s._]JjKMF&'A5/S??E)d:$:T*E(jTOqWh>F)4,/_07rn?S;5d5Uaq.QKJtT22HEPr2=kcr<G)oV-a6@Rh!&1V;S2pT
%i\Xqjc(qC#D!"J2\mb2RO>I)mSA\<ik8YB'NpqR=p/Cn:iDWAG4N"f6L#ec!CI=$-[7O52,7@g:MfG^s=T.PH%AcDA7d!s@6D89[
%N8s],F%.P2\:%'pZ<\\fT6=aTe*psrQBY-ZThb&5U<QB@A"f(%)e/)-lPN3"?`"F*="s;-b.<2rf,.@5eBnP',.uCT!);rOV&$E?
%ATNWiV('K[_t#X-S6\@Xru$Ip62N43p1m"W1q]9j_q`7\Ihkp$R`RN11u`MCl^DglaG=)b5USF)U(&W=K$mu%dk-C:fPYC'?b`4+
%X\*(gZ2/P&HuSEpX>Egq0LqDcK3)Htl`Diho]>NW^R0cT`H7%lVQIZVo8Dj:\O*ED$;r=<dFE'A\t#op-I#jR:NQF28^74DT'*$b
%</W2`HfJX9l]')ldfnRr7H(^Te_S5V%QB`T3Z<"2T34[D-kKQ6eg1ZWUTN?XcRo5:2*0^#?p37on9Ja.rKE$&Pn2%kbQn"q`Qe,%
%e]$6fj3ESRS`RhG>P1V&F5M9?I+u3@[eY+0kpu)Qg>80OY;Y.KWa"=<??lpiA_khB:?b:5Hs+(r\c+2\G]RB*e_0<%1fg<>c1Sb3
%D-?-m[s7oMc/.T;'c_)@T006Ao(e(("+BRe5!k$BWP#ItIbO%PIXE_NT2q6c=3\Dg#eYMho[LG'/!m@7mu'EIL[Uq+d[Bgg1psag
%Y(,TJHh7&+iHQmQDKr@"\[AW1)jfZiRqnSmeP^+,TiYRUWLZ=6`38b+PPnhPm-B#-(iG'Mf$9-hh5q(ZPFg^RpBROp^@u\ij4V?E
%g^kUag%omkXU.3TpfZ=QmG9:pGX(U4N`PR*(l8cg=qA47Ik33P\#]4l`N9O6A::5W?p7[B^0^fQ[(5l!D0[Yq4b!7q`P%3&C:/)=
%5Ll+/ch9!$CL(/H\F'.kmq_T705AIFiRu,6p<o:6@INEr:F+lGk5'uD'=r27hgO<31o_(iQCb`m?ZiQd4K5s\C?Nel[&^h8dcHo=
%2-DNEke%#C\ISf:]rBQ5l<C;(&@2<#al:H`:^l04/#M:chSSF+m`)s7gWR<j7oN$lT:L=)h6#hKV2]],cYLPb]s#rRe&DHNo[J/6
%&&n+mH1/C[+KM(L0-<2)6:'MZp,)a6]iV&\b/T))SY],!m)HjPhl%8>!o7OfGBYY8Aa*oS6i==]IetFXhcen9cE.s+NEsoh&),I\
%Vq]Bal.PkGdEqb<)samRYJ62V,E/>0rLtmUJPsH'&IMlT'_K?lLKH%1#\MsCQ;37lV4dG(E]uKJWeKK]O/::XlH>gSQ-.#A7Ha=1
%)uj=)_qW'-<q2i)G#\LPq=Eq+3HS3,4s$=M6U*T=:YR8nd^u7HTs.lVrHNgt<WD$ZY+JuOS<p_1*p^VZVr(eSYh"apoT"B,]e&O=
%4apNd4fZ2+mRU[U&3puo[dn@&T"V3&A<NNF?=e3V\9k](r1_pb,d*3=$7DW'5.'e"VN,$em;LsWS*a"ZKlc;O`j:h/rj$7$*c-5]
%.$m1h*\T/]S,TmGGpSlZ$<IRee`YUSVal,$C/e6If\7jF][05g2O7P4hogpj0Co?aj7ni.kl/%#`[&Y<Vg%>0ji%J,7p?eTiT9d]
%?G7EF.u]+A9enUsgGMs[9c./;%tM0:O1*=e[QEo'p$H2(rFES0Qc$Z2n6MdY]0"atbGTfX=T$A#jVDr:3.=k3!b:iO0,=4F?Dc[S
%7?qmT+5J^i4PPU&lr^FqeYdajIWQ.(QV7$"A*N7'G<D0*P6Q,/ccXuggFYH:qsVW"jRq^)QDrKalM&liifA!EWYdYN2%.G@+7;K8
%0:/C;>2.6Ff1,SPMYjr'G]rTgWkEi]ZgD3B`soLTH+dI3e6T2=799mE<<'M8Yk-CXIN@mJ?[0U%*kpA(Z<56sb+2k59mu("e386a
%'YiOdV\lcB;1VUsr;:iHIIBN^2W5ns0W^7k,+IU/4b((iq=B0qfAU5JT0pAfKau;NZd]'D2pYhINfCq=0_tZWs5635j4<tJdO'J2
%^?e$4T7m#XiM^t8^3t=?]a//_s&s`ZHflgR\f*#>GH\XaV-_SL@k&hQ3"91H4aXs9brn19Gck=7Xrlr,hqgQGT=YVlqXWXs'E.S$
%o;98!^3?ASSPG$VmVM8ReTY@Z&+uLEO"L27]"q!MV.Ol3C5\!6hd"j^G;lN,q!/iIp%@T_Vdu$MWsARSGLPG)^>E'B(uHF)7H<Io
%iMKIuIeAqT/Uo>l&Ic:F`cp9gfMK.&":;QnmJ7dios@^J+G.qL6QfpW.+K@T\@'bSc825;V%L!sNFcqkR9n^^?\l9:P*cE<#KPU/
%&Q8M_51H4fmqh=?qr^BgSAf"+O9u4'=5Rs!bU#R\5B%4O':L,B&T>msq[2Ls?i,FAm"+AXqlfEO/h:rb49:9@4hhTCVJ=i<gE.a,
%'t_!tI6o-o0Au>FXf1kWJ(<D2Dj2G;iinmtIJq+G++N/]NMG>a?P/irFHGf8G4V_@qf_ZC8M/-89r*KuOMG*X$,jMXWtY?Z"u\)6
%n;1f^X!tD"ZIiKZcnRD`\koN=RmBd+ldo%o^XCW@Dp0TqL-$aXP4D'l45LfOfLuDjLBTPUAE$/B+bPG%R7ZWnqBBn4;D^A9&MjHG
%&2d!^XLt<2cqcl>jASJb\8*W3ohPpcU/eH^`dKQL@N)to?&r_k%Nhkrdb#po^`;4fG`J5)Cd6bf"Vg'X22IV8l-8hsXcb_sL+.Dr
%TTDJfofO8q)%9?6DT;Am[R-pcOerRkj!T^=B-WH(.bp'f0<N#?4o_>9irjF>rQNk$0J>(<+f+<QidC@iXnB9`YD/W(UNQ<SpG^j_
%`@ourhE;C?jp0Uu*ShGDZ@DG=pu[KX^U1W=r.M$6YZsA;FQW_'g;g&]Pt00QT+i@7Fq')@A7.8koXqao,j\aG+$4Ve3I",P2"fi7
%*BHE$4PJMh[@_msDgR8cA!5X?:OD2T"l68nek:,k*oB+PFJI[HI.qT"B7&lcZhF=RiKNrKYJi2s'V+oi^Z'F?dYfJsme;F!_@ujQ
%r&bR2._Jo9Yitjp+0DQ<;`m2r"cp,'.C@'3;VS,k*YbaN`k$7;*=0D5o1SDICDSTa_<&pbqr4`cp?MT4o"$urhKFX"h%\aWFM+ld
%oqa%L`H!EWMqSPc%K>)/lI,PoD%7"#6oS7YM+CL#30)260ab[+s80F?GRn)o`_PjfWO5d=])40$.)h;f#_eMo`eZTa`fP9=:IUd.
%@g6L#/E0ockgDXh$"uM>T5#=+90p2'X9Ai)eg#HWa*baDZbQ849Bg$8GmK;uk`c:%Aj"gn-jP:>\a)U*"VV;Em!+V52_:'nU%*%;
%0#^Z^&F>a,/f+TYdbel&l`6SY]l3V<8l=.8DPqcg<U\EX#crsWXc(M0Nr[.#hrBMXBm1["&m_-e]tdr]Q<$44Ig."O/=R/V^OIKB
%2BQW#Aaf7VgO"5"![G-_oSkNJVaWsh?$j$Z*FklsmEFJA'e7T-#R%Voc\ki-W9MKD4&MCC2%R"gr2nn\^KcUZ6opB[rUJnJ7!330
%2bL/4&@rsqS*M^lhM"gGE@92<29Z'f(QNZR5KXr":YNhNgH.S(i61jr5<i<;)+!fgnUiXsJDi>,6_*keI/>qK[`!7!dl8oX_QKT%
%[,09CQ6Y$26:5,N;%IR?gXjL?b1hp4G@SJ(o&@YP\%;=.puYrt*@Tsqa/dgL*8\=lH:Ni?5.po(ZD<JF[H?%X.Js/Qnn+_;]_2!c
%G3/VsdaIj$&'q*GmrWb;XaY2S(LQU[;>MrQ(Y_0`7!?q91QaA255A0*IM@\+J`.:aPYS@=.*XCA.o4JLPJ^L>.N6=*!nWHCAQBd.
%N1[;<?F1f(:E.;e3YN`@6)Hm2:u".CON@g*adlo)S:?QS>F[EQHXX!,;PT)mXZDVH4s(D=Z'5Crj05l'o[l0^kH's"8b(Qt]DLD:
%X5K2.a$34tATO+M(/X'/(mA<l<^>dc?Nknd[sFBC`KU>eh2R\q04L8@bKeP)mbN.oIe<0'X%m*lCTGStTQNH40,u#dIG+Vf[-2ZN
%puR:b)Ok\@3h5dUro!Cc?-oUX[Q9h7E_G0;2ijP<ZEOBf:=h=DrTHPHr*]1T_2=r\n<(rJLmdPiBs#$RH=VW9DB>-NFP\RPT05D%
%hctNCqS$oR3e(CR^RdYf*#P8TS;kM4p57`0%jZO`71Qb%NupRR96UcN<l%qlK8.+Q3\'NEgcR+#I!Me0=4Vt(jRP:s?5u2>IoJVB
%pYZtrZ="4:qP%'6+4aINf3\KeV"lY2#"7V//N:++U0>A+<dl*lDhGX7l'8]Khcio@1cHOjQK$bZk?F)maS!sVf(o.;Bu0/m3FE(!
%VM7CiW'r:fUG8L!^%:K88eJfTY25ie&+E!D@4KI?oSsA;Dr3-Mp=`<A6,M7_l4P_D/62!qGW*!+=$O)j'EieW:gW?t@nC_O$N"Vn
%0/qL@/]DcFC9b2EBQO.<gB2,+V)]q/Ih>ZAi7mCKF6E/kNb9D'hQ[Wf="e$WC]""OGmKVZbP_(Cb0`N6n17S+mZ?FRG'j0NXWKRL
%S.@\cYIEBQZ!/gl4(#K#h=0lbKsmS(d^gOB$Cnda;RgIZDQMW-Q$2jShk@aV'c.2Uq@^7FKqIa%kQ=RU*&CV11/F%0,npO&c+@VT
%Ri>.-,qruthY*l4kpHXA_mst-`_pcil#sK/4,&So<r(%9bKm.V]SlFnBVG+.=.Q0800[?-m:ZI)Y^KbqrPN]DT6>Yt?G8),l>$Lo
%jkaX7ri>&/r_r]?>/_cS`;X,LU$iPY(nP?o)_btIXBeFq4^Zlip[UZlbfTYs:f[)oe%An""&FDQ_/MKNZha2q2+SQ'kkJSii17=%
%Q!oI.enr0*oQD"Y+.J,nT"Hlr[,'%i)kpTE1-hm*YI3l\l%>`Ym>^4g)n7$T?[TE9._U4LG5;'X(X)$o)ro1P]l<K:l'K7an$j_b
%39Q:0?*-<@MrB`NAL(0WE"m2m(A@]JDsLF&1JC`*-Pe-_>%goS5:tn4>pe<`m99J+aQRagDJhSI4GG$Kb]E40?!ZrLr2^mt/GgFi
%T7@QrgYE+HG@[K+I<'5_4td]^Rnlcdp?qc+Xg06_7-;D,o?p3Mj3dgZ.X6p+"6]Zs;mX,:pj-9'HFE5iK2T9M:@*02L&MK]Et?4Q
%C?PSWp;7DTh-c?L017rP2r:Ej["ehZkeW2*=^`7sMmF'C*fd!QkMBddIf=K!E,`S'?i!t+G]0gU=,VbWlXZos%GAOLDW0g9er)lT
%q;\+/NH-nZb@/oYW#[nN'A=N[,Oi!/p&24@CW?+^NRH"Ra(BV%q*shB4oN54-L1%-(IbEm^'0k`9lHl5HlPRt:EIEHkcC"lG<am'
%80]Yh)rL'!hE5+mLPm2Id!*q*`mSTNVC%G.d*>7Q<dF<7abRT,IrHHYHNnn`+"88>@,Doe5-0AMo8WlEmcO>YK"%I=9K5jmU@Af>
%2r%,PYI(\%*PaN0Fua,c=b1RsGS_a4:Pb`DhL>.C_eoZY-LqKbm?E2E7W4+,,=geW,?t7tHb]2^J)*mNLU/?C"o\9)7El2O92iI*
%l^b0@G>%\]'aMFUf7R8+g,JjBdg:2cL<P:8Xj8i?6nuh*H2:'0=%4l]*Q#/*;ai9hp#]<R7kkN!IIFf2521An!GLk<A-EH,<F=^T
%q5&'.rdMTR@d2`T`<O='k0&g3/R^\If1NG$IlX4oMdY1=5Mn,#/Np%t:Cc+FlR!T"IHf21i_!(F##RPYj;rf#^03/^$JT%;l,D8H
%f;gXkgg,ktGL.-+AlNJ3JS%kW*cJ32H*Iff4R\Qe$AWhh3r3f.U&=ZpfX-FW`Kg,h[A8tfK*/Xbm='GpM0g7,USe_?6heh<#40A#
%cRMooF:!]kXAq4gmIr%epYDmRQ/g;1m7k(^@WAZs$gDRfhOt$_<=4$?niShP(^rP\T6.iNPW'Zga5j7UXiDjp[NhNSK*P%F2HMND
%_I6r"BBPJ&quu5?_Y_clrLdJ1?L0n:K98\LUlCQ".CNr"o%RKOeZ-YHq1>>Wr%&Wo2Hst#3k],\"EBs(\pmh^DH/;^O6`iHGJi2G
%[Qg>MDF_f5.WPYUb7UV`bF;\E!`gFn(PAV+\SS=h*+q9pa@`Ge.(hkgr_`3+I:G^u\O;WhW&@#5&o7#$'^-mk/ng"<W4]]I>:W!Q
%Z[]6Bpj.=K3$#9m/WCA*l-Dkd8t(sr>^X&d\%V^IGR*LP=-Vg.M,`Kd`cCN@*GRce;*+Xe*#=&%GkugNj%8Q`dO4DEIQX1*JCs;m
%1;Tq@@o.u>[EhHX&"bubB)F3[BY@R8Q5=`q)p[2jg+(k""apsanMc6HV&+@$[)'U2h0JbdXMDhf@F&5SQI35`CqNhunEIS_3bs1M
%U/XWt)V]N.jW76#oItQ>][P'5^(jt'HK<$pJ6@DXgXY.d%&:K6kN9$f0#(LAT.I`]96;".FM-F_Z+ok7:Yhb"^-h[&IL%1.l(p7&
%Sk[D].5ZNt<`@e(D4!YVcbX^I*j<8U]R(AL2j$CeD8^Mb2+n['i&pK\UlE:qZ.aQW]t[i9?*7V5qjDt?h0jh%5:N.;T/I>XRBQ&@
%qR;_2L))-j:"16"FM1R$1^cT0`\,CDRYulB1d=F<Z$WR=^7Kg3fR4I9Ja's!A?3EF"MakZe;.fj5M4Y)`Oi5BG96PJ*9Tchgc8^:
%prV1&ZVk&AB[e_p]'l9+DZd`"nQ:!4hl>T0r,@#IEV3s9]>)de`3Xl)l`gr9a;%jediD+c0'MHt4cQoP-8up1k^o,%7l^f4*9,Pd
%K2VO+<O:)S?F62'6)jZMK5]:e=`;fmhcQBH)NOGg%'k(<]cMA[:cn>,Loeg]\X*?k6G*+bZ[GsrFYH57`92?Ri^4^FU4V\]NkR/T
%84<W-4Q,7d]8^RX__)Ig@6N=fT"b52<b4JT708IOBL^[=H8?$O7pEtB,OIbL&@q/eq81!_oCqR2=3A,Fnrc>Ih)qf]pF:XrmJ`S!
%Y1H'11l<bhO"lN69SA8TU$@_.3;DnA*Q$R5JWT/0p#pYCc,=\%SD:W'i$?E=3tX\LLTe6O_mofS'EKe7()sEa0;`<u+7"i!gYuj-
%-U-H12_O0KJ$GY@57]hm/2;s!(u`s>lIfZoW3scgc]E9$b>CKBY$m(%1d#;+0_fR`+a``.]_%t0f@fiU(CaWE-R3M@)+sK3Z^%2S
%1r]Z0&DQhS3Cj`%p_gR.e(4KQD?r_<9CHMF(>1;U5]q[I[`,(_F2-`b/\o,KWIO&_lU+X,fdSQ_b$\!>9!A*!2j?_=&sR&g5*]m8
%f*sk_o>eX9jf!`ZXUZ?D:/QA,NU@s)I)_!teINMFc%u7OdZ,![L'5ike._R[>u*\EU-8cdb?VbJi)KsC]sK<Qd^3&fC%0`1$Oqj7
%P7#41)]GQGe#i50q&B)09!-^?DFGBt4cMF#/ZCdKf<:9Omt9];goUM)BJsf]<1?K=354T^SMhtjn@E,=P+oFVJE2#=lEjjSFE+D;
%l^"4[$+:ZmmCnU@rk$"L6QaZg[=T"GYt3[0b]7=][$NaU4qq3Mgaldt;7?T-9KP<GR6>Mg/MO<GVmUX*(P'Wj3<:_DA&jU^oHpAf
%kCT#pW:MiRohQEj+\GUQ)G_8RK;KVmSd9[2=HprgDO^KHj4VDZK]@YK4'WZH\8G%aVSs2dp#67I%"[UO-E]IqdRPEg;dYRgn&W>N
%/>XM3Y"\@o1k*V.B!!;f8/UA,m$`ec/6sr"H?-ITU0r^%$S/QnV+KRjQ7,A,Z#=nO:Z>n&Z#mLhKRfmaD-*]G.QV#F!SaUm/Ec"[
%J?1U0_5MRPK(6u49XeKje=qU5d:3NWAjXWp"]m:LePWr@&>Z8!VDJGa.'_MT"cOd7]L$'PHDLFks#O%"q?<naP:BKDno\->$78YL
%2gt<Ij"qB*[UC&%]Hds2%sRd0Zr_+r>GJ>\8XQ3h&LZLJ@@6F^;g@[d!cIN)i:L;<pu;Q5YbH\nM^K(H<GCu/Sos^"1=Y8jAh3FG
%1S/_@K],dY<MGmj4XC3+4<)iFr6PL/@"`04Io@CSU6qJnU!goL<VX&hkB+Vbd5tYp)khVV^\qf-9'>h:\\/2YUB%d1X5i+*Q?$b$
%/q!et3N8jG5k2>2=^a_j"CJ.&kH[;LJOgJYnd2J3CV&N!0i'_JH>(Oq/:=eHFZoM^?H)LmdoV%G2;@_]Rm)mg_'%R\IY@siV`fJm
%CQC\L5KIbU^\t'#s48+L]]WLbNu1uf79DX?mNJlj#D:5e*"<ah=9<<Qjl1&\-N0!e2&n.8kdm0dd1&8-RkCFEfO!DiI6.WO[[FUH
%(BD%1pN7%-!Wg;CL6:6-M@._X^cq+a5g=mmFX%^3n,%XE&!.&+$%^[#'!U/s@N[GD0_<$?-m^I_bPR=_.30fZM$UPVJ.g.S8Z8:6
%mR,DEUEUjcBtRpVEFBLgCO4h>:*WP_4g./D0lSenJc`<-W,=-9@5-b*9-Xf2]^*(f$;r9G67%=8eBZgAeiBQ;h9XjN&>Xo9"DoI3
%QI*;JKdtS+!#&^n>)&6M6.ANY.O`l<,ZLe(!gSEhSI"WlZ?qMJT]%tuY-2'.qi2/tij4Vqa99L4%LnWZ$&f+@6)$',4i\bG3Ej@H
%!B"]Wc=9.$fU]-r(jVF$$B/O.6S74.=;n"HTEOcSEXFQ7e0bV)h+K5`5]JHB**,hA@QqPdkkZo7$HobMO0"c3_`.MSBRhA59m7V*
%;:0PLI!uYfV=IjL<&tqs.')X.5[b3q'bF3b!%Kh];7NHS<:s+^."T&7:eF@E6XlHM%dVHqhu;[!(*DX%]I/=^k(pYSk17=>^iFPd
%CIk-U%;#XJ^:rQ13qCeo6+'sf"+XmYB&pcG'WU)Z\rIb/TO>7EKYXha_#f12JoUDQNeaL[#BeQK"]>N,H=l"<4Hs<XQe*4c)7$@]
%,WiuF$5AkDl(G^eCH@D+hpX0Rf*I%P,O?VQ8ss?FL"L,s*Xu?J8AdQgDX([n\l.>m_(O5/T6/ZigMC';Xr(n?6SP>S^5_,;k.#\M
%%nQ4uE`2tV/3WG=Sf\c#cj-eZeV4d"k`L*)6"+AE>S@<Re/5IkXJMie)1dTF'"&"F&0RH8TiCM2YCZ.No(9%u1]he:K$o8Hntf8(
%r=<M0Jd<2da0S@\<2^*-cTj*CH'mSR2OKfmJ.;'#:^c)[5a$9(B;bu>QoI4W:n(BKU0hA9$jDp&^op\+'@a&\.Z@F?N!dR87*Q1f
%>9+QjI=o%R"#Y`4OLJJ.FTiL%XWOdrEaZ-+ILHTM1S$X]-;$;f-u8tj'Vaf*R\rE$/\2*4Q,jY)`s!['Aq^R#>U36hN*OlB%BAE>
%1.E*O5ZL6Q!jO0V/HO.]&nmZjVV$nM[iRm^%bOqfN3Ea)d"n^#LPYL%T#n5jN9?2.3bGmW"pS1^;UE7J"W&<dRP'tR#;PbqLdS6]
%6R37Oefu<"Mj$O;6$;n:_2rMdMhL02r8unG''s3Ic?/"8kgY]E))1JA=(sVu:uBocKL@6VWBa$HgiPre_Ij2/9&gZ4q(fV)Wq[];
%"6[!*#=nk[NpK:FKHY,?9E8aW9,;RLOTO?u=bjQkUX_42Ke4uCJbSCXmDKR`*S$?=(C[8FfYoECZXBY-\eBTD97_)GKd*n!Fp=n'
%VPh/;Q^*`l+ukV3`s77/=87<;K]B+l&<J.bA?hM@fi/@l4XO;4dhV_>$7hbd\7R3D"=2(t=Y/]iCheL?WXLX).oGHdobe5.]+"0L
%LfB28Lm'M#>.S?ff:L=+#RY<17Nnpc*Ys*b3eV0'9tK6d3[Tn$+PG6bTB,53)NA>2jpROh/1TmuU.rnW_]NXA_;L\q_lO9o4ne:<
%^+7B0[].`;eI9Kb/_[Xe$ps^62J(d#i?IOuebH9d>6$M1:sq5&Ln4b.+gEshK<_of'nNX(VrXn9`Bpud]/jaT0(]l=N5ojd?!D5m
%%,d'%cCj&FSgVir6$+edkcCs)#0=[^0*(&B8nasZ)8Uh<+?FJ0eUkS_?`2#q[.E3_HO@\H+r++.+=e,bb"r8qjIZ7Z\:#<\%6`8J
%$ONc3kXlsSVLoCQjroKE0W.cQ&pL"!,U1m6!Ym\M$)jXoksR:7OE]5^'Y#SD].i&S:/WPCQB[7,.T1gU+Lk:FK(HD#-PXo<gU<;4
%Yro6NR]-VtL6:qMMGOEu.22gL'8h=?]G;Nd+G!(U:`/:XR0^r7R0`?g3L=>(#:9uhP>'0Y*asNlOQ.fic\$L4J?*0V9%j??'1**D
%XTiO*m;ksP=XJs&#`=Hk+:CKHB+]>rI^?j>dg]"?Bb#bH9;jgq'ojlVA<@VFZ5SFG$)ik=U>p;&54lZfE*JuS5La,5a&("PBVqOT
%#[m97NZKE_CS]Ai'7g\:2,/0%J/U,aSc`jZ0u<qR561g$g:F4%5u!/cIHgm',H65e#OHTD='%mQ9U]^DY)AF1_1U,*!?%cNG8LI;
%+'ShVF\;m8<L=0<A3g=B/?&h2LC"!CM.;s6kS?$]#f,"^aG?H5Ub!2\W"=j5V_;'/^m,aV6Z>oM-3];*\i'l1Z8A7N[ct(k4=1Z-
%Xd^(V'G(`qR*SV".$/Cem7e@]Acb>"_$c@_KgW[r>gVD;7GW:bMO=O&l%ssV20MD_q3K,2o6cpk<W3A&PuUX:BNW1V0g=$-Auk>5
%#s^#/(P'$0.>;YBVWcP%9dchmcLb96;`N#!a(^hE3m,9,??'1-GBoI(!qi!ro2&%E4WQBa5dp%d;'>-00j%\r8Pc:a$0?#2E8?(1
%+GV'nP;Wq&*RbQR!s@j_YA^WI'O5F+Trr6@6(GLqFdV1\@S8dK+;,/<hFD3M.Hj0'Bs[\j+E4,u7a?'[*gHr&?tom5_)9-,*4/<p
%g43;bXU6gC?4h;`<&/TWYqaT]*!SisGFX,T+f9#WrAd5a>'#+_5d%#Al.TUKJs]co4>@0k'8n!Rel@u*G/5Q$D\N1UF\C?:JgN)j
%)6u7r:lmdr$*ls4KMW>GOode:qZ17'Sh5b;FZ0?L)(AEa5UBpW<6a2kkc^$""=$eQbbneoTIQ::T\,JX*!2BWKW4A4FUVYM3$^RT
%\fE;(.gEl[eSq/m:h(2o65:2C.arCM%#(]57!M::R#5`S:7@ZBSgkf-AOcF3FZ!BGc6AY@S4167_a8!j!iai8_Uq^Eqn+^i-M,#$
%,ePp=#:kjq?0%QM%5pK3,O\;-'&K#Z-G;2A<W"B#JHD!j,eZ!jF2C(uBT"s/(bj%C?g]]8*pC<#q?a,l=@+JMW(=ne'U'^@,I/Eu
%+;dm5.2@Y&>luEm74Osm?pYR,#XD9;!n\k8!EGO>3`&*DOZo`MSGT*+BN(]N))0.DWj7)%XksP<\F,O#J\'dNm-,opR&A&1_0$d9
%E>di4.Nq>q*t<\)9oJ7dcS-(F7q%p7=;>r(G6GjkEAGMp!13V!$)4F(R!:Di&A2mRPgc<2?%ZSPP/e!%\qXUa!X1KM]RYu<0uF(B
%\'\W:p0am:AE_qujKM^+"UJWG[hjQQq.<0X71:m'f-$.aP6c^jb;L(H<AeKE=tPO*';bh76c4R"gN@YT@=pB$#c26oTGkA)Lq0Q*
%9S7,5J<D#g7Za\j6Zme-Jj;B-a,#pt3<Xp7l8&]IE(*c^I1-*:Y0JeT#f'i0XZMJu!J(]49IK7/F(f==Ut^H[n@Sg-"D_BYO+#hq
%LgtMs)hE_oa!69M+<B'TjLDTL#$DF1[.r#`-B-H+Hr9h0j$3]TH_+Y$Lg;2)$-*p4Eb2V9.m^o00[t^4Ns_>iO)%HRN.0[N#>obD
%=$f&BZ6BFA#I9IEN"DIUk(Np@)*T!2KRt.O$2\Jl(3'MV'dhQ'>iqUGBsn'U9X[[?9GFk%5m4K1_^1C]Rf_Y9r5s.&-til7Y0%p+
%G%FYq8YZ<ij%q(e9uE;t9a5nd8'\hY0>,p?5h@3NZ8'LB"]INaG\WQfQENfY!nL[3O4Zuaj]J7MC%F%Man_,30r-AHoTR79>8AI8
%PB>$u79cdT_).uEe,sWS$JI\MS^RIb&/aeHA-4$S@i/J$0jTDtY&CQVaTj-BO^S8_efa,loRj4QU$"B^K+,$d5_J)&oe[[Dh=KQF
%)/>qqNZ`;,79(.j;+Vup*ljr@\D]d,?J?cE$LJgH,73,/.2\p*jVS,@$joLd6<!KOY^MQV1:2/YD`eJZ&b*l-&'Pj3\.&O%R+sj5
%fS49`a9H^Xk-9=Mcoi+9$>]2f;;B#B-jUee-UD1>)889C)NB)q>3lt5Kq`C#\%dW=.&sr=,r(=N@4EAqr,`#M)gTp_UEDf\$ju?#
%7R^,l@43(W&2Gi`)%K[!B>@2L>!mj5r<TS4)Q$uu+7J-:%D@f@Muf'g8STG_Z<n/riV(a!5S_43S5,#l)AT4!Jj_.Uc2b<OeA1S=
%(QEqk]0o`R(dLk`U\\CkS,I>rLXV%+f.!R$>heN'+K_0f2B*[j4sH]3V@Q"%VY"$Y_>_:o7Zc_XCaL.WKror7<]7q0UHk+$9sB`q
%-';*!$!(.`]paVk9]XjC=0Wc?QV_%5#(`@W$F?OTR#+7njpLus?oh?m@;:g8g^';6>Oje+L8its'9A-u*.+bJOCV:;U>)&2F$'W;
%Q\=?t0.[Pt2;Jl41/7=#D@YT(1"oV@NAE4j8j/;sToE[9(4mZ9;R\A90N;Bs;"QJBSTLlK*9=i!.#?i6-8=t;9T7XQ-XXBh^+E5^
%2TXctL#]2tR(*6[VRt8X7!DFXkWAi6<=+BD:.#O$5VN1lAas"L66qZ6n*kHSNSucr>>,%2KB`b2i8uQ/s06:Q@\97qCm#i/<"=9V
%<u-IW$h<_?]8N6FVT0h_'_G,Y`./*6aoXiaiIM3a_fC,;&/k;r(I;"/:OuK!^=^0bf`2JO^F&u6*-;2F5%b^[?:kdi41ZZ,%,1W5
%+GdnQgu[3a&gXoDLq43+6ImiCBU]&:M?5p*<AS1`DgSol'?g-(W$00f8=t"M'[rW7UPfGSC7_;SW%Q60ob.KXIk3mOjUm;-^X5/X
%H')]3-m3>_[16cT$##\e"r#*&FXtm*ib79RY<kBtguG.1qts6>4H*o,dj!csr2)2'efHn&`ld>]`H7n4,r0*-R'A@j1hLigQ,eoG
%Z1@Z%1=mR'7cqkR7`en^bW)$d4_CLKQ,erN=\m%sQFZ^VnM2=QDT'a-+#dfOg1*Xt>^7H0AfEF1j=HO6XOrpGgmHJFX5966Z`k,'
%7F5:bbSZd_*]Jsg8W=ZZZhVS#U_cd>b7\_OijgO%U;h*!@VQX\]"Mi?_r5SDNUX=->(s"s1r@`$lQeTQV3C9TK?$i4Oq2Q&S][S<
%F@N,sgt4kqbcSb4GS8tLEH`%e?uT<9SH($@8WCJ`Yoc;E=sT.$dpd;3hN(014J%3Ra@VB5POLt%BlSD:p;<gKN6l'J572+%\dDO!
%oTZe>TTC(s,<RPi7sJ4e0&QhO42]*ugdUU]fH#fAMr%HY+-TSIG_E!6n-gCpi^ND-icn=G+HfePTZ6Q%Or5I\e>OGIBlSP6*_5o4
%+#gXKg1*YI=F'i>*c$fWiH++#@sk@@AsCUM)`Q'_g*r.JK?&oCKcZ3im5$!,NVC!W=:mcucF>SnefI'@B+YWnrQ,Wh8,fJ4[=:`^
%`U+e+KgrD"+iQ+h/olS3k4(Jp%QB>ee3+3QQIs(tJajcc:dY>'QA?]ENG$M"S$<P2\sqK6%1PU1\Gm^eht;!7M7,+Zhpi_U&sh1c
%+G%Z>"PL9dP"6kl01>R^pFf(KPWgA_K7*Rh]1Qn!',1b0#ZstK!iSWm@mMdc$M2)UYq\kd>e<cO&6,;s;T(j_-[eE)!g"+P!;8uP
%5ZNr&%TMR()LVZqFSk,BW)D_#80?nrpAH7]";CNYl$+`tXjL,]$H<V[KnC2#S]C.p.aZ0eX,^:11sk4k5V:i")FHO0-4?7^XZCjf
%Ma3l78#tX@M$LP0Q@S5Kk((\)#Y>J$UF%*kF)4LNmAa":l&?h47qA<'n31@i%NUlZ[(fWoW#Lsg^nYX.ojNcWPU,F<S>Mrb=i<[j
%Oi1A^\dmW2JDGMe8WF:l;,56Nm=?abX)cIVoM&aO`Q5-l6<%Bn!;D_;dE5OC[s&2LMIZ;l.[mjB>cr`X'$N39aDhV`[TStb&?KrI
%*@\-;b(1sgOf+C:f0(bn!I!,C/f7m8d*jusk?8R434Q$F@Z]j']`nHlnA5UEObJudNlJCO;*b,5N<@i*3*"qLQ3+'5\0@VT.^/PD
%[Q)`*1!8KHd>7I9a(>OS!fN`:0SipM!Ym\O'l;3?LB6XYS/n`@;p7H?MArK']<?cb+=_9AMD(qDcnL^irG1L1Rm*9F>f5PaXU<Pi
%/s_&K*m.X$Lp/S*KchL(JE-`Xh#D<'Z:i?r@"8^cJ,k-.n'\(Z_l(_H"H!*P_GQ7!lKC=@!^rqWE!O)8ZVA5r^*WO(9.7AOEm5X.
%Vc.=Aa0p^<*C,YQ$5!!*(2_p[q:ZBM"<[2VJB$5$Gk/WmZiM\nAY4)$^g6Z:Vgu_]!8mM;6p]TXm0KQjIQfR-pDq@g?#1_jq)X8G
%L@U7E2[au`!&DV#=$Ur9h^edR.mUST3"4_d/D.VOG1"=V,s%A[^-+c)4CLe5R?l2`h_>rY&PtQT]UStQ`,@PM%\?<I1jR%?J1Ng&
%LtqXu4s&3b?Ym3l9TX2H_FW]_-m';S%YMhY71csV@_su2@95uW$t8(A9:Yn[B3UfjSIX"3BW1721>IPkfF69oUbW!&K9AS3#&Yh0
%"U*8\bXg&hW2@,,OKL#;5DA`cS*?ANDKJT33c@>BfOr[sTFjl@*^s/g\'komi[=-#O$J<?2Wr?FJd*'?Z5EqbG_8cT:k"[]/jh2e
%)Rq``(/R&IM]gbu"c/2(d&=D^i@2[CG@b&DiC[]'@urhpjW5H&TIHEA0*0/d..nUKGskIFY(1NmN0<*%oOu>Mc^/s\Qk&=Z5)gX_
%EtscR<OPA@)Q<moc[[..Hq;_&3AIM%jr1D<f^NlP&I5g@]QZ3;C68Kb5)fWonH?;@"`7Um0R."5ojH63&3+TS?IUXL=4FYJ%Qm))
%UJMalHn<9Fa%/n@@P9("JjZk3:nJL:!9?.\Su7sB(oe6:!G'qo5:%e201QUF_^(?`PU,4=7H<(>@p[$op0HY7Jg*a`b7]^MM0X\Y
%ftjY_3j<Tqd%nn#GW*T_qWH`QMOJ"44T]l"7]:/b<10"G4E7(f40f2mBd#f:!lHj2qf`Y2HCj!^:08G3\7Cu%%6KS0@[@&rPB\fO
%-/><CDZGYFg#PXH0pX8t!I8c6;?c(M/)`CBqI(kVWiLscftQs-_(TnU',JfC4>'Lan89[;-R0?Elo@L*GZ7Pm>`E4r<#@_oj-k#P
%j%;7]=GLj#i`S8E=fraEnu`XZK!-^d0f9&/&@n0r&VC+fSNmH,?t,A$WJ%)CJX24IaluA$:'ss/]S.jcSi[XdlB[-!O$<W`ANE?S
%,VdfTU4O@GffB;n\Rao7j2CBo434+Z/b6AjkbLJ.cm]"Wcj;t+7Hrn^FL#nLVf`e5G-Z+QQu[XQlsum]Ml('CSS[r^C&M"jSIfA]
%'i#4Y::A"'8L8Pc#IL#dU+I<p2Y)ZAgJW[%5p<6HXaF-#-\0Vk,`10qioOPoFL$.j<Jd5BL6PP26r"M(#,I0W*'.595;Y`rD9qMM
%7DY/h("!]'k.5#riTLT[2<EJJU*g<b*F3$C<fmSIB,HD"8?4ES9)'+l71Gjn\Wo'hcu3ooIX=Rf>,smENM3A?`U'XBoG_oVWXKi:
%#YhM[W%1]PKa9KbILkH8:MaH39>Vt5ET[]WWJMH,X:WRW$moJ/Mo*!g(g]$@1Ee":ArW.?&\Bp?9ZdXRa%X[t/Kt(L)6nU`5;eWS
%fJj142C;QR[PD;R`B]T@],EV&_a5Fq;'Ru/NKpLU];`eCeg*5NfUGjcV6:ePK%$]u)r?*"R(Q#+P630iJWkc-fc&]i0p'=N_+MS!
%>8^,q,iNao-IL$KE1G3FnfU]kV"/-MVMqn3:(i$)j:9`^5J=rR5K6Fe@-t<8&&Q@_nh<i!VKn7Fj!T.tlcGNn*j.V3ZA7b+RI9%V
%j!K/lk+=A,4tQ#>P<Q'6j/%16m^S)qVL%%I%s*-Rj:Bf_5Q/L-#89@=$-#U=0g4PDJU#CuRg*=nN11(cemcj&&D%sZ)8p'HRgrnI
%NLLL=8RpP?d#af?"0!I#0fPI>9#-]O!9%VuU*MiUn#%LhP41k$Bo/Q@m"]Ff91p-G4=+^[S)sq'7L2a^*&5loW?[(o,`d0dg-GK?
%ECieGV;a]&&>pk<(d;ge$#>To9]Fc9VNXma]&$4W9e@[M$.5QGQP/e`?DaTe&3bQ+M)Uc\R:a=Yj!U;*lZ#it!qA"/9isJ/h8EM9
%#89k3_AsTsWJN!W&#>f,X7;?K/G!l1:L&7j";FoY2[,K);)0On9g`2BfMWA\@^k,X8h'j;)YMUe<"bc>CoOD5,WsaT>'_Y5s%2'[
%VrJ7e.ri77"AA+HP/)<`(>Z!'.Q9?Gr2ja^GtnDHK@rk7ln\+R>MKf+[?%e(iYChm((u_]fHl*jNEm0sCsJ1a-m4@;Ebh#[3OuUl
%d\_+1))0.D?bb2fLEORrbPG\I#ZstS!iSZ/V2P0ar`aadE)J*o?.JKAKEARgT4<\Ha13-b^-tR`5XHk3QkYF2W^7:<W9b=VoEdtE
%ga<d_9pLPXIuna%CmU__nJ:tIGcLCn2]T=G3QDb)>>-Si-?B#T!oCa@J=pK!+I)>`VteH.3#@WKg*Y9\P?Y2?J-i)*G,%IP7-B<7
%*cq[PDYl90,o_"l^rJAtKX0&@+J=,TB0Xmhq4/W5migc5`MSiuKI;cp'nh>FrFl"35h4_$*_U16b5&`%<FqBC_Q%;=$?1I\6fgZD
%<BH4F8;C[*_j(VYi+Uc\JL:9"U->-:*=B2O]O"qIWB^m?*NpP8!=_tQ0Xt4:!ZI=qkXP;d#\"9-.tkB?7R0(-V[jK\CO4*V83l_3
%Xr*UlK,$g(%G/X/':^8U?Rl-ZR&U<K9iEs.B/036*2P4?F3W84>B',.Jf$hW/,&!5ZCmg[Nf5)[*a*_<]%9`)$q3=p6_\q_L%$qJ
%TaB5be[CEcQGh-<$P?t`)Q)N+pHQ::dD[B)m]#f<"KBk1KLJgp#<DsUWW5/qM-c`pn0njb0bSPfO,$'l?H?g&_37QQYAC_8JAdZs
%J]T?26K:'n[N@j^(5W>fU77Ng,Z/OdP3r@"rGiFa238o:c1Vd7&;5R&r,fWb&+cD;#RB^aOZ`I?0ZQdHAA6#9:+1/0p^h6m#6@B<
%5lgfC+J=T37/I=8)2Y.+"L8=g8<OZA#c\->Q#4si,<^9YnquVi`O*9`=MfHUQc*`@GRK%Q1Lqu^dr<!R@?t$4<+-8l<YC.FRV^22
%bT>3[H'dtm5R=<?f\qk:A>-!r%)+!SN[*#0.3M^`0TR8B0UF<YIT1hM?0_KZNmB2XGW$X_6AVc(;07?8M\DgPSaoOkI7i-:?=<)9
%QB>sO]G=1:*s%%J+YffYb/;F&koKnOcaJlh38MWW#nKJ1;!e2ekIR:h2IC/OV%TXrC/<YV++:Hr8_[c1i[j330[[*rQVg9r6@?A_
%g;?9jXtJ"sH_+VFI%QnqA""Eg@#"I_431!+(?8SA!eTlaLjB,7ilQ\*Da*[<qu_T^34!e$hhWaub*sLS09$g+qJ;SZH39e)!<Rbb
%0Z1/7'h^ln$!mmFR)Yf4[*A3FE"/WlaT'dN9:V)>"B9J*WgsJ1\.I$*b?X^K5b%5o&CjK9Ga]+a0NkOP<DNep\FA%0OoU5NPkV]t
%L@CQm>[d9DVFCkZ-Q.P0nEV&9>nS5$BZ(RaR$+=#!Jc3kaF0AO+hHYj1IGKOi/7^VKb(O?,9_*J[;I=KiO`&I%irh,(XhVoP<M=?
%q!NWdGoiTS'qRRJ8]73-US,"iRj#4+b5u^Le&/SRGdFqlPJs;0dWk/qf5,&t8,A/p696_68r2,hb(l#;@WZWnL^0-'[-C&7X:Y\-
%i"&)>ei(m\i,$Lcf/a_sI(C=]Jp=rR,:Z/JgVA(VS"_hmklitL/:BK!1Pa8)M2E:5GdtbP`Yh5+)/OZ@N"Y]'k6F8f6*hks^.CBE
%i`5gP0EQ/#nF.j3cO8ngh.VG0lAPUIp_nm`1XH`^E6(?=q!o)I*5eN.F^:@?P!;!_BYe]YR?sQT@E`hu-q21rUELm^_Sj(Ta`KNa
%LNNgX5E-3fhoAb?-7<3_c@#m8BUr8cps'D#cmgU7!\e_ffc1mM)B*8K4a\MH/H#$*:`a4aI--Y`f@EKKgkW%H^08bAA,noC?GWEf
%;Q+G"3"_B10H$hLO_;8bT<:u\FFH7P+[3W7JIicmqP9!,3/nE;@M9GB7[1&f3+C/Z[B]N!ASdl6fpJT??:trG+CB:&5aU%-;/K!r
%.tVhWnf'']kJ\"+8GlkI>"hWR\.(sp)=VUEK5aX$a`]D3`2U]Hq4SP;kea+2AL8R_VkF1ViBh::(9c,h0PsnEd"(_WB1+o24!k6/
%7hka+(Q=&1]QM@.aAY?_qPO)9?nlW"*.a^C)WEap0bnK<`U'mH@\=aVTn3oTKgF$#=_LJt(mZaC$_F[nET;1+#k;0q7"d.?+FIjV
%HB^>CAP[Ncd.d!H7mGL\kImo!$u]N/%2n(2TZ<)pdn9eW`n$.kD;d0RA,?TfZ?RGl-P>Ej0-9[L#]6pLJ5>V`@*/bGE3SjV,Dndq
%A+A%Kg2>B_*98-[PD*_,QS6iK`>#j\APU(>f,QDTg>]XP1%1c0Op^Kj32'30l#+.Lb5gfjRj%D\Nrj=sC*KYp!Fmb`6X.-0+VdKB
%.&RU>M:`;F#E]cB`h1GX=O?r]aCe.Na(OD/%P`_uR#IeVKkH3%M@?h*L^3#eKIYt]@YUp!UISs.;eS^`qkdq_*l\+n'-@jl"^^i4
%"r^O%<K"=r`"88ZTnn!raLhdW[&uWk@BuS$\8@PeY2eJ>Z+_Zn'Ug1]\dHrT@:1q65TkaC2FfmuTgItWWN)mf5h.ZdARN\#!`T;]
%(SPM64g9T^+;JqP-jq8s1_g99e(eJNHJ'hYU1/`?IZ?W$ki"[:RQ1@)EM&.XRs^SPpg,WT4H2]X='kGl5aUYER[4RpiADXs?T&&n
%EB/\.>ViBM=7o!I_?$9a<KI[=UtqpX\1(#$Xe[l%'de5Kfb%%lRB2qd;uCbWK+ZQO##tMC]H>'1%TNB!\9]W$ET1Jm'IS?[nf+FJ
%j<M;6o\?M9i8-eHgD.r,K26$QX)1f+bk.$7Zqg_o4h,`STo-eSDMD8;Z]L)e_j]o][4NL1]W$VQ#r1s:1Pe1*Hb@UV??n8FP:jGK
%GX[CAG2C/N(t\EM4qLDk`t1r*i*;+b)?DRXK3,s8[K=CV->C4M4`cV1M;u_DRdfT%Sb:@Loj#-F`5RZ"p_ja&-6-@nL@gW\H+5R?
%#!&%T(EpX9*MgD!h`:+3SfHCPT?=]uP>pB>G[0YgS>>]d^uKGHO@eCS&<t1'!0>=DKp0Mpb0$t$.Io,m@=0*FU;W9G$,2cu[uu>.
%./[s2EhN;+l(Y#1OTo*&MKp=E'"SSUSb>+CK$\oJDf/IRA*T+-VhtWYSf0f>m3X,F(Z@+.YorNb);hmqU`ATl<k`<=64JlVn1D.P
%%OnL#Y0cE\"F)CD)*TZ+(J`DhM=C'2M)_>N'M1sX.Dj-gC:\^].iAn=iZ:\`odmahP#jCmD.d6;h#rt8C"-bL_;kcCk[;EI-)Vb*
%cdh+"kL&;nkTs+6A-g]$e;[5k!U_a"l0^84%*<bJ3aK3AJS9ab\iJ$O9?FsQ)FT?\Lb?a0gQ*(3;-ZAdhhMiSj>J<5L-QJAn]!*K
%U$O&%F@@h>DC_EZ>jRkK\>J2[kkj:r]2>a0D]0a(>SOgPY!'N)Ga/9_@cIGprC]G45uF5Aj"i'Y[hs/lK^!Mhn`I@%C5=g'H0C>V
%,fZ6a?\F(e"D[dXW'aL7^<+DN`*;emP62-]V6^GYY/pQCJ9XdFYE8T9Xb7DP%X9S>KdgYi+nXV;%U55X3gDT64C#ADkc/0PG]>aj
%(WR#AEdAi>n97R;i_DhEU;sO&;@Ibl)58DsRQ`21?!;u!eTaRm?CXIibn+RH.MhT:G9S.uSuM%(+@?tP'l*<*6WsM2l/>0/4ID"]
%iB5-2`,u:3WH]!fdk$m._:ro(2).dNT].*jVC*LpcMO.%7Q<jQ=8\^5?_.]\4Iu43dZ);MJ='fbcU[Gm?<O)j');DJ&+S5PLZ@,Y
%J8*Gch(H_2S3A/<TP)AOT9m1k@_*g-(W/D"+<!IM"q\]3SZ8=tY,ROr+E#t%C[BIq\upZg<&4i;j;8!HMZE@.mJH5q+9NdW"B9N5
%/tp8iaL+Qi.EF8LEEi`%G,2H(#bfl\Ds&ptP">r&69N19JTUXnDMjnB3ciMKdUh==cEER9GtlM,8N0r1Q&](el*)/fVXp@43-JS#
%bRF#a6O#Sg5#2ZC0"+^:h3Ao7b_pD7)]ic/ko_e#p@o8<]'G;?QKCRrV(pC6?T@D1G0!t-nY%t?!l6q#fZ"gG_bH&"<Eu&N@J6ES
%rH&'[+D;M-e7,h,D(G\lc=BgdIr#2GgX4(X0RV$p,>I94f+C>`8Slu;B(>;*0j#E8PQOoW_lGrj@Vrj%*>`G[Hj$1gms+uQQD;Y=
%2bG9U`WRuHO):SjlF:;X2M';!#]Um\.%Ci1WBEZ@HmI(gk\afI093P@ReFk`8CM-Mh"X8rgj;(0Z!q3\n>nEZoD;F(]#h";A7qkL
%>+LOFMh(4ATIqN:UI@WAd..aH0FcM5DVCAN+q:QZ&7[&\@4K!>J\#R:/*p8f9RN.o/Y!!q6B<nK-71@/5dUQE[/7L7.ga2-[c`L@
%8cqA(%%cST6SU7Y)(K*(._=mH/@OWg`M]*sf*oB3_8+Zr8a`6f[/,CtnQ`5TpDOtJ[&pORJUpBKOXC;!'Z+m(ahX0;gYu=Y/Uf)!
%ju^1\P:sB]<DC@Bm>:KTb+K'a$_Aj2N(r,-&?_mnOg\#Bci4p5/M2:)M[*^a_KXJhq/[BPeLl5Y=*Vn<eAak#[K=G7(ZjHaih?O.
%fcq?u,3Fhb>qB>XB.b4ti<'1jZu$k$"&M7i`%A-:LnQF[L`fts*M22_KmO-Jc,'9/D(u(Lc>fFQ4H9:Z`)#.pmbqa>\:fGq_-M5o
%K^MErl1?r\*r(aV?@cn><P.JCiUI?3s)6W&Wo>4TB$g(_"KV'8@t%Q[a=9jsTW60)7j*[)5/`AoL7#RV<4!.aUoQaX??G7kfL0?q
%8VECO#&&T5HuZ_O6pVjF<tWC*4\/<3FHloJE/1,5lUn*-cGitnoHC),g7!uVo%V0e'u,rlpt=rN#rJ$01lJ``M8\[G_ZZp,A;l%n
%WU*4r1(LE5oG]m'GhD5dOU>'qZ?YTNZJ=D8A^'(0.`:]s8IAF2+i[3`hLkUkrOn+8r^Jlc[gENH6j`>l6_]9unUmQiPHi"LW1"J=
%!I3DH#c`n(*'r+0_]ub:A)%'@=[-5K6lh=),S@FoKh3QYYlZ57lZf*9C!(\:&lfr*>U!(d$CF@>j+^58-\!@SigVh1_^98Cgq\b(
%mA?Qje/C8jU4I^@n;0[8=90+9*A<'i.`Vpk==@[6;;ubeE<<,hLN(ZC.YO^R<!g&iIIa3rK4.am*`'Y#RDWEGQ%UO=8I_k$n_Zte
%1c<Y>'A\;7(*@lF#e%[*$3T7Q\E%'@i8X@lK-;&Jdt029#sK2LV4o'\.?C:%L0k3.3rn:Cpg]%d>^=O9/<u`Id7-X3;Za6M3$F^>
%TI^+>C1_3g[W(dr68Lf44(`HOa-t$Xcc"5f0`s7`pimr#+,1gFdeGNo5a[iafKn%`%G+]qK)lqc1iCCCE:S4)2Qf2TfZ)W'?Jq,[
%;B39E1@P'jQ5[apS>6C1$$amqVZq36G[dJF#'<F]U7Kf,/f"D8HIImapT84^+Z",#;):%gNpM:*3cYPT#Og4jW2JVGTJo#lNN9AO
%+QDVfg`gg)KKB%P%R92L"r7:l4@)7d',nT@b@n$k8Thr2`Bm:$@XJ1!kClZjc^3$0L#a@L#Uc&)LqZaq2d4Yi2#u%oXt:_;n"dM3
%'7gFmO@Z%(QakC7,fU6&4!o3N%0I=a04ti))=7`#Dqh0kr&jVnGW%j+9@sFb8-+]?Di<5@E@3,OVSos!BMW:EiTre$]nh4:Ju0]+
%)CD$/5aPRdi?B9G&_V&Xd08%IE6C2SpIVhm+UEg_P5s9`nURPW6[=Y3+6E,s1mWs@F[#-8Og$/Rg",XF-qcNA]L<j5s"ea/12D9)
%7h\\Y;#k>".mOr8niLP&6AfI-ct/`H@g!$QU6AYh:E_!L@]!d.fuSamMII,G"+3!8-7OlR/UA/Te+q98?<j5rDEMQ^h8,a6%MU(`
%+G`TBN0:Y#/geI,?^<=hX[h?<k@qe[VUo&fLl;.B*P(YdJ@Kg=_U^;5RQJ(\#u_Lt+l!Z2pEbB"?/@G`)``YeXs5hU:soH`D:A"i
%Lfhm^)f-]H"]b24+NBDT_1A&oq$,R7i6*DWOI+-ULe%7"7c!4;6d/:&KIZkN-8d<RdMl1Kko474BT);9\;$U4ieNIQPd!13VFQCN
%=)>'ZFZ1M^fB'YT416GE;k>%I]L9c`d7t4m;]r/@I)I-[#(`E,9E,T:5ZB4?\pD(MDi]Gll^mG3jZGM]`EWLg"_LUHi^UsL'0s.A
%$F;[[oO0Jm_7"1j^Z$ci.%A$r^.3)nq4>*X#Q]t2B#F15!MN&F=-#N#(/l>DbJXZ)O.<SMfB:LM=OajY757"5hD^,:j>e,C"mb@l
%%,fJELU7J5!+C+TVAHqIic2g<dlW<)arl[+?E*%T\Wkd?IoX].Ds!c[VJa>?/R`KAF>!Y`h8&%VUfS$]`u>L'L-hsnH+l?SW76mu
%P0bltg\s&b;hSI,2&H=M^^IX.)KJ+O$s>gAi`&[9DEKu?b=O4=U-n=+;+km8Xj#]4=R9.j:p`Ncg-V0]XLa8h%In5GGWGpcp56gP
%5/]bTQL=A4HIH:aJX^!1>",'#+G"4#'MDAnisOhecW`abk<$6Tf`E?!-Wf@T`FaP=1dlsCqNeJth\Es/>t0\KJ:DD>j(]JMWU!u;
%L7]]&Hl>Y6/V^9Aa5)a/2,I;ZE9juI%R=;^m%FFDI7g*\?+fe@WPOq0/-aILOgM!^Mcn<43,YK1WuTBL2V%@2+>P@"X=Bp8\:>3a
%H5';6c]/HX.cP-G#EC%[V/2:C+d51NUqk3=Ct6Y<_#</^.mUOfX-6@<D;d9J,+;bIS($;_Gb?J4j?PokWE;cfgh2f!QH^<Zb:62N
%?t)PUri4r))cL(3+L:>8.%5@T30KpOiRkjk\:V2$dN)/qbSAmli/?^f.9a0kNl_m3+)MGI$R6<-9p;W41"?1%m(H\c,tW,'p+Cmq
%TjA"dK";j!*O5JuRs^oKq4JJ4=@*Q'7'<JbO@_dg&.AG`q)N'LDB9D!\gf5B<s),,0W7#If0@Kobg"CmB`e"0@<lSle@U!5ZapQS
%<8Rg8YM)8jLFCsGS#r`?,%TQ<EntpE]e4mko^,[a[kD4Kr`]"0^5-J5c#qA[lM"C?4dV>'UMeJ0i\tf=V;tHS_JGXt]<CUMI'\1u
%XfME`].0-L_3TKt1US3/:;JRlCDWr4P&M)a6gUO3JaX,pP7?9Pr1+?BYh&D;aacS+fU[<(0WZ(D]`8hOJ\c_,NqXI2I*f+$@BkDa
%[Rc>u%/aWf"_Yn/,>g$XcEK8$Aj:mbb"b%G:P]!:9]Mt]hsQGN-`K?1rJdm>p^q6=q=!e5e^4n!XT.]XB"_n;;IeUu?Z*WD2grJO
%.q@"ujH1IiP%D[**Zu[eLYr7e7iS73dUNn_#/iOT,E68A\Tnd8h\6[-lG`paT6oi74XoY5$0Gb?Y^I_Nabr@@!fWr(?LiY5ec*aB
%ka^j*J*m6Ece2OMFne^V!e3agq!!b<@6FCZ#Z9T@&CI6l0hOr#,fidQR;\R`+;<bJWOq.%X$H%RX_=`P/PY*PDnuS:^-m]u2(UP8
%`NV;hK,O#!")CBA%X!+/ghE'daBT%Y#iOu)>DKKJ\'fG78^\EO>L55\1h`>^fXUW`cl1b#"rR-DQX'tPD0bOkIm!mNCWQg[-P3<q
%5TUJ-&@B8']HJaB#OhqDMU8Q@)oi2<Zc:0uQ8!u9nU`)*HbUsKRns4GDT`=)IdtKF*[QMT!cMGMhAsIuK>3oQgnmm35BYesJX-GE
%fYG$!j&,pdFV7$/%I.k(ifQK0Qp`2-'q0F?1(6&!(tiLNcZ[C>k(l"`/Z8uU,KCtrT>G62_=M0t1e@`SIkj+^Rt)K9TCT/'_'j-;
%.i!;0gEsoMqO6=]#4JSbMV92[]c\)1fWS]_!_,6,__QWN+K9M#Iaq'm9*?KOXRoiI%SmEoM-(_d<l-P?CF0LFco\?cYPa[Tm9-Wh
%,T/>!$uDgS/Yo\IlUl%n_C10tW\T>2j_PjJDZ^2:*o<N*6uhYq8aI:<ko*noD18.J6XREI$=R`0j2mZu@)(a.KMFr.I$Z41SZm%>
%k4L;<MDlM?i)ijprPJa'1k/M;Xm\3bc_@/h'pfZA$h]?`0t:H*4_h&8>h!1r*D7`rhQ:eiF3T62:K\.iRb<A9HEN[WMpP]`WV?>'
%@.[lM>qk2k:>%9;4SGbdLo_Er>DEhe.gE:ZhmU()&;u2H]X_MJXXVid=%j8s]k,/nEH,)]9Z!3bgkmgoX;LodZ=:35A]8=%k).Pu
%c5!+FnLMV*m8o7(AhFsdhHVfcj(6?R==btW__p#'NojS"3p(n)f];N0`b*S"0k66''r)F^=YVsGQPC1P(N$=B$*;U'S4ESFq9YNs
%M]4Gn\3gLu-2,f[3j^i.7c(QV(pAUF82h"+9SDN[8OZ=ObH]M$8<O^H@ja,[oblpfJl<2_g]#u"d1/3]m\#[,:*%h0#J?Wh.>S.8
%3H[Rf6%Ue?lD13n8]I`nE(.T#BUh-M4ghnIlB%D<eEHnaU"qJW3fb0,aTS1#"%hQLE[MBBX6=EbO.K\)cc)N*_&aI`>D'KK\?cE)
%,N4DBHiU10VBY:jXO3Zr!DhAW8t?1uR<RV`k>*4F&.)d^(qTcS%dI=X^&\<@"koM6F:ARsW[Vk9VK!)kW\VG5'\oL:@602FC`Gje
%Ld;^14GZPNEtHiRLW!KX+lSN*p:hNZi3sA8,#\]0&^bj*2IVd6m'=ga9nP#a(/D+<]_q]p_oL`"VL[0`YC(bNgdjeteK;4LW?6Z-
%G6'BUp>,1+I^_c6E:CMW6F:lkXW"CA_Y#5!=R[-l)k6aXNAhDo$PfftH2\Kj7B5ZI%"TE6``;u2\5n1IANM.Dbn3MI!.$6r0ZpL>
%b;]*BqaC]r*d'd.!^#p^)$"p<.Ob_Wcm%Y$&o0%tYNQF\5XBoV1+4sV:Qgrp2(0t4:D%F#=>'n<!ULZIQ\0FHoGcqHH]`FtVMq<*
%i%sI23fjk<19Qj,\4s[#P7!]jPOUsC]X(]89R$jsZfsoUf_CD0a&5k`YEH(DiVcDb*"@f@>LRCN3*g:gIDce1YqE%%U7D3]=H^MC
%#o(K2JkBXr*F,)'0T>8K"F5N>6`?&`0/A4Ri8,*cCHr,op3(gTasd74QP96UJs,RKC4+A39<stLjTQBCF/A9XG++EfKW?lI\&?n6
%LAen7W]otua?L\;p;_kgnNJJI@>1++a9>ki&,">bp(FY^NFSaV]#[d\Y2P_j@K.b]IjntUFpC6p9p)?r+8ee_(#=;%QKu&m>oL^A
%&p(UY+.:>n38HQ01M_L]%1([KadjIf0+7[A`ed)$\XdW.'a8O#SQ[n,E]=OeA9OVaUHeX<Ugh4qpp6SQaHF;X,)mG7l,T48lrZ5F
%r7PG_c:EHY(T(!Nm\DL,dhVQkl.^2ac[NGD[e8?GG;;A7NL&Y,aYu_*F&>G+J,3e?JDlL7TDf_s,fc-H``$Y&:5ikJ(jk&s%q6ri
%7X+Q=GT$d)0?BXHq/_'BL+]Se:jNNkBfZ%[hBs4s:+A#6#BpCff>k7)6Ks`UJb+YHM8D,,O8>$)E-rkm'qcAjDa*u0!V?0PQI*9o
%c6["fK=Q[%r\2rc^Oja"jK>.s&_Rn@/0_WVc6Y<NTQ::I/*L5(Fp4EeaKD1G$2H+8>XIic3gYq660Ald/*L5)o*XcKd(G"B-)>`[
%[tG`q95%X!h%H1N:q)+Z-$'AqCZc>!=4+R3gg,"S+VW:/6RKmbL?<W#Y+]hUF\>9FDD!%NgpqstQ#nQ"G9re1B[!H\KZ:Zo95*0S
%h%H1.;R_>O)X<X85gClflH^R"?i+g9;SoHK&u;:Xl*!@>.W6`>`M+TIrX+Tpgd?SY81W[3X9rd;B"G/QCmj-DWkadi8t>BMJRrGn
%]]u\fN)_eo'p#=-6[qPM/T>MY$7rN$EG7H;(AY?T)!;W9Usn$+,O(^eKamtq\XQ,mlL`]`6uSV'/ET']iD<o:cbm2p$7pVapZrSr
%4A:j7E[\.o/;];$.Bl?qQB&j3YSjOnXZ-J"T$F-!oa7f#9GCT9PUNcM`hC3EL5>sn)fH)Mm,M&QV^+reS^LCFG)Fd`YZ(+i_2c>d
%"a1BL;deSFheHF3=<o`XpZ</lr)Pq99S4pQ%GFke[NJSGG`mjagB%0B9a)<(-/qZ`oN,2K`TaQK%4!h(csJND`M:B9YD"\?g$,\B
%/)mdEqWh]%s.]L-Ag?'Qh?=P@db)]sq.XYVdn6H@fumjNdN(p8b4O[8A>VBI^d-+sTYJr[MV8uU#5*qM7:NW6fITKrLLnB7`576<
%7(;]A(f/X\@_;RqVoX-;D(]j@k[dIg,s>HREYD@jNZCF7b[\]CYQichVPU9J8<:H>JX_5C.g6LgQ<=?A8.oPX?%Z^&,hA^5PGTUO
%>Y"SZSVl"*,-'k`T2fuIP(FY;PHi[nLW#Q\9eYHWFkGJKC!caG>3Akud&0>jigCQ;%=J^`H_C@7-)6bnX[6;,e\GjEaYZ>Q?8?A_
%3^>@h6a:C[:hj]Zqm6qol_r'bBgU@L_m5$%<T]Zp8#f-]k2A/Ng.]2=b1B_kf3O0Qqjm8+NHe=U>AN$r'<K,8_4;!l6iq!PS4i_0
%Ll%;i+"'V]PG;Y"J.3dQSZVq]k:#E?$Dn4J(>)"4>`Kr6M(lp5cL$#\j!OZE"I]4n&*kbg=cU(@^<C1+ncH\TY.?=&gV='(2A)YO
%YY<A=I8+8B'<tT20FtJ&%hDjQ7e,($fa'rOm\FGIK$:=e_qAp>V3qqB>e77>"5be3@$n+bbCfsT+jL\FQ8nF^@e+c_%iooQn9ab7
%Mk[T(o#V<t207An7:(Cp%=H&i<JfBI@-6^.2/hSP`0u8*4NI`AH-lCFbI>2mj`^[do;u4Fl>-ng0jO40o&SVZA`K25G3lIcm3p?=
%Q=cp;/"s`q.ASHO6)b#^^oG<@#"W[O^1q7O,$.j<!O!\qC";un1u(^7p@%%Fb#gY]UpS9ZJGg8%$p-I;`r'5P2E2IH=XcU=m@(cG
%^g9[c)k^M@5nie*RNPM<pN\iY6M)3</OtL!:fuGOn^6]_(3Js$\@&lC8tW?[P9t`g22N9X"/F6@"51b$MG.#X.aNpdf][4<`<D^r
%&uH"^."X/V1Ber(G_/D:nrt<N6UQtFd/cf)lhIK:qiqn\&.ll$\#U"sL0Q%"<TuaLO=XVMAWHu6#P3-A6f-W=^.:gT>est,s3h>6
%`!.='Ief<P2AHXVL-t_[%EE=nJ1JD#_X&@cTc6>/0F;]d+=1%W%aU;9&V3hY7YPRg'"LA5BG]I"gt6F0,_$iOfBGPl(t4]?1;45d
%(en\.G<M&1UF$3BU1;D%&"kGSFUV1^0>=RI*2UtN&L8M6`!rmogAN8YI=dmb(g5u7du67sp0rX8&ADd+Wi<HFVR$rG,2,qO`gEBL
%*?Ip,8-(:B6fEo-'m+]^RYe]#JK5_nd^[Q&5[U]9ju=1r9b/oeii:("Ku[R<Q4/.c&.H"ZJVUa4gg[n#_p;NSYhm#%WV#hl&t4"T
%7c\48:HqqMmB/CK;a#<1,IFkb!Qim#\9<%G^14Z#jg,(:34ieQgd&S\!S1AD82m4-m.e!Sla\Z5k\:(MN8TMGPf-0mIu[VNba)sN
%6tUEaB-3#n7%F7hJ>PP,ckP8<^+$n)),>ZVS&Y;MrAjPOH]3?X1u4Yc5O<fQqY<CH!kj,]5Yl@S$V'sPmP(*g2!D!q*oG6aIOF^s
%IoP_3Vg!1Un97M(c[UEpq[S*TqYd=9o(VWtNkh2*+4'k^:UsE=h0W>*`c]nhA7igK-53Y4F!!=p_@TtfnRNR<7,1LK!UV3i6+^jT
%o'J?pqEJmRZbc&VP<d=:GGfEgU6QZuU2a*MLqCb[T\X-*3,WE)r,F[*aR+;;q;uHdKEE6(d_0BZ6+q\7VSG6M)Z[fqo:0f[J/j9o
%l?8\"Ork97Q'W*Am:2Gm2j@I=]?&3>NR()C7o>ToIf(BWqLVW!.]ia*rIY,tJ\oerMA+USb!_b(Lf0V4ofY\ecppq8=l_G*]n+D%
%m$9DBFEa/+YjpE5OVN$'j0*Kk62L]cjd`XB5eYBlaFk($G&&3j*4a)EjWZSk?CFq,&FgRn&aYerX6)20G8X<RPJ(g^<g=S8PZ4#>
%FfDNUan7SseIfn)B6P5KN4Y%doI_@7_7.VU18p8j540o<7PSp`Y;0oQGAXseY^9OG:qOkH$G3q,:en9lH'9,1Hi>?:68-BlagcoL
%S'6$Qge@t^NlP8`3k,jQRg]iTDmPoA!&5D(Rg_C%V[L,Z!3)g6Gt2kL40LF'^@8UjcPfNKo-Q8Efnk:54\!RSgo\OeHer8b.V@,"
%T-8k(#I*&pfKV+VN/NW#5plgh1/:YlOh&X+js#F3>)@<E\ij3hjHie:QDjO)j'.0NJ/GG;/&ZrZ[Nk9D/4p<RL7g],'k,sk=8ehC
%^=&e[1:Npg:e9[H;,/7N&ZP.Fcnu_B8@u-9R7UFoPS9tB#tO\FB(9(:;BG&Q.%mbcLt'5L4#qff^#S!6S8LNVVT,W8Wpg\8050(Y
%]G5M9lZ>J-7kBk<OH_5+5j7`m_]U$270;ugBAkDe5uoWY*%'D'rIYeGUH$U7JZdPRCCod%%3-J8DN*SXrV_:g)pbd`E\G9K.+1`h
%N<gh08KD83otjW5S\X:GksGT+D"Qm4`D+Er_P'*$nDPpY['SBgSF@5enA=;)fo8ka[D2IemN4[5ZVI'`BS>8d9ma:K%Pc<hc*8L5
%S;%7;gqm^l-eM65`TSJlpF.3YJd.;g]e(XKFEgNLQ,"0\L]5tq!PS>q&+iTYKUe.qk=B(#9m]nr+_qO2Ef[NfD_%hnS<XLKgrOK6
%?/P6)&TMaIi^+STiVU?^i5Q5-DGu\aOtOF`>C*%b&Gj=H;=P=-%m^N>GUt@]!`g[tl-Lp*(pgHjXL:)#8$)mAZ.X6ufS?V><nt*d
%5HmSlPpOFh'&5km]7pGb3NDm41X0!-3aiRgQhA>AI;$(N=kn\Cn/Rm.Y.3IXP<<<W?@sZ=dD5:Gl^S]6mI.6RkCYin?L@oCKXN@N
%p#qE]NLd1;-gjeD_C.Z9=q6@G2Z(OmlmSF`]1.J:X[M:TE$aQ(J-.@N"YsUsgSA(%=pG:S`+/dJ_#F3u1a9TuMuNhd`U94QU_XWk
%Ji!l\,s3H'a>p3J_9b0)B&i&dmt_Uc#=u4?5ZBjCYG==X\;F"bWi<NPSj".X2.?a[+]+h;C\At^(,,u26KP10cF]HH2L4i>5*rS>
%[nPMu(@DTrlA'iWHm2N8,jZ(3qH)pOjNIe]Q_]Fl]u?QO*tsF&8ZEGNYhq9*.!g'P_@7"V8tITpJ=(7\KbA)mJ@V7&G3IO)D(Ce"
%Dg$U\U3nUL5pAU++)hnU$!NFT=QGf-8a.cS/8pY2.I#T=Vo:4k:?oM\gB2V)n8r3sMfbBQ5YK=Tj,PNj3':]Nb@Q@4.JkmN3u!oL
%eY<D]Dj'99*D.?p7g`)PZ4]/b%r@5ZaNj.b4Pl*eXGPr@,0*oQ^6"%UAdkCXA/Qai9%`c9jlr_V.KN8:Jb!"F*<&S/EjJjB9-o=T
%r9\!o]W^NO2c;mdh'<,8/0L,E!=0R#FMPj/$u!&f,$@>88VcH8^]Rb"c]n](?nkT3mNB]YBL3ZJ[[Bb/9fJl3*#b)gKSu5kc_F_,
%GTUE3$IU3FMC_8+&B9W0q/)E6oak*K!!,G&LP-e*LYic])S;j;:'mQ^+NdBp]iF3FVYja>aFiZQ-a2EK72f7]%o^S:T9e7:GYJN9
%gI\e0K+'7loWb,_NC(!$?THG&OR4RP[p33&N)um"\_@8J+9:,2d0UXIR0YE9P%'RV&(q"VR<f@?#PUSLp$FZFp+l&NlD_NunMLJ<
%Y?4++&SWb[i\B^U[#!Oq`KBGL3u+rYkYJ>g`?a\:d1]q]`V)6tko,`QLs1Vd\amffAC.BuMJ9WWG??Cb^Z-%Nl!%A-\s&<%OZu9B
%>gP&Agmo$OY?<q1]>[5Ih''H@8:C"X#so/#S=km)7TcB0Ts9bo(I-a\<-CPQ>mhb=2)g<?gD$Jq:bp=6Wn/6rb]r?*fZ,qq7&g=P
%90kdQc4N<i$]PL14(W&'5S0D7+XI(*1Q,;9!C#3La)T;V1>QS_S6("pK&mi0oF^DZ&c#DX@J5PoU/ZB9D;2SKMZ3__%/u$4U:;jR
%fQcP!:d;[g%bQARV?6%bb'GN\m1/Cr;@#Op..ObIC]M%tj'dR7Nla1k3%Y3c[UuO-C88E&f^t,t8W[P?de&d`omk4_>Z%cBPp=W&
%iR&X>,hma;;;EAMAjYkOG(Wp>g6'ld]SFO9J/np!3P"SWL`!do'FOVu]3>4*Fp.1s*G0Sj$L/)>7>\-*7ccd%pU_?PHO(7JSiTRD
%<`g+>-`Lq"[=B]]AN=n82/[_5NZ_Uu9i/,,7p]\@PHM67]qhfgeDqa4:/Sl"pS$g!7(/Y#N>'1_<*AY<:UE*:_KVu9qVAnWLQ5*j
%[X^ha;IJQQ!@mJLYc>j$VFcfaZ:9Wcb_b,!c*XMW,#ttrK]dhOY;2:>7'4Xf@&C$Z]E6+W%gCA(?=gbYV7UTAprGG=6.7.6c^N[s
%B?MlZ#53CD>WtRBJ=\qB.B_@/_c6/RjC"/>b):_iPYk;0PdN?Fc2kk99qYe:mC9JB<SL#@WT]'3SGNhog-_`J?S(_->,5X=l&I@p
%'r>(b)X]4/OSngNW_(Shb;In90p7G"RMI$B6Q,4S](!F>q=ohSa;;rEZ-e-6Mgjk3eQbH5%l^(&n0mHe7)DTMZIM;ihAB:[BLp]9
%_uLBW#;aD1.3RZ5iAaT2'e=VB6pT&FKQi;%H-g)]*bm$\RO*PEb<pk$4BaTA`$jSa=0,Gh1n@N_*MQVYg$2Zp5KB&Ia?#C/$I&Ja
%m3PDCFXuEj>H[W0\K0c&-6/iMZ6`Sl!AR`q2YM"h`E7&"=asa8Ac1Sscl#jRm9U7&M[Ho=a>JqQS*BQhJp\b`KV@pYBGBsG/bWV=
%YDtCuI6S&O5kHCiM?P=-m'Y9Dks.MX`euT"FQt5gXK"<?8TE/>JERV/\*eq@9TZ"L4McPei,Mi"9qEg^4MS%gg4sRDp9S<a8mobe
%FhX0B'iK59KL4$7Gj=-[c:;s>di%pk[U..JoB5-qa/)r-c`5uW6*n%TbuXC@^HQ;-I+)&E14Sb]qK,X8O9"aIfBng5(Z;WFFMCRg
%kPf>7:DO';-6V1]Bc_7fJn\U_DE%p]kZ^e3*#e0-pr>"VA%rtFPVcO\3n&N7[p6\ZLjn=<6"D>E6$9<VJ`IdDn7Sfhdb`.g@?(.V
%8+$_0;W08;\<FjB^fd:EoFdsW==.eEi=NKJ;:U/B\n(8R&eM]0:jb^$U_N',-5Xk:.<?L.rqTTC1YZeno_#BDQ195N?[I,8bi<#Y
%Qcf@-k,:8t3:\[Xm%?"\Jep\qY\9"V?ouKf5M_3g*4o]90Bb#.\P`K8-J!famjj^!rT*abgIc@0A[DBahY1T1T6bJh_PQ&foX#(R
%O,gQZrm?ee8Z15Z"bJAuJcdEWmZjHjLG.uea>U^o<u?BP9;B/#ITn(X]VAKJ\TkAer)*U.8,qS,X=J"Z%dM4nAaK+A\p""W>c\$o
%ZbQe=:+/&a4'2(FZq\;S[Q'-#8%\`HV'ZH'BA-t[p`fN-\T\om5,T$QajeSa2H2M)B?^=M9HA%'G%q%0Ja!g+Z4TP\Bkk(X8,^@(
%6$TF/r@>M[9q1R>s4p`YhX0Aje?;?oo^&#Gja[aP+T-I:`]MjYMu<ddM2Qt'-9-VHhIO*G.[O'R/Zk#S-B8cO)3WA#$9ImV]D]I!
%H%fMGrUJ:Kf)Ki6T/>i9"1kWQo<+E[oa0QAEjmR1;Be5ec!>g;b5K\7_K90,1%(.&*4>q/<bt,2lH+4!c_n1E$kl#MZYV5e'.24?
%3:(\42V[E;G[kBLG!2PYF#DuZ\].mTJ)8V#8`,Bn^/s2RnN$85*(PMIR"f$>fVb34PVMca>#X^nI#)t[g88j1f2=iZR",?AU1l-&
%0718gB`o_L2C'"0Y&Q&O1Np6c(uClVm'cm@D7u5&/[+YVce3-.7qJ1%Fe>uQ!J#$hD0-Uej&j,p_?]%U&2p+/a98Cq=J1$%o>X$q
%(^tD(5KEX$&h^^e5i3d(6.VJ@d@C[lZ*V"dba*Hq.+C&_IJAo6WUP=%iVX'"GjUmlU*@^(X^>=?OgTcq@oFd5aWhH[2?dcmWXLBA
%naea^UQX;/CX($YU"mfZ/*nCJ:6<9kaa'#.e[)3sq(D'\R>Q#lNHAa[0doUU89[p-f"9)hgI"qR/,+.hfd(.`WS@U?g_CiH3.6-g
%YB9TdJ,`Tbqq"(1ofp.hiLg,2TE!kWs5,L0%bP.8Kf0qH0>IG8s8%M#rMP/E5JR-8J+sPhH[Yk%p]("AJ+s7rqj1[h-[baYnUJ--
%[mS\,EgXVb>s]TCH-Z[bQ`g+RP$42>1M%WL_nu(FFkjB6f2)-iVf1[%C6RhSa4c.<gJ_lP<>oK[.J6R<<^n5Xk+n3+pTSi)n0_jJ
%"mK9Hf6NDAq<-S__(d5h6h<[V]*R5s'fR<)Sj$$C-[3Otf=@s6\Ym%DNXob]7WI&ZIbaZ3l#=3H=AH`&W;2W%;05c/WRnZshK2Nu
%Q.Ph!]H*0WC_et'7<enlIr\V\H(B<@:%rb]_"$CM`[L9/hd=Jg*IO8ZVG!\*:FEmk[i=e-:4?ep#oW0qE/MI`_7?I*aLS3%k\s=i
%W-OEL8qqikClNX7T.Tg*ktL"K]Q60_mmN#C*-FrrH)IjEH)H#=H>%Fp0jLRM+m3soW7%GTnZd89plg?YoMC+;cT.@JQ.jSFV_`ZC
%1KVm5ZZ6tE_C"4=S3<n/jKl)LF$=C4cKVZ\o0_+a/+2-C+5%d2mes3E#&<#U@)4GSk?pL:XqT)@*<_54)9[d\DNkBP.rI\3n0Y.R
%Y:InGc<\-/3ScQ3I-<V(`EiB<X#R"e]BZu8H=*._qMN_K)%`?MVfOnlm19f$l($T`kP`7N?M`rW%SkV&hU:PV:?#>r=#]#Y#>Qpo
%Z9Mrj=a0(K:'V0'KKB\,FAQ5n?(H0bTf%W\j/*odDn8H:D`W=f'r,D&o=IK`b2F$We#e]K3mVngA?%;FHDZo+njr%M6dKl3Ms6\u
%dHR.GT=:JR2!19&G0[Iqs"SrNfu@Xl2=sTjp#gclo7jNF.[Z,e'sVRDrI4!el(R@>]:sCA8+G_6W35BLqe!!fk*f%cd@A^UNiqU\
%'R<<+Dn>8LF&)JnoL#6LjrU&,l'R/$@<L&F##fZJ<]>.Gb\<po?[U<_ds2]!^?PE<b+#uJAP)T"KE?/iVRsiAf5q6mcZCcQP0a]b
%FB1]Npi&q4`)-9K2'"95N,ulo*Dk%iFjYdjMjVePc8@a='KW8[FHR'OEs#7joUDDg\YbPj2Po^$b57'rCH<o(2`>#KdtK5o=8--E
%9a;T]f<<n;@=7e@9_WU;\u'grqPLU7e@_R+g1^>[ht09_M8<&o:Z(dZV/JC;gP"'8S[0LTN<h5qFJ,UE't^C^"eLr]InS[@[jOr&
%F9bReF>@JFM]L_Cin?M@VVh%+2tfp8!c\P.p7CMBA?k7]d)U_^,oRW&%94M=I`L+Heo]620GR8Akbl)tOre>\(4;9SO;&^^;^C*P
%*B=*\>m;N+N+'QfVXNt@[-:DF3BsPXT^/MLDn!E0S5S,1a@E8B!#`*"(UVM@!#$[C<7@NcfhrQ`J#VU&_g_))>c]s9@V;P,X@`og
%n4NpTm!c=Z62W1QT@:&m#]FI9$DY%hljB4N@?LKc<=!o_->YtQP()L(:'90uR"p,5elhsNTiIJf=B^VD^'npH[C'k_pQ'.Q.>T$=
%of(l5Ln2W?JeL^M5'q(lX,mC\&=;jis-bl,>t$4&c()_sFe"'rpYdK[T?_EZa",`tF_L^h$8\.30j"X/TQ'Q6fSMo()lmj(E`=F0
%"t6N572rp'=7ZkbT]2-;4m?(f!4I#/nd=or@-S#/q(Tu(Ur@29'<1:d]'#%L5sc\[edrdth#jJL!6usj6PJuWmna/XmIF]*DC4Z_
%9L)KmY_0QA@SK&7VK7Cn`dlPT\dqh/*/YhaL%nlq']hN33gZ/\U1U?2X,XtsjkD_LEqJ?H\j,PG4*TY4+Q+kB)f?#R#MeD8S-H$>
%_Ia5B3?>#:!>(,u?3;u8p)2Z+]B#A4gp*oQF<YtNXX@sB#cDOll>B4ua-5#B;A.fqG+K#Iho<`Le_HEV@(T8i+7ino0Q/SslVeO(
%q>FGr:RZDX@D(h=1=#LX_HDhU>JD#SGF>"(LV>e8%J4fnX@l:6KiJ[O6u-r!AaMWtl^>?L7g+%<Q@eF+-5iJ&mtC6%9cB5+Seq%Q
%S[[?ohc-,<4niu[,R1q^71s7-IRNQDP4$hpQU-)4/_A][qDM#!V4[X=GN%E7-uJ>j-+#C[<nBsh_rgF0(TH1caLA'1p^V"F%>"QQ
%@hTYs.ns>\Hf#EjotHB!`LTb(Y("-a9cO>+0I&#]aYTEbS<)EF^M8o2BuAW:JN3+f:%FX1EUm*.a>1;Jnm+s+.4C).ksO$^H70Qa
%7+<tW.EH!u&sj;t;N!iSrq9&k=mdU4Rn;l)lgm/%hOhsN<ch-7dbV;-UR3lJXgYs02^.j'cC(4kr%3u=r+Ap=?ZDEQInP??Hr#.$
%X(6J``U;p;$sic*6lpib]*c%XNi]TW%;$VDd'b1!(MPA1$LTj7-_&BZ'YDlgl\k#i=SgEJKNr%Vqulj;'#dKEkC(*OX8B/I$fQ-X
%k7#]M`%M!"h-H28G<,2fqm\5$BNea\r/Vr)f*9"EQ%X(Y%IOZO%spV#oCgUlqp+"(i^l@`GfRQio)3:7meaflBhYrD:5s34:C$*?
%Nq3AEBX]N_I!CgA5DOiRn'K/WOr2GK\G$"R"-oe'"t%E[<tJ09?m9mOf(B?9Ml=S'I7*?_jDf(PX6E3N/d6X>7I7`g\+MQ+:GNH.
%3+"0c=`T(2)W^_$Xk/`nT+4PWR/3dX5Ej=_Epnq-aqhfNRqqn)n*[7R]4\`pr:3p=o?Vp]ne](<RpPLNrqR*)oXhS^qM5*Kn&9eR
%J,J9?rl]do2rM=(pV,:pqTjZgpq+<:lS&;+b?sm+rQS^L55kI6^\iFZZi.Ufhu@OFqH14cMl.9;8kMFgotIbH$KAu<;)Pr$ZpgUU
%%P`@IDE]Y/*rLq)_*6tUZpaig;M.@o4I-a6hd0L`WLcC<XR#?ZCq;G8K+Ko/Vej20olTQc"MI<"`eQ5h8V+I%9#f[ilKQbb(hujc
%mQ]l%[fP*4p"QmZT.:;F(TVRd7I"9#A;2fsj\6uZpf=CbRRFEU/L3j:V,WA3QN+D&,Xkf$qC/!V<GQ]Q*lI6d[:&t*eC[Qg(jJ3?
%)c-@amRL!8KYk-0AE>%?5$aEC"rG>OZHtG!5F!cV>3P4o6[1snL$iCkH)qHW^\'2Wj>jK_?@KE/;7CCfZ%d0Ea_ji\9bPbV?.Vb)
%IJL=$[@]?_pMK_/27p7uHH&,!-Fci)Xo245r0SR7B%kFSEeSS53WAOdQMcHS4V4TEBU`0&#]XVMmE9o[Z_^j0iZ.#adN!"^J$(bP
%%s7J*5=3se6X;XP\=<JHgeB2LGU$L)B:ug6d0i;&Us=NtFOQ/PX'V,'/'2.m/'^G=kQYd>J$(bP%eQKb?A,J4L<a+-C"LZ08j7o=
%"d<"Ak<k&`I+pU+iVFn7QGcT%`JUf+rMr;_#N5`Q"5sC-[r5;$490"e]`6o+[J(brd$T;sJB2fa-_g?4FHH)9>Z()7oVcqOe1j@1
%,Jaod%l2JbKqm1lipt,;3u*R_"d1(s#i;EI<H;@K+_!?o$1t5oA$I]m3*.qtWl*^FCq'Yo>.ssoCu5*:Fj,`Tp@SYK"qW0Dg<P9h
%W&ae'jXTWj1(:WWf*UV)a:)`>q@A_DCK"PI/^?Y?n0Y.FJ$(bP$Zu&&s$>8PnY,9='mK'6YMqdfdY6Z)q%'VVN<Af[&lq6g+!b2l
%X9tBqTQp$<FYKKg+J":H9pY4"oVF%laa_[4doDLbGe5r\h4ql=OM"79RTCZA?#V%.Uc$PP:jDJuIUsRR*h=@*jOP8lOjnMV@Pr`p
%q@E^+dS8ml85G#&NIVX*KL5W](lK2oZFZ&i+$u#`+$ssg;l<N7+ln:ME%%Ih+eTCP5$$-dOIJNelD\2EKHpmu<?L`c7MJ4MlEN_>
%":n5!WYM?P+W:0/3T&5F;!87m3o$)E+c-Z_Tqo!d,G_QNIHj>dADm@k4ZZjQh:-_%:/=2S>"5Q`SqM4GgPWRld$'Q5B5PuuW[AtQ
%Hn_u^o-C,m>ANM&8P_Z]a@sU*#u<nFRd!H.dHO:pGH#oP#h#'$??=N(o'"025neQRk=`kshSq:*,d-37ZsAWnGI!g0H3friTcBDS
%\Z<Q3d-h/'8pI[V3'S7?AD<!20(1<jY(ZGSai:.c=$dc8F"T:N6@+=(_tZf7d?#tHh$^VXF'_OI6B=lK6;FeO4i?"-CAJS"F@<\h
%1lpd$CqbQQ8maoFU@(P:98K>9(=fn6HjMg$JiS"3b(5u1jFC9<6GG`[B0qYSDaKb7(l;Xqdd5^YB>U-ur5R$8\;ZeZqK+';6Fc.@
%^kW/c.j743T:Ib]ci>4AhLr*UpDIo'!j4dF.^r]S]]`&q8Ea$c4!Cag,SXP>$#+Q6fh,4f6I]="dk&_6d.Po!'AiB]Z+(IE_\+#9
%Y;1m%4!>^b8>\IW<s8@61>YNB-VXE?)<&i2Yb)ecDdU0\ET;tG*GrA$-KNU5@JqloC>%QA#\[.rHMS<7,*[[r)Dog<>r'fs2rXPD
%o<=[NH4mNRm4au9GS7=!XXTsIGnRDoV?bS4&C"iOV!0#cqWSt+.1k/:kD,8n;EY=8hE7=[eWZ*T;"\dY,G?2FFX4U;<4@FQR:9]4
%L4#`X8-l0FiMVI;)NZ"%cB/ZP[]/F`7m]HuDT3@ts$/g2duf`9s0NlkLH+dE[c4_f8.ra!5=0md"%)ql!VPaN`.B))6^D/QW-[C,
%[*@_79uj=m*Hl8"6Q_e!N>n=XJ's2GAU4UXJY-h5,*f`e#?#25+geJT=b51.0c4J9h&OJ_LWe%nfSe,C;LeZ*Dn'ISg1Z;Fb(p#2
%U:mf`MAFkQ=#V`eAi%-.KV]UZ.S6hCCes[HQd/k6YMWlB*TD`0b1ukO)D&q8Ae/She\7e,*Oo']+76cGmItOC(TNN\[<Y%@+m+2[
%\uagW[U@5N0i6(&[<=5]h@UMOLe@Rho1W#,G*t8kYo)8k<l,0nWaIiDKq[1p6.bP;pcYWjniXPkO3UMMe`Y=0dGWY<;pkYOL711a
%.Isd%<7-K`2lEkQ5_[s@G;V?jb&2g^kf7OA*a`3:=81MmQo$n;BfHcHUu0`")(b0:m4'sH]K=&F+1.Mamt>K^U[#15R)%qRMt<%Y
%m'#=O%E=_MKHT,QX,rncf"U[JmtDO$md7-qP6YmJqai1We6X9.UHFg$^@'#%YR"eV*l7M:NEMjlH"[K&KA)5dg?@k(edH&tDg^bq
%TuERLHS:Tcp4kf56<QS<`=\*hDtN^YP*^/'aq4iib4r3EQ)uYo?6Bp(!_P+NC"??eXV6S-TDNU$6Amr"p5)V'AsHJOi^)s#OkZu+
%lS.*I6HPZ)aaKN]PKYH#6UN7Ce6^AI7UKf9?7<..m_d]c/ahEK-UQKDQ0oh1%r*ck5mfRI\nd%]<@A=&o;hKpM3q<]HY<](KA)5d
%g?@k(edH&tc[@d"TuERLHRffE%>9/#.4`JG!2=P\lmiUeD-pk+6g.X+#H/[q/Z!_@:8@ajfa2#SG1G,(7H.P7^70Ptda!8h+qj+L
%+e;$\61%&]N.Rh*rLVP+3Qi[>EcD%edUrbcS;2hm4K,r\V2`47C;!GUqqQt5(L#V)[nh\*#'EY&gaMWCDFLuh7<p&9iX,cS2;2\*
%P\\m7?c3()dElPAS],/s=7u59oHNt^no5aD5*r+U$-dcZWXYK;NG`"tqsmC#R;O7`,Du?cmZMKuKdr\S:3$A@=Xo>7G&]S6odY'H
%Mu1l4l\_1YXOj6$^ffIV`hgGb,Sq!uJ37V4MkR;cLn_r?gI''K.kIYMb1iXDY3u^Bo'uB&[*$@;W87-c9k`*>dF#a4guubS^V;1`
%IVN/a6HjY]aRsA'ph4]2#oI8sJ?1GQ:%39TFHVLXd(8M"1W\26;/P5B:-3I\kqC1hQcq<7M(%Z$\k=s!'r!SF,a3sakIem38W$)H
%Y<jV)\.>^BXuM&]]cP].cJh;P0)^2N(V.c+EG-"T89TXsX?^uTe#ITWK29=pdkKc(SYQ>4T3Z*78d/'!3A.AeTN*K@6g^s.DF1+%
%1[@^"FD%^4Y-VafPI7SiA28bEW]k+1$X,=7;qES?0cI0`nh/Og8C#a&*:XN967F'.ULsS)*U=j8$2q!sY.Mo\5M^9keW(qfJg4HA
%>:k6Q?lc])9$VHk8K:&7br\PE.ZU=0'Qbt=l0K(WPb3*:FF)ZA;@o.8G[heOY;Ur7OT=JcO06Xe?Bp*@7E\=:V4n/B)FeaI6\QEo
%E%!Vu%_NOV4>d?P9!iK3goT4WfSc!DJEIsMjVI+$f.lh!nqf]__7IfX^%V,U8<U\nO>ljZV3BD:$#kM=b:nIqS4;@P8ZkOTrecAb
%Rr4MUB@4pbR!*oT4e`5W&C(;?/naDa?BY%tVA8D]l4AYB,5KUt4u;`,ZG7C25f9Pn?kuCTNB0IE/@B&A[eAh:fdANu_^5c//"H+:
%;W[%n3/guLPCXgueEKeqO[/=pK1Pt5,!%ZHZiXbP/s$_>WXpRY!AV1hTot',EY$3hPsZ/5!<C@`[Q!<omLUJgos^@n]P7@!g:aMF
%/D`Xt\Eo`3HRfid\XI[caeeo@05"b8keD"S'9p[CciQe5a3,@.CGo^a@[Yu5a@r)DaB;if,i\lr`ATd=orXjcCfpcATYK=%pnn]-
%mLIj3jMbR3V5U:8h+[I=>M7PtYlqQmU2,o7W<q\19kU((-#6gprc62u%(:m[EgQ>4^[E(Q^as!`(2o;'.oXWhmqOOr8mrC\9(eMa
%V0@nL%%\D\X]1u1[9.,.`eV9<>2#gV:Lk)KZHWu.=&ae-k0O<(#jE^%T7R[qYfr=[r_%]07D$OaH&"rW/[&Xg1`a.%Z0eT(94aLk
%6'EOr1F5RZrKIYP;UeLT96]jD!\9q,O3@*C=0!OO&rpfom!pClbl[%@E7i`ORu4j!)Tpk@O9IN+*lY=MFP&6b)UGms]7#5&[T_L)
%_:Fb/c>P6"8.*o75CcXl]A'0bh0gI^poWu`,Z*g7"bl6(!D))3`k_^Ir&EO._l'05]5rjcd$EF#`aA.d#[RuBeo99`_?5GX./'IP
%@tb@-X.h\*@*t;02ERgMisqSjHC3N1onc5F]`&C`6(`$Pb"1%i^-jJgZ76rD>F4s+Bdm`;e/+e&nF]XjNi>,l:!`R50<eK^/"9k]
%ek(+dBchRGVn9ZA;Ln-X>G]\Xpt:u"bm566[B!(KP)tDX348<_cm7e5WLn]c8"WC'TC@R/_J->EG>h)4p@>\d.R`*[2)%h9f.5OC
%\n@pk_P*W:<YAD2$#T@2c2n_FUnRPR6](IimJ*Qn:ZMQjfnc3=!`Z_oramQ?P+"Q:nd;ZhH3FmWY8bht=B8C9DVh'hVgW%K%tGtp
%qG`2r$@UJ9.jtW+d^_OPC:iK`NutL=FRtj;@5lV7*/;&=gHF(So:EOf]VkVcoMXu?SbH+8&c\PJG8BA8=mnaK"(uVK)jgR'U0Q2o
%EKZ6S^:S./nBeOVX=.p(^,VQ8I'%#0n=:C<=[ttJ*h"r]F>RhM2EGgAkq>XsD-SHF.-`moQEM#YbEk`Lo&Yd.1RG:h>/#ASgkXJ:
%;;?hP]cP].cJh;P0)b_p\X6*5Q&D?=]4NKt+g[E9-nV:03&QWjHDdUhFi8d.h4;N1B\)LsZ-c`pUDoR!rh<ZIL45;DU;"6S=^N>Y
%XKO$(lb5>9U\fA8A_hRKI;%FW`Hc.JlVVNW/8fRidbj4g-FLVSCX)`k*S8>ra850dW[3Ja`;ff%Q2Y.jm!n6Ds6!0s^$olYcX-[1
%K%(mlO5(?l`5+c*1u$b3X_rl.Hs)^3_1kQY-UXhnJ[RJ.n+Se,EsJX`'M:kf!HD9k=u@0)g_A#^WG+$f:jS'N=q5=5)]d:h+'8ma
%h=P!c/#8r:P'iaOJ\>C;F<'F0T_pJBl!t8DrNF8rT_gS.mA<uC@@`j[G,J8SHXW7i0fJPGJM![U[&VrP(<KT%E;+u]_7C4RUK&o?
%h(l4b9qs]Ti59:S1FETY'?bZ=<B2C$o?].Ikis(Y`kE*l9'mF]Ec"(gaP!u+bh[^3(`]_T,!Z_6E>DR[bAih`^p6&I@h9nZlni#h
%/UK[BCe%Dd:BDBb[W7rniFgCdj6'GSLUVCEL1M"NN:e.:SDEM?[M%/#FjV`LYiW:$eJ@/m/R,Q^"DiLid^$PoQ#%CIR@%kFDRB=:
%1re'a>&t&G%;noW^DY=rjYtIF$dX1$*"`.n_I2mqr83#'DkF83Y?@^10E6+ne,Rt's7RaT?iKcBs7X3G?iJ6@omcn#hg7WaDTj-g
%Z];e=0E#sQ^XFh6rhj&u:V67kG3M6Ydaq:pU^;OB-@@lSrpKb:r!Yp0ml1gUSTZ%Zrl-sbS4@5$DFtbdiNH8Xk8f?WeuW`9(@LaJ
%m5>cRLSfHkRgW)=WgLC+XhjRGi-#pA6CY`jmOhs8BR/E>Lur<AmM<-j7aB2f])[h!?agi'q,heV@P+'JHQMiMZ":Q'KlR^d&T#&e
%d;bW.mNQ.?f$.bH38Ii*05YW1$amZZD1M"*CL_4"=o2cWMj(s/>.gfRhVt@mpD,spF)UTD2>7kNYdV%9.1k)keBHn%2A\Tak2tZ9
%iS7]9N:lM4QWAmJY5;8ZMpLM9)T&lklF1kMYBj`hT#(2d/i&5l*^@b^;Jgd67Lc8&L*=\YiAt@D;dQOm)s9>PZU"=*:,>As8l)cD
%\p6,FU>LR^XD<8GVme=&Xp!X8\S>Abk5t5q)f'GN^oc<>/@W9i>l@DOa2%-^F1hD\1Ip#57WT4;I;;Rp\&HV&[I/c-&(dBD[*)bd
%`;`RK_XBR]k-t*KO.CgY?M\<+JEMpGhJ*"s;?(@*rmO@8ViCOKlL;!Q%Y*S0pikV<L>=P@O0d@2!edOal^J15X[@Yh(RW,rI#`l[
%V2K[J$[,uCH8QNh@hneH%sSl'YGcIDK,opm=?l>H(H*W_or&E(r;)OT[d666RlP_RiZ+ce1:DA!E(PU2W[eR>4?K(5B"\DRhU+SU
%>rSjpS,Q$u(hqXW&b84c[CdO"E"e#Z4>"@BCf=YV*`Yrl\?.(a+[AfI:`$ASU_0sr"8mqIf*QRKDF.*7%R%`nc4sE5d"ZhN.AX5=
%BuE!pLU.qp\4_<GCs&N!U8k)C,fs)MjWRXe9"o9EPaMC4d"R5P$?UH&)Uht%1,sFu`Y-K<&cHkh`Wra:*dYD>!N>`810MKVUYgra
%?@ap+VJEjO;$>uSn'oBpF!"b%T+1JW7K,43ZeQ9Q-tkB73cr`f`a'5l:Jt=Lc&q#3Zd8@*<S:+O)L(k<SAdM0OdS8[k[Ih;K7.po
%le#iU"362')hZB.g>CKmP>([u\PM&6:;WLa+H2:KfZ>,8X:sIOTBum)q83JNc!W"cMf[5h]R^u2X=J0Ir`LV]aZo)03'Nkg(j*4<
%rnbZ5r]&.JH6;J3;mO/*3g#G[$NVij*@8ImTmaLCK-s*gLF*2lMAc`%6]E43<\e?!7q4Xdm;08pTS;1$\Btcn>@ba0P,$H]DC=L9
%BNN\SBK^)M];(N\`-[d/lUP&j'6?O4PHd2KM.:mT&g0!?AY[7a0-mnR^l_2*II4q&bGGiT8Qc_r4K8lkf%=-Xi0KqAH4nrZ](qo_
%QBcX\l&TWkTKUNp/@L*>db%YZ,%4Bmc9=2tg4!,l=,Lkj0FS#d;;?g?fhGF;@pO(D/aM\E*42l"j$VEY/+2-K1#5$WK,1T:76;r3
%(Q]'4f[G"<H>?A0Z)BSK)/)qO&REn6\R_?:,VPU=Ji4d70NAET60loi2@Cr`)s7lV:sc'FHJcX8n77G@3Y[N)(p$hi[[d"@US.;D
%Un@l@$+U6D/PF<71b)!TkXSIl=^Gd:T^@'(lEGnm(/PIWF/oYNn&V;tp#r3E`Qu_)FGi!d>1?m#Ten`B!D-0tUS(&VCIlV?Ae_U;
%Kq[?OBIS\C.ClA'g,WhEENU]W>Zf]gH0]b1"f0plPCXLO9@`T-PC]%*dcMt\XV67qT_7O0RWUFL#s&r;'9b(Pm:;m/<0f(FK7OdL
%p#h$[Q?.M]XS'RuM\:_^NUN'=TLIDR^:,NnX`)HpT_7MZTEQh*C]q,D6\<el!Gra&n&df:ehNr_+J/hU'fX6IALSEA"uPmR/:$98
%<:X2$$Rkc9FgH=8XCN0bZ:?iJhH*[UB)rkRYY`XIdHpFfH'XXW2!'t(Z<"aMs(1cHqUmQJB0A;$B+pJl$b*)*cE9kgn*Eb%UlTp(
%N7Y=KcP5;#L*IHba#I9)W0K_QIZ81[BEsfJ;cSb*Nt*E6-/5NY$7FT07jm%B:o.2M]%PIh15i;0J,O4UAt_+=*-39kNOWDOEakI0
%W,cAM4`H#^FqdD#X%!:<8p5hSm#]^@&"@>LQ7>-iZT/\aBbL05=K3u`ErQ-^71jEa5U;<lB+\UEoVW>i-13jr,AAt]8a#u3:Jas+
%)is\M#X]:KUK9p^mN@k'</a%#-=K=H8it[$_P=#$Za#B4I'#=B:i%RBkZ%c<7b2JU0F[C>/2:hC?d<rJ$eaYck;cA4?t0:+mHXSB
%DG*<p?3HFY;MO#JG/t](?Qs&<&.E1R>T$WqguNn@_Jd>BatALQ5X_/]dKe?Lk\".oCg)Xpf$TsoqCm/CRiJ<lC^I-+E<H:/c&ce?
%jE1;'Y\Bi-ht@fUT,T^@rPTni'6hPmSpn-6,A]=kBcf)c8c]Q&2/;4X#9Q%49]=*%MZok\_AKC,aji0R%IBs^aW=@RA,Yd_8QQ*e
%q8..<6k2E%S989sE_i1K#Vk#2_j7.@WRuM(P^/D,<DaUkho">`V2F>Z75G*@%JA)S-lo`32>KS#%F55Kl@nYjKg^5UFa%dd$*gto
%h;tn>3.mD>kUnURHj;V:S0>h>26VNA3,_7o[h(MDgH[WEOp'(bfI$kVo7kU:cd^0Gp&eE!`YIk+^@+scRmHJ^r=X<B93Yfrbs:<d
%)a)fC,H(Zae&*($bmna[[N8EYB,&A94ZT#5m75Q\BH5<2SqQc3&nb$$e3hosKq!A[eT3];-CP]^I+JP2ffBoZB1P!'VR7:s1PVXB
%As5B-EFWZ%cBhE$MF_Yrk**kIjoZV<c5i(Xr(5iURYP;H,mK(p(?@C;.%E4(EM(J!F4;4_1Nnd\lge?=-Ya&j)Ao!L9-bJ8EQ\P2
%#c#HgKl`#;T/Ho:!I+\/#o`OmM_Z>i@7]7<AJ"B*b1p9\c46OQAf$-EgPD9\TKE-b1398a3sa+gE%PqUa/uc'9kiZnqrTSm?<ftn
%gU3GV@W;=\LBZJ`Wd)g,ZI-CiB[G[)DC7_Wdcfg!-uS`F8Vm,?TUNIhYUdj_M)1'ZOOgJISZ%W#bi7%o`(I1=KD=3K_"j\mS/->5
%YM!rF_!*$-bP=r5@RDdm7#)g%lPo].C)<b49^Z_8H8S6;k?N\q6;d)Y)C_kd3CIZ5bq<*B284gWZLENu"m[WqL_:]0)^!?hN8h"2
%eVaUt&t6Hf+PEud?uV=bltMmO@mNaSScc5pMuml_p\TI<Ta\u35WN.Sg8E1m/hJ)WES24A$2<YoXZnMM!cIQaA$\;]lcC64KkqBM
%XJjG4a'->C3_T6<2$2NZdJ)uQ6'G,Q?3HsF`&PrJKffPE9KF<Mb_OV$CiY!HK0<og84rFs#ED"(e6P`M4Afgm&`/X%0?Zj/c=FRU
%9S+O;(cT]O6m<">l_$8%=#;Z&5&TeVG_b#ZNG%s&]IA\4nB>fmZG>h7B@.3;\I.Toa!^I`bPefd%@_r&A7:iJKcH:So,XNL`:r/_
%8Idn7KQ9h5_4D(gc-TcE^mtn:K"@*+S]D=FN29H^^^-Srj688/IML9'M(3m`cGRjN>TTAZ?bJ*8G#<2siQAk`2[1@Y'4W&!7M0ss
%>uA[XrJ*[ah*u)ldTZ=Q'BO]3Mo,ZZi_lsHYL6lshtYK>9FEq+eTUmWiDau&;oBu%6)>q_$#R:055)Uj/`*ot8DeJ8D8u?)#Vk$a
%c9n[7IqpGfltg^n:"g"^K71E?WUaI,*$<IDN8cJg2*iLs8Q`97O/`9n:'l%l^]p!&UWND)*2FKIBYpGu4p8F=^6CMeX];tg5Ze,9
%;';Tk@B!0KX`GR%0(_Ng0e)M<eN"Msi<u&u_.<.d7X=;)7(t"OX:=!(dHYZfEe2OIqoY.ZSlqS==Kajr._7D?aHrbA[!f=hW;s&K
%mR-;oQ$2DoM.*_IRha)/Xbhl]0nf\Wb%hUk3i?m5oI=%#EgtAcG;U#YiZ+celKXt>hV;^_3e4qN5ETO[mDGcA;V\[pT5^kX:"1E@
%3-)FgA7uX.0L3d,hk>oaD4JP\poXnee;cDnjhig)Za^<U]s#TnmV!HH&1t%u65!A'6EegLCZ,!7G:qNRjj[Y.9R*508aE(LnU3j<
%@Xdg,MV!AagF/)$GeU2[3_0\n`cjI-/2D+W\-Zl_YG,)lP^^$S37):-pmC_(UdpY,E.$k2Vo;s<CTFJfc<KtdnbnC^3W:<k[Gn9C
%9rp^OUkLNo23'.]T_$(V(K-*r/H9qFW'<*qM@JC.'d^,FY>c\<Ej4-*&$5r/\4]U^j>>MUZrfZ8-MG0JLX6&';BF,Z#&nAs]+CSP
%A;Yt`9$\$'7PTgjOP<YRMR6W5>]dr-<TV"XT;u$:h>XL,j29Q0;;A"_2KQmO//@]VI6XJP5ipsRE6qLJ(Nk3k<;4JJBsKhp+h#OA
%.Es$;FmQ%0Z_X/dA`4O,-qgBDkpBrC)^!?hN8cI\IJpbCjKP7RaVhSHT[*WaiDR_\boR+hDS'+c.^>L-c2+@n8j.UV[<]CE]4,b=
%gZ6o>[:&t,eCn:!SEr3,E9,orEt[q3]-rtQJJS6q#ps64A.D1G@kgWJj'ilG#LWhdp9S9#?poOObQ'50,$#pofF0#K.5P.3;<56g
%c.-Jus5@d]J[=lIe?t>ZpP&`Tj^-t=?3AD;_YRKo"][U=bR#XM73Jd]r[^KWLM']<6sT%*#Vo5,ZRDW04M&PljJ<.CQ-Q#H``l<l
%5$fn7TAgsGqI*,OE]Edc`NQ)fYWW-pih[[[0J*l"6$VM"U99,r95o\DM%aZTfP?uO>##K%#rhpdGgZp(k-3B:%-5sHGC[B6]i^"P
%"-5D_N4"%g81T!p'=6i8/YMfP'L-nmQ.kOog`^mR?npb!m[NYdjL`K>:tr.)fS/mJdj.D<o_SHicf_P>p?@pn%nDPHLt1.-keJZD
%U8+Y,"*nlVKa,UploIcBF5>5aXr[H8Z>ZDCCh4@4"JK<LiDfu4UV+T:#o]1J2[%!LYqLI.7`hepMjfH;]`YT'+O6]hJ&6R!XO.T8
%CG]jT2LD5g?2OEnC\U&EY5?lD$$boUTdV9*`D;OWf9S1`QSqZsgTqu?allh(3@B6pV$A**2E"3Kc_PmsO2!u/+L?AR3tNmR`&N;>
%35so,R&*4OGPXsGOaRo1Qa+uE<WWVp4t`;05)C)O%(ftG*$.ri;Gf?!IdEWB9eY.O-hRZ\PBZ\[K_NG9lW89G^*30HoOc,!$K&HB
%o#3I+Srp>C3"YQ#9m[_83BZG0<2<hf,)HVM-TiKF@C>=B0Bn=5")V%^2076GoKcO(KcMG)\/jjEp+FsGLL<#tL?_'PU&-to-*__p
%<MP&,g_@AX@8!*(UR'=c.gW$*3pQ[6rM=.$8ZNDaQiWNELS#1Q+L5QV>\"5O8spD0H:Fmr/r@X0#2c/PeM>C)bgcf[QK"qNLSG*j
%84IFlLfBeY\Rfnk,/LX%72<4ORDF-0h8CHOZTi?m<(]@cP+ZG.,:)OX7t3CO&NW%1<j7j&UQ#:gah3il.:A%qJe[[a9u7q4L[l]X
%B*d^:bOVN5qmt^Vb<Xl8[C/e`pCkV\H6A!M\rSkGPE6qH<V93G5KnEZKt-t<asrL?eD]?L7N]p8a(\i+d:$\'"%nJ41j&_$g;Vhs
%fB,``0G*LdglJ?[[\*f"dg9^MAKM6,'F]GLlDTo9pb[P#^IAsDVuT-JdHO,QX-hYgJikQb]3LT)Yr@u7EmtPQKBLsB/LMNFY0I"?
%fD\S9?"?'sq<-BROl-rfP62mJ,aX\Tb(\q7R-tKn;[(?QhC\$PQl*90k:YTA_9m$.Fdo2lejs5kCnpahp2`"(irhF_b3K#>R6"0'
%jpD])HIO`[q;H[5i7hP(=+@6UR@>n.UC\/j)EGqmTHLb2X%q@OLI22;euBZEZV*UM@\O`G"FZ<K0*UOgY1l%m1m,#%GCBcd8N9Z\
%Q!eJfoG0#tQ&9b[78^uh!57dR4e+XJ5BRA!5K7kX/Er69Jh%Io*RRLGZ[U<&V?G;d$3">c6t,>Ch:?"p*j"X:$R6,=i0\5iZmZ#m
%//b@S!mR1Lo5gM!H,m'srbr,o-+3@'J6.aJit`uoKj`&@PRYPSgPF@M+HG0)XqnMe7G[;tlC2t:iE@4OG2gXu4TslIR"Fc*Ja'_,
%YUc43DNkSWX'J%&EnnD!SlE*G53-g]mhJueX;VPXS6KZMfLt9pY*reA:O,@!i\g!=Qq(7ohM7Th!p6?e6\KBLIb;ll5MuO].QTEY
%Op_>0_>/'7k[fTU<mlbOR6H8+XAsBp(]0:jE4'+^_@%_4Ykr$]BSs,=Z+S/(&^4Y+n=1;dS[$hZ)1>&TXR;C3!--IM[@09bDbXhh
%7D)7>BM>#iphVV+n]kB6Fehih%)kH@f<+k00T@Jf%$o6A1iYc4"jYL6e]`@tApGFh[L[A2_WIT\4I]$i12UZK`0FF$Ot<.>2@$b9
%'rIKtmVf':hU"h#'BfY!GKjQ6AN2;Q[#kCj)`hH..XXl"[?GcbORBj"V8mDbeEi8(,9Qaf8!@m^PgPW@_4+_g2()=gICXjX0BJE$
%>^U;uKn&_a/Z6\=,5qrUm7%/A4sBVHn^j8sq7$L85q[\#o2jd?BlP9:%C#4<ha:Fi4BSsr4a0aJ*SPiV>@0?/)hp/FF^[2P,g03'
%?<h..ldm\U5N+K+lQYk'9plqUr?Z1a?)]<d3JN,5>qD^6"0lq+hGS?DaJ!.Rb)tne^_'e&'VX)Mrgc7D1f$JYP)OpfD[T[2f<t,=
%>H\3(l,%BZIRX!R3,'Bg!O?746,&:cq3[4;']*kdRS-."\HjAcEmuJnN0HlbM>?^H:WsVM9[2dRU^n<Br`LMo8=s2h%[5L!r7pP5
%VK$R@T^_sP\/uG4N7scE8)Jh6#q2W(A#)7t=$k'*Y+dBd#gtV"0eP8Fls979g,-`qcf,6A5rBlL@6u0Km;5QQRAY>=SW!F2o>#:U
%W8LG%A.ELbZEm6g-;JdlR@/<uh)A!QhG7kB0n\U8%tb7bd;<)R;McS?^D<RI-jOTjgISjqFUL>`M,r15cO/i`&T*^*-"b(.H5jB#
%MlOo%1[:[LkL,+[YbWn-9s<u#%mP>,di#XfH-OCTY%_OoY7OniNC,Df56p'nnR.62`t@NN7<qOFQV6>4"''Z6oOo0G+TURTf`^*0
%BJr<o!T@Y\_V]Jn6kd%lpRo<.+DKqh=F$9r`P/$g6hJd9$\s<pRY(\f"[s8+;d^KM>^>I8!Zcb4C"M:8$_<Y#9VuI?-#)SO9^A!g
%;k<gTX#hTKCpR:qLsSnb0b#[6im<6:>:_?Mi[Hp_g$4aUe@=lqRg.b`7<S$RIM3:Y!-q_Ird@!T'mtiIK7ELD,]lQKCV^'gek!og
%8Xm#%L,`Xt"#Y5e([`-\/dW^&+uqNn%L:>cipZ\Cf.=;5b&j[a,%Lh-3=F"'Q5-+IrCRN(@\D@+>^1c%9,:Xg?Abf1@Hf^rh0b@^
%d1HR"PC/\HJTZ`:M+Fq'J:ULF.+-8%g9=?q+>rDl`X%Wc,k2\%e[C8W(@AT$IKA.FDg,'VUnkFfb.LF\RiiTBr,cYg4GBAj#>mJC
%1+9O#Gcnk,fYs2Q$T2`_1#"#U;\8Q7lXpNaUc?"G8NElWDgFuiOtZ3a)`<YpX9nnFFRIrF!Jh"a/ED!fHc77\#eIhtd8[f7Gl;)l
%29@G^9+!SF>WI]Y']QqJ-Y9JN*K3Q;LM8esKGf=>_B7?<5GT$\G:H?e>S!ja.,H'EmoJ0d>h6uY#M3-aV/jrTH4;5-=&)cYUV<KD
%]&H[XLPZc^GHAVWoS3`]FBGQ4rD<62kRXC6<97ucMk8*o*/^ua$No#k5tEs_HUBtJM.#-#679VFFA@GN(cEG'h*<kQ$$>Yr%eTt!
%N>rc%D,WqP&k3R!4"J0IIBS+[X@4PdYiCJ#:CdgF4*@Y$6`0Ck&*'>7au!9<bt1L"CIT%pj^ZT!Reh_>UDtgV1T`VIJk=E*=&G1h
%hAV:FOrbT.K&el1j;1l)l;p9J:ZH02qW]1p(E8K2&d]ab[rr^7:eTkSMd4X*rhC,<X/K.-)5gYtp:DjiG]agV!6Ad$P`]f/M'Z)4
%HjGN,:g*4j0^o-D?oU/_nUOQN^abOie^Z!Q9!C;::"*)4D@@GkC.jr1[1Mt:p!crh*P'@FD$GqZA*Pi&^c1dP^)k,j^Ua"+qC=!g
%M\p?hFb>kk[RqeGG&.Kj)E3^F`"U=3%KAUtO1=8uK;THl*b?Y#i%^D!Kbs9fQCP9a#guOQUn39](dEQ<m0J#a+$gC>YZpBsZ5W"B
%,PTQ^RN7O(S<3ENGr5t.:lmb^V:66R]rKEYD*+g.nn>np<RGD4PT$$@%`YW)K891X9>53(?>TV0U__>[L$*ca7lF624:YOPR]a55
%4#OOl7?PAK%d1Y6TA"<K^7lgYh7uY3*A?`9*.iu61lrsIk.a>`/bgO+"%WZd:Gg[;o5!-fTQ4ks\11_D]BBPq\uN+qe/W"2B[gsm
%4o6iVLBcq=PH8<^40pHu,0q6\0PNTmGn99XFYB05b'DWs3(O/!*:$VWe;u>$'4nA)![&5X6X/#aDTqBfBSU8(]6<_N[t]rJ'sThA
%LU'c4XRi!$XB?uFb?taS1T;3,?iuQ.'V#jBPr0V3p/$,dnrn!l:]1/@Y2[%sWG-8I.eiNfC?H-HU'be0W8:IBptsJ9[:q00c=$V=
%0`'H*?-Y^W`K>C1#aU[.PqpqM5r3!%$2)nl)1:3snuKV6?t3m/Rq8A'k)Z,LQNLPHOsai(nPNjfPa7O$nbAdFna`[.lHZ1imIhV<
%kXC,LVi#at=<AVb=N/X8d]OW5eZSm27!_n]hK_gTh)QMu]Q:`iJs5d#pn73Qa!&ce($PUk<Zod@:7'JN%pW#9D>W,+jOY%/`Q\#S
%;)=OeGpbtsj+E)@Qb0-n;+U=o`d@`Q),G,a-WAFQUSacP]9`D8#kW/.GlN?\`9$"Ppuo]a_e)6kHWKIuj5\_B?[2n^GC:=`oj;p0
%=t/`$qGa]ij\r>tFgQr,.OG0K[//LmpGI5o$>J,h=#$mX3+^95W_&6@a'FhBZlHZ+S(dkTO!Pm>pf0Ia74Ug6kWA6Q)Fo`++B>Di
%GP/6%ZY:+T9R)_7NeA`NfcPTLh2Z#Y=&WE);UHjbio<n7TR1?e,NS0\ps&J#VeI>)c?HtT*(dPU^'Hi=If7suqXEi@+Ld`>l7PcP
%mfKpbm=ibO?\9X]KNBr6[R.MRqMbZYj,mRk2Y$PLQPdZ5-WL6DSB6"uZOObp8`'2o>#%%-1VSbCn.n;hL>-=e+7];2I`2P"JrEQY
%T7B>gi5(F+d<J']H6beEJ!"Flc]pJe5T!5H$e`K$S25<k95&LsVW=H1FeUfL][oH95escEX+IQV+C)9R<CaJlr'_KKd1kY:$9*NP
%gG>(-)@L^G]eQdN3"tZP&RSlO<)l@"S7k\h27K#Ko"AH&LV4M<$EBW5Z+VYNE3taS2,&0bIDs&#(Y&5g_7L'r3cr0(ZPkTRRpcf,
%6E&]U2YJU&QmB.,?bor\p+ciC"4uD2T?u)@h\B7c<SKL-\:<S8Ai;iTeM;7//AdV.RJa@HM]orm+qct6AT5Ut#=jRd>&$%257*lY
%UeA?)A]*F0)HeW>=qi,7m4/W):&459-QhUQAWMSRX.,A,cp>%73oVaM.,BcLJ+k:mdp\Vn,pm34!-1U`BJ9hMY>nmS+U0^g_6>QP
%Yom,UT%_pQSsb=aG/n<MVTV/W7pe@_<cV:jU5kdeGW7SBpr=COX:]P:f]a:*pGt`V-@CqPMd9DA6qF]T-lU#s(r6TCV$<tlD^p!9
%WLNl@dd[guk+^%\N0/@IfrHa0X_LKZBffmg_q%rqfb*'^ZOC97.2mTSciL,m`3kGM[aO\<Mop"R+;2%0&lZJ_[b9HiF<P*E9s8+B
%9qA_<SG_r,Jh[4!pIIJK@WmN4OVVKA7j0D#Q5P?Y&]`dRa[BL@R^-44\dH7gI2'epEX]!"SF!OugiUWSqCPjP)R:T"V<.ruf0J"D
%`"elq:$rK`.(2d;.;UGBh8OYV;(kMo5"WtO#7Ts@1,bMSGR16>f/(&h@GmL0#tlIL5Ucls-0;*t7mKn3g*9a_(Qk_kQ1C$YECP%<
%<neHk@%&R/EZZ!,AZ;/GpEMC[ST^\RGJEH8q"hmm?'mTu;14L3D.5%s;8S"u7OkceP:0^m]5YS+)i^of(;sFQb[4)T%8_+R@9B!]
%X(]pi5-SUFW5>i/oYVh&/PFUdMtd_b];P/Zclek*FOOZ0ph\_&1I`'o;qsd1A>Bk,=@nIeSZ&M;1j>Z>N:5C:>1:0tnhd>?#QH'1
%&uF9->K-:ieq9.m)i63.ko#Nk<>AI*.EtG?9cs9cb$L(J\"d*9!-e21b65]H3(dGjX297uQ<7\c5*idH0:+SGC6\Q*gTRfYjSMGC
%8bJ6Q:U8"G:U6>!VEHJ:qU`77?hBQV&*bN_-E[U?j$sU3F2NH40jGF1pQ$eY15;]js7+L#s5gD#^TJt;b5D-d#A*n/auk,o<T`C<
%(;I$9chFmBO5AW5!NeE6j+BDDb>$0/D)n],jnB;AQ?DSrHJdaMHJcn?UOHJ\I%H0]k4,I45!Gp+^>--_\KH@SHMP\9WT!.rhTW4:
%1iD=Z0+n-clX_:E#WY/pL-^EIZAW4I=>f$o#]#tnQss&E4X7BANJK%sbjd#m[Sk<a;%oWrjJFpnak2Ci7uRU@%]WSHd0X4!JUbq6
%9[?`S%*/^+i=djdb^!Nd2*-oAYn\L*TVi@%?nqqRVBf>tDt8;VE<X^-Wh]W\^lQ45N^r]Tc3lBt2SDD=LUKj!O2YF_2mEf80PW9;
%VHf3gVdQR5%7WZRcU77rDCsaY#5fSC9nU31m.Bc<?^]TUVDjfi^a[=)Ji1Z>0bJ#l=:hbHlCkK9'VY,Q/#il#R]B9tfrTGM=?^Lh
%Su/WgM7=He-k2Y7=lV/`I(AS<S)-1)HMPT,<JaIMpCJ@$.6ks_MS963D(Mj1Y`-2WMVLrBTb+IRGd%*&c*&utR_UZc'9m+RP-!o7
%*kpEPHOZP.A4,indBdtJWSsE#[aj2bV.n?X/dD)I/-t:u?FUk%Lm&"a7:oCr=PtuC'cQQcY!YNamCkXTXfNfti[aYoZtg@5g4&JK
%b>#1rCmk=#!J)GWA';Id&Rne(SRBgM(1]7@J2l>X<R7D.^5mVt&.hD_II$[.c**q92Z)D:?sqE];9ikM\U,tg?+u^T3%_Va>aCPc
%T7U9*[c0Q>FS;RZ1ir@Ca>h4'a=-ANW/A+HV+)["_pZO,NIGKr/$l12\/H`.%@]dhj%k)N\a-c_>38%M#qljh['h=e;WT[f;2,ZB
%`3n!F9pHhOC6s)$C/dU?)<9[?gOtR+($1QTirlJmZRBVeV2m9R*M7E8qrfVuc*D#+'])W&ZQr)A;*0_I)k;`PQD01/:j;*5=Y`6Y
%fb]XC%pS*IraYY)P"XR]aTJ<P$'qhX>=l0cV]O!%]3k>\o8oM4_ZgQ$#<?tiF`%1ape%RE0\^3H*1.SD`8$AADL%M@4`2SAYFls6
%Eou7L>mcSbN'^!tcQ.?eMQuWr1qtS+dXoUK;hK^RGb[D3gFRqMgPIW"?#7k$lj"2r33B,/PblRQhGplbCO7W3/,3b2V'M+\$9`(i
%)P"guoMZ8h>b@`%P%NO/E(+^)]4FGc&/?RNWB4"\*\"uqA-(du22gbr1-C+nNJ`O#ESjsmT,i(TN1rEiC7LqSC_gTA^\%'XY2au_
%pA[Ykf"4lr6?=8#$fa$tH9#MMirhr'1eXk>Q)h-8Bcc$6I+IA92,!Ljqji;hXBC]DrR/Ti9F-)lch@<G0S3!!@h[meK%NI:W5!n-
%jsVas%`orrJXLeX>Y/'RXY*>WgoF*K@O!4l_*t32K#Z\RD%;afm;BG0h3[QC>c9j$6@T';aoSCl/C(D>"Nk`=2?[$D\K8"5E-g^\
%`SSYEOC7V%&_R9\K/+b9*hST>33D,#$T](L*i;kGjKB,>'9j976W*3(+>jjRTu^KT'#;>"cS2Um0U9On6C&q16PY-o(mpG[*a;<n
%e@LR!R!#Mu],6N1?r4`9(tHk.-E'=)7-(X"K2C@QXpR^/Q(oYtL_0r>-&2bHG`2T79LUoMhZRMdD+C(W3oK2o8;%K3#%GUEN3J;/
%G+l6/M4eTm872S\ng9$f,]kSR@oD.g&d%UmG*"oQc/586%5.%r)Qi03/k%J3e\a6m+TioE5`TFYC-3S.s'Ffr&d14*Td:'Endl]^
%:4t(M5-K:Gm%97<9+5S0)<6D`Oj0&2-"C?3Jc*P7]&?Ei.3sh@-L>k>WYkDA1C@UHi6.&?4(fUH0R\<1r']tsPh\B5H+:&n`]*$B
%$f#<;l6ncuiVa$#./%R'Qf[d!\CJ?Nl.),N]rrHS"U>7J-u?>0_1?q?i?*NbJS-,WlV3B6VZk-(flUD:?0@"9bqD&p@c_17<=*"o
%Xgcr<:%D'UobR'ed$F>/ZOP\^h0NT)_t.mNs&hSD:Wn_&oWm24USdM+I^S,8?Yk:B[Gf6BL@].Y>!KdU"uKDNrq<_Q[%>`]dg#Wu
%-E[!"9m_(fCa+\a>#U"J[AIF+CJEo?>&-0"VmRj]lBdqL]O,D75u('I-due3l(jeAD9U5/e8,>]QC?+mAZ9hB0nNo:ZjC!'am7#$
%p(7d%&Et?\?nW$$1d^OToQmh0$=2AR(7qKDJWPP?&A?gCpucW`^W94B&J^S@f?GLJ,'1T07#8*QKN\`V;]uL,@(f6&:4Q'j3W3:+
%iKeSRB39%X6uJF-"-"AYCrj`?>j'lrnI)Y.+iR*0M@^0dVcB=_3E*5n)j@s8VEMa@]R38!8cg94fPE7s-&*TT?Y$E$CtjLU>7=&N
%\`i>q-Y,Rs;2cp`X!3sZOTZEbJ9LT&Pj+=FD43!sBSH7%:d;R8m0h"HZ*KaXS5<5j-(pEu$"teN9<.AR!Hub=iedjW&_csWYi"/i
%d.ZcA?Q'3Bg9FVHIic#Ck%0D+o:8\o%c?"lCJ#ma@Ss<?00FOa/4*+;0>5GI[*\m:c5/]S8TO(jThY)7nfgFo4qCW.SPNmLfYB2C
%(gMt@a.rrSX;baO2RKD]Zt>fL:#A;_kA0&C.nhuGNT$%"QT=?25XahZHJ2D22q`@G,Y3`]]HkGNAMmqY`9PXe6>e9S;6W$$R=X%X
%8;^DJe7laK?(:imF:Ds1A396ang6ZXmiE`WA)Af9nWOLj>8c=`po;;XNr`ZJ01fV,h1qXiME1Rn-=kZd[hH^eL7.=a)gP@p]a!H)
%Z[q/Sd>LlUV6f=KpALI84LAkI-c$6')359/@([asC*K$FE=j,j$4Wu$p,"u8NsNX%AjI+$,'.F]W&Icp'QHP'\2k(na@=XuLU0o[
%g81;!#l@:*G<3$^/qjW8SqPs%&3b.5N2,Kn<YMG.U2Q6j3ELbAeK)b!;`GkF="4kA_G8:]LbZb^'?)[MR4CEE6:K@W9f,-X;ds*9
%-Xh^TL8'?A-uj1P81uD.$2fn$L&2lYMp7TFr4j1ALo+"/kX;`[:SPY!Y7bkM_2,<\7-bJ#i8=XrTIHk(n.puqSJ(0-2C*<q.gK4?
%!(eq3f8h+)RU=\'"c7nBn"P%<&C#V5>+b];'kF?2fI_dXOdZANMIP]-SXHb%1#R'H(nE#0%.@DBR\q,`d2l\M7oC`?J^;B&^dO(t
%+.+pJbVjKl+]ho/P[0F7NFb8H2f-sDs1niWOB/]OUr9R["t[MhHu_B]M8UIYgj+K@8+55L:k:Cp(N"7ceK[YH9J3ndQ^29\!p6Sf
%EZcUd9uE'#AisV]J<L$e\9MOl$ld.fc+l36%!i8A_M5F3'<=)UEk(?!0+Q8_n%a8h,?nHA9Fh[VS[F=HmNQsF-r#YSiMhU#!tlJS
%d2XY^hG=Orna>E$*Q\?WA_eNN\96Ua?<ui@]Ef77Ue[6M1WnWDnZ\\+)aN0^*=Dm+W]N%_G'K;0<g#Ue7V6g+M#j(W*'F2$fV'J/
%o3<a('(I:PQ<"]rb3[l\b0NdPUmp/c+r-FM`Cc>`/SH_,X9Z4%'2sLVRkE]Z<1kq/k(BGL$BGKu@@?j+/h9eJ$PI?E4PZMG7BKpp
%&%7]NQ7$+1g3)lK&s^I=qljpkp>r.rYM[5-s!.dG2sEO=3Hk2_mE]d-R`Z7eAMKa59nY*#ouX067<miH_rgk.1fmAS0oMN_4'3M<
%3f>N6'H:,Wdst[*a+pu?UUY)h5HY+]0b^jV<Ho07je].19k:+.NYe7#5nVRrY&3l0*L<*jd"K'a*3+=C/'O4s=/XN!>gp]JY$4r^
%[AU3P.BG^3-]3/N-sVd\mq&FSUe>okWg@)rCgs#sLihQbfn.dp1rAlb`:_NQ9O*hcXchN8#mgFNTr#W:.@dFgAofZumC!D'Imc\p
%KBSt//c(:e]l\p+@j\eZI$F+'D7JjH6+]%J(Z9Z4OIN/6:]d!C4W627``g4m1eB+lg+l%QDWPgM'Ws&tXMRFXq&;Ja@(cI?7'-R<
%*b.Eu!GujEa?o%+=e?t[WER/[rsVlUgh3ik_ncmWKBLL4pf"hlN]ipT[R5,RZLo@#!@3o'guaMs?p+k22"@4Bb1f(k6'<cu6F3K[
%/F>hr=XnI8_G6+<dO.db]@mu,0'K\,C!m&aDihnc'B3r*Uj)MS6KODXBbIH^TU)te"uPU@]@s28-I"Ut]'VpNA0d7lOO9s8d8-"C
%&qjf]Nmp1e,nbP,aDrF)Q)FbW+\VFVZlGiOmU@P%SW(e)VnWo]"OZ:QG_J[&:au<V;#5**A=,c-`#D;!J24\GOG(S\5NIq1BHoqP
%TG$?I,?#hc'%j\@^o8KF(o]c<I3\jTaIB^l2Z7K'\:iWP+D%e"[p>\ElQ,`H0)D7?eki/^Yt>i7!%=)G8cT01"a-jjNW,r_'Y8G%
%9i*NYl@DY@[*tO/EmHX7jfI%DnQh;g&cu'!MZ#69X?XqgA1Nr5S3M()lMGN1#GD5s&(4i)T.CC>qH>386E!=N#uNWU1<m,Y:RdFs
%ZZ02J"h"TZEJRAWTIM?oJOgah+]+9?h<W<c;tNCQA0pji##e3_/$?uNPPZ^KIS(JBQ*;WXK8(L$miijj!*R/F.\Vi#I%h?!aFn)m
%KjC3%=G(Eq\Dp,S6OmsN])DAg.EuX*OgnDj[>\=*bgCl2dVkit<ac=]*-RX4..`+-T?pG=Z!F$>H_64Hk&h(WD:#kkC6]ZU'O?cn
%hh#^XeY7qTgN;>Fa$\a4g6_,^nPQ.ZHh;$6kLkR*fu5:!9Rqt;2bm"@&?XaA]g36rf<Y8aqjGpf^c==&km;XKE2(5Q3/\`!_HF'$
%.$""\mq*q:C"M5@J42331"]fS"!+8S=G:m-Qj]JGL.r9+/))d9CaLTl8+?aWaP.CLC0&,QfJ"&c3k\7-2Jmj*\n/idHhsdYdtq;h
%Ad[rY5(gp4DTAZL%o"icWbrj4W=7<ijqFb<P63AYP!aR,LE;J7^L!V:o][2eeCVD`ld-<0HEQJk.1CoA62PY!ZK`).%W"L4k<#A/
%C'-[]Y3<\]i7Z`lO&ucXb0O/fXW$eYm6f<V^>6q]eSr-pf`uDrV0qdDj&+3KJ4.k3)-!*"Z(=hW[3YG7"_!iWT]BTWZ&&.RRR47g
%`B9)Y$LtU8FI.FO0UPRS()Len?g;4dg![T/&h7W<;HTS$6#"_qWb=@;Xg47iB/\3DZ!,P.K+_M][qK,I%41NN&A:V;?Om[96.+MU
%UP&?rdLWXr0-=5;T9eJERtR/]'F1N:;0Y&?HJBSIo%hP&6ROVmE#DhtWMAHVlZqD9)FUn:'K<?)d[g^Rq?REK.F$7U7C@3B8giI5
%G+CKIJG>7.84>g7;Z@mkW(g9.?;s$D4603d+b@Odii9#P]^>M<:l)k\OtFt/(l+SSP;FuA?[5<##<NIXU>$<P[@QL_g&0ir)]AZf
%-8rGtb%&N?j?<*?*XYn]2&*Y*dKje<)[M`1iR<WR&i656p;:!;*69\6iaLrr,iki/$9ebQH">F%)"bBrgJAT?H\G]ua3S`S41:sq
%#AI[Ei^C31D[SQ$2sV;Y\B=;2Sh>Z&W>DFJS/`*QSi$beaXE"$qEXT3R$i+UmRW_s=-/2p7(DR;UnS.!KS0<ZJhe;^p?>]dUF>rJ
%AW8G*F_S=YD_b(&!Z8[inG/_?@am+UCCEiUW&=Ki7BM?OOs,U]'Q96REV;E(L*'tpqOU#\Es."//tP6\!Is;O<Zj>*O@2qcXKlX8
%nd)r1gDpZ.Z?^FIoWb(YXNn\6l:SQV>mYaV!5eg*Tt\7PM&5YbhaDn7UOZQfXmIAbhl9u+,cBKK](Qn-0"YA8I0oZ3/7IqJX3^Ii
%e`Tb1ngr]7>\\WB>?HDb3fgD:VqrJXp%m1A>L\qBo[_VQqrR-b]lbXINno8%D-uOE;pH<=f;9NB*m6lfE9bn8g*Xk!CXK*&olARC
%0N[E7nL`tiq*qR]J,>fBW@gPpHh=3^?@g&DhOg+IEBiXG62,n?Vhp&gC$@m,>'a.DZ<;l%GHNC_ZujQ9V^7$C0#?T27kbZieD['G
%=upbsQ4=o5Rro,g>\3[4O'I+19)uXi/b.[@?>/c6KP2XIaZq)VXg[.`9+T:rd\6*9FJta@XqEhbAn0V1l.YN"9<gs3&<-s9"WgZ;
%a;pQVFbce`Xb3C/+bcs*Y@lt0m;(q:`t(mJE++=[##$A!pG3`H%0B(&9CW)$q\(,uE,>js'!?R"8e8MB,+Juuj+g6*0)qS9g.SmK
%$rRH(gRo.MW)LAE5S8^/T;[:^d!pr62"(;C`&u=u;VC:*aHhoZR:E&5-d]Z1l?q$4,B#uM9JK)#[KN?kD5QQ98QX.LP7Vs1H8a`F
%GmN-cRg!BI"OHC)RjfJif:Z^O?=V?_4O:"7IXW.#p;>ltK>p8i%U+M5StTSUp,NIkQ9IJj1LQs+Rug53$ZXcD=-0p;nY%\\N/\J3
%(<O?+9]#86#F#qF6D!bBX-PRCOh(:2XXB#+-GLiS$6XU0?t.M1#h,CG@<<d<b=XXF!TMZ*+m@d)<m`Nq,ajt6K4]fsDdW18a\H-/
%PGGE65frr9^)#Zr,H#>u$]P4@q*#MY=$67O_e$F&Nfq@VJ--cW>C_BF?60Pt&\p\#Ypeu#J@McrABbsL_ur@c5YHY[)Z0B643(B<
%e=/G:bK^-8RuX\,DKHR6F$MPr?rtX)8Feu?b5Dm;Or&BH:NA%?9kuEU19N6"HPN\Ic;a<l",&W>2l-t0Q0#gZ2?(K=M2DI'[KA-.
%Yt1SF/3N)tG%?_J'4\6MX0;0ZZ0%)*P%SBP8dBIPMQ6\3U^6DnmNAL-@RrgVDDh!nJhmpb"Y[G=Ba<++6Bd0Q>/0i!W(S2dS\,$`
%!A=`'(=E(WmB8d-ot0B1.f@OLq`7)5]hIC].d:7a'0snW@jlMP/^ZLqB?"2;piYLkppflhDj89&9A@2I:("\WA%\UhEuu/lC>t,?
%OKWl$UOAoEfni@?(CSD"CWa-?:a1.M]NkXimFEQAjD%$7P&+u1+$'l>cP]p8KUc(&6*D"aeEe-\NaW*ZNU]K&d;Eki5r__Eln(b\
%cK@>lLP)*+AYRJ)1;RBdR<8oWb!h%L?p]EIGV@oWnh0Y64sNj,+eG3M7sB_8`8ufYs0+1:aOsB:l>7p_*VPIqafpB@ep&F^Cq2L!
%^eOW<r`_L8m:fo92&#OMP_j]2MF4M(Z]ZJfWuQ&;-mS3Na6b8`1#2+"#6tj$=Sc/2RjPkW#u?FI`ZYXmARZLrY.K93ZNRiu;]D+F
%%Ag$a)SF*eaS>+q$9Y$s9/&^t=]1*>:n:'\]l/NDK%Ad(<5K>.]uXR1\h1K9.*])3U+lU+H*kJ?#?Nc`P'+!rcjYmGk6)or_D!,q
%83B8<Rl,K,.`j4^9Ip?<KA]#FH\Cp>'hA?k%AUd'(h#X<WU-sB6lIL2lUO/^ULp8iA(UuO6)_fsO[Tur;uCm=8JJ!"etGh4Pm-87
%!)b'AhUKC=3Y>[MU]HOFqXdA(4XPH3BH$fti(0LK`eZ$Wj_?j@YJ5Sa:.)jA*Xi<+'n)_ERmgr^Z'tr4-lR;?dmsm99P'F`J&%*N
%!h[iRO)STad[@UZd.Tm)m"PJ.Ws!6bKlNo`2$UbjL)]mlYg5`q2^jP[?HH>.lL9lnk#LDm't&e2/ZA?h<FU!Y9(Cq36Y:-o2>pg%
%0YM87S(uC#V#V#t]K8snhs"'$-8G.!&*;bQj\QS^7Tfg,AL93$6d/0DlZmktND\bZBt&[*+!-O;_gRC*Apq_-$63S.H'L's7BP*Y
%/#qEHFdN_XAG@Yq$]*1n`#0=sDW2DH^tg,Zs!AP05V:,!$.1thaRc\=YOY%:.,%bWcZ15FJ!%9X&Jn?7(7p^:"%Q1nptg4:`8)L*
%\dl-3M0EStTL#ao9Bc"Hq9X5S=kYK-dVH6e)b.:d16#iOo%!I(QGj,CEB@,C]h1,a]k2,E)%TPD[<NA="@/tLR[9rO<eF/:SumZ<
%egi<)`<aGW->sN6^?BJ=`VpmYL&k)l<!hC]b$`SBqK.6gWe1+#V@'@F:pF651_Pl]"8L^Ubqu9Q7V"4THLe<Hk;(Ls8nZ)NEZRN+
%5_/k2!X=M2i1(M59P.,RG<[#THBia+*5_P\0pCQEc9YY$X+\k=>/YX#'aGglps6Qu%FVej%3-J8?<Cp.cG$H79j%3qYS38h2Xc6t
%?RfDcWj&qY^Q&j?!tVq+/SN"[ou/))-d.N[onpZUX"[^6k3N8=)ic/_R)u+8P[#T(dFrq*eOp])"1ELE;!*O^8-5[0]SI^;,]NuY
%#&Z7MN7<`"?t4-lTd/m%o(\C-36.[[@[GL"Wcn^n"Y^;:K%rU-6p_66CJ3\)4]un<8s34Cckli).utK88T*<,;C0ctUE!XHI%o<Z
%&k=/bgBL>4n0R$[&J#N,p>RfUX#_.:LA@7o/f>hQd14f(p!hZXpp^>NX#1Um7S<b[F!Z:Y^*4e'dRk0RYO8mb^.*Ep>u$.n8t2gf
%DM9O8q^qJ@s5>Y&c/No)Z1@R*]8ZZ(he!1<AgahFE_WIgDCQ&B(,@)@2FWB4pK5]RhPt*qF$me2G$Z=H?jKQ[[fJFn#Z'?=i+E&L
%dtQC_bS.pmM]LVLW/cbem$N$%QLqn4G&Bm9n9#Lba]@8cmN#3/f<H_(M+u#B*YoTZ<OO2hh,oU1WR.427>knbc$jeRaVNac"1Daq
%(N-DVRn22+hc$1[Ob.H<4:=!Th20ilk)-JccW.#MUGgfZQR+?7pS%pH]'jMKQ=^eqaor`+W*d40WoWdc.;(r66;)fCUX:?4UDkul
%NPeiF%5+a=jiB>3F:o].%(Jsm9EDH*'4XMJ3fZu!Ct,G>X#Tfl2aNqe(Yh]%]<jt-JU2f)eV+"f'mUU.6*G@rY/OD";EX]_U)s`#
%2T$5:`,^bH3X"(e?B)@gWFit'LMeC_Ne5ACkE;`/[b-JhXT=a=XU(h^mN;5':pu=B#3n]P[a4/lA1n"%gVS"Om-Xct=%N'Eh$D&V
%F1WF2c$e,B41F+p]X^Up:<_PLFa!3L6R_P:(o!KiLmKjART,^b`\&@5qr\g%WVF#t"o/,JFtKbWge`)W0`U'jQ\Nq`*kb6T"p0Ni
%OfUq11nHtc'A>f?r]YJm6hdOj+eFOs1WQWGQ#u?UQ?42RpFT5_^nK,F$S+j(oN7erF)79]>A2L3fP=WP@oF/&2tOh.me0i&(=2GF
%fE1G/,E'BF7ku[[]d4W9hf#f"S-@!0+hAfNa*E@i,\N`B$]ZhC`(JNi6Eh(7(M4ao.:trCa%&aiHm1.tOXmIuY3<dQs);sj/Un[&
%@-h`t>;VeELm^`E4HR;XC"@,0;1`^'l7HR;PD3qI'>*t'8p@hT*t30aT.6V1,c+Oj*'nDc#3l8-3[^V)1lTU\^4$r>eQ;/(1GE\^
%MVb8g-+mE>(/ogcT6T`2=pHXkY^I;O<Uba36TRTRdK38"KZbi.Euck0dTqH!2/2P*17m]\:-t'eA8EA6CQWUS3bYLF#8[sWYmE8p
%;"gQ=LdS8'Kf!=tTqhkQWNF[5c?`A(;c+-:Pk=<Z6u7pCYi7?V<Z*j.AaCOEAsS/)MNacINt]Y6W):\V:Mkn&:5T't=q>A+$*33V
%g%t7#Z=u.Hn:?HP%4$*^(JF/!pM96'kR!HC;XAL:dLb0(Y&&KB2hdr9q)P0$E\1p8*+!S0fp]spXqWsC-O@2Q82_&sE=TP/]rk=W
%@bBoPifc)c!C8HE6a3`/:tHpbeeM^^efus$Pu/Pa=B?CT\mfN'>nOpG'TWtrmWI\f=/<W/mW<$i+u;;ddFIM^AO`s:X@l))d!h[l
%+6%\^j-2+=h@iZ+RLuVKS5T$SSd:)o-QHkoKTd3&[G)9ghGdJ>>;j>A`!M3f'&cA?F57Fga9+La#_sNMS7p*!dq44-VJL1?=H5["
%)+NfA6_e3\kkG>gE_m.Bk8S4d@Yt<G&EJ4+D2E2*+6K%(W0'`/*RK8/^Qrcs!Pp\$fYf\D(!\]?3SQr+AfFoj@N/2QB,cGmD5&Ve
%%4MXh%;CO&9gF\T85Y1[6;`PT85Ym[85U9>MF(heMp5d">2a!ZOHU,&$BYcH8rucge!MGW%VW>qQX"Sh;kEd>8-E3bkVBj_Si"KA
%Pk,/[r*p92Fjn]"_XO.V#rCRp(b4K-)<`KVn]^%%Tlnoh>LWuMi?;6eUiGUlPMB%*a7SGbdJQh^da1_jEbWJlUS0=9g7pjMkbLqk
%jZJ"h*Lc&.O@/16.i0L/T@@:#CPGhZ=7qTs$a++]ML7)r`.`1>'p7P[8_,A4\nrj=r+$<H0RG^Gf#Kc6]1Tq"o[!p4kc+[<)L*@K
%(M&KCM+;YSO:!3CCnStbp8AKUqIn>s3K*:%qb7aSaO2^gplt.\RV+.-N0f!,:2&0Q%:hSVUop;P,!bc,,rFeq6in+5od"NLEK<KA
%[\n,DSr[KH<"F5Le?^sG5HWLprG%`no>9!>!>'C^T407g>n1X)%4s)h"?:3?Y'MX#$psraI`jF4oG?Ops/j#g2T(=%f/NTgm@O"N
%L&U*Fh3N6=]]I058[#W]YB3.V(LbF,+r#<qS`XR-LLga*2+gLYD($s1.9X7VL=SpZJ>n`9[+[9,j3U.@\YF1F4fTt9$?#u?Yh1u[
%aJCV("@HJc[7>(ie;6u>Q$N9\h?^IE#`DD5f$_2C[%MY2bo>WG'`P53m*7YNKX716E#jIF[cWL@+C]P,:GUeBZjjXG-\?J;&!@'f
%">Su2PM*`Of18]X>$D-I+tIq\^lSk3Sd:(^b\N"1fVf=QJ1L58ocrTNq,B!.%pA-b;M.)S@+>q'39!YggKB^9(<B?c5jjm[`T?<=
%n8RlRd`2r1h>46k6^Od>j+BO4dZj#^N'A]7S7=,UM0AqL[HA^)>Vug5Bqea>K=]OtpgK,2;MXnfC%;Z),jA'744s7rfr%W@3Z<>%
%TosTL*<c9@%^+ETHN371lML$/meuR/n^e;t^YL"35+V012W4;,j5]CeoC;SJFFO8Xn`BQ/l/qd=%+[W@Z2O"NnU,ZYo(d[EH27+.
%0-FrX)Vj1uq!mDAGQ.Z+'2]J~>
%AI9_PrivateDataEnd
